export class Helper {

  // no dom creation, only events
  static add(event, input) {
    // event = thing/to/algo

    if (event === "id/total-amount") {

      return new Promise(async(resolve, reject) => {
        try {

          const node = await this.verifyIs("id/loaded", input)

          for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i]

            const input = child.querySelector("input.quantity")

            input.oninput = (ev) => {

              const price = child.querySelector("span.single-price")

              const target = child.querySelector("span.total-amount")

              const result = parseFloat(price.innerHTML) * parseInt(ev.target.value)

              target.innerHTML = result.toFixed(2).replace(".", ",")

            }

          }

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "selected/node") {
      input.setAttribute("selected-node", "true")
      input.style.outline = "3px solid #777"
    }

    if (event === "selector/reputation-self") {
      const node = document.querySelector(input)

      if (node) {

        this.verifyIs("user/closed").then((res) => {

          if (res.status === 200) {
            this.get("reputation/user/self").then((res) => {

              if (this.verifyIs("text/int", res.response)) {
                node.innerHTML = res.response
              }

            })
          }

        }).catch(() => node.innerHTML = 0)

      }

    }

    if (event === "element/selected-node") {
      input.setAttribute("selected-node", "true")
      input.style.outline = "3px solid #777"
    }

    if (event === "node/onbody") {

      return new Promise(async(resolve, reject) => {

        try {
          if (document) {
            if (document.body) {
              document.body.append(input)
              resolve()
            }
          }
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "oninput/verify-positive-integer") {

      input.addEventListener("input", () => {
        if (this.verifyIs("text/+int", input.value)) {
          this.setValidStyle(input)
        } else {
          this.setNotValidStyle(input)
        }
      })

    }

    if (event === "onclick/overlay-owner-funnel") {

      input.addEventListener("click", () => {

        this.overlay("toolbox", async overlay => {

          this.add("button/remove-overlay", overlay)

          const res = await this.get("owner/user/self")

          if (res.status === 200) {
            const owner = JSON.parse(res.response)
            this.render("field-funnel/owner", owner, overlay)
          }

          if (res.status !== 200) {
            this.render("field-funnel/owner", overlay)
          }

        })

      })

    }

    if (event === "onclick/assign-expert-home") {

      input.addEventListener("click", async () => {

        const res = await this.get("name/expert/self")

        if (res.status === 200) {
          const name = res.response
          window.location.assign(`/${name}/`)
        }

      })

    }

    if (event === "onclick/selector/contact-location-expert") {
      document.querySelectorAll(input).forEach(node => {
        this.add("outline-hover/node", node)
        node.onclick = () => {

          this.overlay("popup", overlay => {
            this.render("text/h1", "Kontakt anfragen", overlay)

            const funnel = this.create("div/scrollable", overlay)

            const preferenceField = this.create("field/select", funnel)
            preferenceField.label.innerHTML = "Wie möchten Sie gerne kontaktiert werden"
            preferenceField.input.add(["E-Mail", "Telefon", "Webcall"])
            this.add("outline-hover/node", preferenceField.input)
            this.verify("input/value", preferenceField.input)

            const emailField = this.create("field/email", funnel)
            this.add("outline-hover/node", emailField.input)
            this.verify("input/value", emailField.input)
            emailField.input.oninput = () => this.verify("input/value", emailField.input)

            const subjectField = this.create("field/textarea", funnel)
            subjectField.label.innerHTML = "Betreff"
            subjectField.input.style.height = "89px"
            subjectField.input.placeholder = "Für eine schnelle Bearbeitung, können Sie uns hier den Grund Ihrer Kontaktanfrage nennen."
            subjectField.input.setAttribute("required", "true")
            this.add("outline-hover/node", subjectField.input)
            this.verify("input/value", subjectField.input)
            subjectField.input.oninput = () => this.verify("input/value", subjectField.input)

            const placeholderDiv = this.create("div", funnel)
            let telField
            preferenceField.input.oninput = () => {
              const value = preferenceField.input.value
              placeholderDiv.innerHTML = ""
              if (value === "Telefon") {
                telField = this.create("field/tel", placeholderDiv)
                telField.label.innerHTML = "Telefon Nummer"
                telField.input.placeholder = "+49.."
                telField.input.setAttribute("required", "true")
                telField.input.setAttribute("accept", "text/tel")
                telField.input.oninput = () => this.verify("input/value", telField.input)
                this.add("outline-hover/node", telField.input)
                this.verify("input/value", telField.input)
              } else {
                telField = undefined
              }

            }

            const submit = this.create("button/action", funnel)
            submit.innerHTML = "Kontakt jetzt anfragen"
            this.add("outline-hover/node", submit)
            submit.onclick = async () => {
              await this.verify("field-funnel", funnel)

              const preference = preferenceField.input.value
              const email = emailField.input.value
              const subject = subjectField.input.value
              if (subject.length > 144) {
                this.add("style/node/not-valid", subjectField.input)
                window.alert("Betreff darf nur 144 Zeichen enthalten.")
                return
              }
              let tel
              if (telField) {
                tel = telField.input.value
              } else {
                tel = undefined
              }

              this.callback("email/pin-verified", email, async overlay => {
                const res = await this.register("lead/contacts/location-expert", {preference, email, subject, tel})
                if (res.status === 200) {
                  window.alert(`Ihre Anfrage wurde erfolgreich weitergeleitet.\n\nIhr Ansprechpartner wird sich, per ${preference}, bei Ihnen melden.`)
                  overlay.remove()
                } else {
                  window.alert("Fehler.. Bitte wiederholen.")
                }
              })

            }

          })
        }
      })
    }

    if (event === "scripts/update-buttons") {

      return new Promise(async(resolve, reject) => {
        try {

          const res = await this.get("scripts/closed")

          if (res.status === 200) {
            const scripts = JSON.parse(res.response)

            this.convert("parent/scrollable", input)

            this.render("scripts/update-buttons", scripts, input)

            resolve()

          }

          if (res.status !== 200) {
            this.convert("parent/info", input)
            input.innerHTML = "Keine Skripte gefunden."
            throw new Error("not found")
          }

        } catch (error) {
          reject(error)
        }
      })


    }

    if (event === "field/html") {

      const field = this.create("field/textarea")

      field.label.innerHTML = "HTML Text"
      field.input.placeholder = `<div>..</div>`
      field.input.style.fontSize = "13px"
      field.input.style.fontFamily = `monospace`
      field.input.style.height = "89px"
      field.input.setAttribute("required", "true")
      this.verify("input/value", field.input)
      field.input.oninput = () => this.verify("input/value", field.input)

      if (input) input.append(field)
      return field
    }

    if (event === "field/image-url") {
      const field = this.create("field/url", input)
      field.input.setAttribute("required", "true")
      field.input.accept = "text/https"
      field.label.innerHTML = "Gebe hier die Quell-Url für dein Bild ein"
      field.input.placeholder = "https://www.meine-quelle.de"
      this.verify("input/value", field.input)
      field.input.addEventListener("input", () => this.verify("input/value", field.input))

      if (input) input.append(field)
      return field
    }

    if (event === "field/id") {
      const field = this.create("field/text")
      field.label.innerHTML = "Identifikationsname (text/tag)"
      field.input.setAttribute("required", "true")
      field.input.accept = "text/tag"
      field.input.placeholder = "meine-id"
      this.verify("input/value", field.input)
      field.input.addEventListener("input", () => {
        this.verify("input/value", field.input)

        if (!this.verifyIs("id/unique", field.input.value)) {
          this.setNotValidStyle(field.input)
        }

      })

      if (input) input.append(field)
      return field

    }

    if (event === "field/image-url") {
      const field = this.create("field/url")
      field.input.setAttribute("required", "true")
      field.input.accept = "text/https"
      field.label.innerHTML = "Gebe hier die Quell-Url für dein Bild ein"
      field.input.placeholder = "https://www.meine-quelle.de"

      this.verify("input/value", field.input)
      field.input.oninput = () => this.verify("input/value", field.input)

      if (input) input.append(field)
      return field
    }

    if (event === "toolbox-scripts") {

      return new Promise(async(resolve, reject) => {
        try {

          const content = this.create("info/loading", input)

          const res = await this.get("scripts/toolbox/closed")

          if (res.status === 200) {
            const scripts = JSON.parse(res.response)

            this.convert("parent/scrollable", content)

            this.render("scripts/toolbox", scripts, content)

            resolve()
          }

          if (res.status !== 200) {
            const res = await this.get("scripts/toolbox/writable-closed")

            if (res.status === 200) {
              const scripts = JSON.parse(res.response)

              this.convert("parent/scrollable", content)

              this.render("scripts/toolbox", scripts, content)

              resolve()
            }

            if (res.status !== 200) {

              this.convert("parent/info", content)
              content.innerHTML = `<span style="margin: 21px 34px;">Keine Skripte gefunden.</span>`
              reject(new Error("values not found"))

            }

          }

        } catch (error) {
          reject(error)
        }
      })


    }

    if (event === "observer/id-mutation") {

      const cache = {}

      const observer = new MutationObserver((mutations, observer) => {
        for (let i = 0; i < mutations.length; i++) {
          const mutation = mutations[i]

          if (mutation.type === "childList") {

            mutation.removedNodes.forEach(node => {


              if (!this.verifyIs("text/empty", node.id)) {

                const borderStyle = "2px dashed rgb(176, 53, 53)"

                const ids = document.querySelectorAll(`#${node.id}`)

                if (ids[1] !== undefined) {
                  cache.id = node.id
                  document.querySelectorAll(`#${ids[1].id}`).forEach(id => {
                    id.style.border = borderStyle
                  })
                }

                if (ids[1] === undefined) {

                  if (cache.id !== undefined) {

                    const oldIds = document.querySelectorAll(`#${cache.id}`)

                    if (oldIds[1] !== undefined) {
                      document.querySelectorAll(`#${oldIds[1].id}`).forEach(id => {
                        id.style.border = borderStyle
                      })
                    }

                    if (oldIds[1] === undefined) {

                      oldIds.forEach(id => {

                        if (id.style.border === borderStyle) {
                          id.style.border = null
                        }

                      })

                    }


                  }

                  ids.forEach(id => {

                    if (id.style.border === borderStyle) {
                      id.style.border = null
                    }

                  })

                }

              }


            })

            mutation.addedNodes.forEach(node => {

              if (!this.verifyIs("text/empty", node.id)) {

                const borderStyle = "2px dashed rgb(176, 53, 53)"

                const ids = document.querySelectorAll(`#${node.id}`)

                if (ids[1] !== undefined) {
                  cache.id = node.id
                  document.querySelectorAll(`#${ids[1].id}`).forEach(id => {
                    id.style.border = borderStyle
                  })
                }

                if (ids[1] === undefined) {

                  if (cache.id !== undefined) {

                    const oldIds = document.querySelectorAll(`#${cache.id}`)

                    if (oldIds[1] !== undefined) {
                      document.querySelectorAll(`#${oldIds[1].id}`).forEach(id => {
                        id.style.border = borderStyle
                      })
                    }

                    if (oldIds[1] === undefined) {

                      oldIds.forEach(id => {

                        if (id.style.border === borderStyle) {
                          id.style.border = null
                        }

                      })

                    }


                  }

                  ids.forEach(id => {

                    if (id.style.border === borderStyle) {
                      id.style.border = null
                    }

                  })

                }

              }


            })

          }

          if (mutation.type === 'attributes' && mutation.attributeName === 'id') {

            if (!this.verifyIs("text/empty", mutation.target.id)) {


              const borderStyle = "2px dashed rgb(176, 53, 53)"

              const ids = document.querySelectorAll(`#${mutation.target.id}`)

              if (ids[1] !== undefined) {
                cache.id = mutation.target.id
                document.querySelectorAll(`#${ids[1].id}`).forEach(id => {
                  id.style.border = borderStyle
                })
              }

              if (ids[1] === undefined) {

                if (cache.id !== undefined) {

                  const oldIds = document.querySelectorAll(`#${cache.id}`)

                  if (oldIds[1] !== undefined) {
                    document.querySelectorAll(`#${oldIds[1].id}`).forEach(id => {
                      id.style.border = borderStyle
                    })
                  }

                  if (oldIds[1] === undefined) {

                    oldIds.forEach(id => {

                      if (id.style.border === borderStyle) {
                        id.style.border = null
                      }

                    })

                  }


                }

                ids.forEach(id => {

                  if (id.style.border === borderStyle) {
                    id.style.border = null
                  }

                })

              }


            }
          }

        }
      })
      observer.observe(document.documentElement, {
        childList: true,
        subtree: true,
        attributes: true,
      })

    }

    if (event === "toolbox/buttons") {


      const back = this.create("button/back")
      this.convert("node/dark-light", back)
      const toolbox = this.create("button/app")
      this.render("icon/node/path", "/public/logo-getyour-red.svg", toolbox)

      toolbox.style.zIndex = "2"

      back.setAttribute("data-id", "toolbox")
      toolbox.setAttribute("data-id", "toolbox")

      document.body.insertBefore(back, document.querySelector("#toolbox"))
      document.body.insertBefore(toolbox, document.querySelector("#toolbox"))

      toolbox.addEventListener("click", () => {

        this.overlay("toolbox", async overlay => {

          this.add("button/remove-overlay", overlay)

          this.add("button/register-html", overlay)

          const buttons = this.create("div/scrollable", overlay)

          {
            const button = this.create("button/left-right", buttons)
            button.left.innerHTML = "document.children"
            button.right.innerHTML = "Dokumenten Inhalt"
            button.addEventListener("click", () => {
              this.overlay("toolbox", overlay => {
                this.add("button/remove-overlay", overlay)
                const info = this.create("header/info", overlay)
                info.innerHTML = "document.children"

                this.add("button/register-html", overlay)


                const childrenContainer = this.create("div/scrollable", overlay)
                this.render("children", document.documentElement, childrenContainer)


              })
            })
          }

          {

            const button = this.create("button/left-right", buttons)
            button.left.innerHTML = "document.write"
            button.right.innerHTML = "Aktuelles Dokument ersetzen"
            button.addEventListener("click", () => {

              this.overlay("toolbox", overlay => {

                this.add("button/remove-overlay", overlay)

                const funnel = this.create("div/scrollable", overlay)

                const htmlField = this.create("field/textarea", funnel)
                htmlField.label.innerHTML = "HTML Dokument"
                htmlField.input.style.fontFamily = "monospace"
                htmlField.input.style.fontSize = "13px"
                htmlField.input.style.height = "89px"
                htmlField.input.placeholder = `<html>..</html>`
                this.verify("input/value", htmlField.input)
                htmlField.input.oninput = () => this.verify("input/value", htmlField.input)

                const button = this.create("button/action", funnel)
                button.innerHTML = "Dokument jetzt ersetzen"
                button.addEventListener("click", async () => {
                  const confirm = window.confirm("Achtung! Diese Funktion wird dein aktuelles HTML Dokument mit deinem neuen HTML Import ersetzen. Der Inhalt deines aktuellen Dokuments wird unwideruflich gelöscht, sobald du deine Werteinheit abspeicherst.\n\nMöchtest du dein aktuelles HTML Dokument wirklich ersetzen?")
                  if (confirm === true) {
                    await this.verify("input/value", htmlField.input)
                    const html = htmlField.input.value
                    await this.convert("text/document", html)
                    await this.add("script/toolbox-getter")
                    this.remove("overlay", overlay)
                  }
                })

              })


            })

          }

          {
            const button = this.create("button/left-right", buttons)
            button.left.innerHTML = "document.copy"
            button.right.innerHTML = "Aktuelles Dokument kopieren"
            button.onclick = () => {
              this.convert("text/clipboard", document.documentElement.outerHTML)
              .then(() => window.alert("Dokument erfolgreich in die Zwischenablage kopiert."))
            }
          }

          {
            const button = this.create("button/left-right", buttons)
            button.left.innerHTML = "update.toolbox"
            button.right.innerHTML = "Mit nur einem Klick erhälst du die aktuellste Version unserer Toolbox"
            button.addEventListener("click", async () => {
              await this.update("toolbox-getter", document.body)
              window.alert("Deine Toolbox ist jetzt auf dem neuesten Stand.\n\nUm sicherzustellen, dass Deine wertvollen Änderungen nicht verloren gehen und dauerhaft im Dokument gespeichert werden, vergiss bitte nicht, den Speichervorgang durchzuführen. Das Speichern Deiner Arbeit ist wie das Bewahren eines Kunstwerks. Denke daran, auf die 'Speichern'-Schaltfläche in Deiner Anwendungssoftware zu klicken. Andernfalls könnten Deine Anpassungen beim Schließen des Fensters verschwinden.")
            })
          }

          {
            const button = this.create("button/left-right", buttons)
            button.left.innerHTML = ".start"
            button.right.innerHTML = "Schnell zum Start zurück"
            button.addEventListener("click", async () => window.open("/", "_blank"))
          }


        })

      })


    }

    if (event === "toolbox/onbody") {

      return new Promise(async(resolve, reject) => {

        try {

          const res = await this.verifyIs("user/closed")

          if (res.status === 200) {
            const res = await this.verifyIs("user/location-expert")

            if (res.status === 200) {
              this.add("toolbox/buttons")
              this.add("observer/id-mutation")
              resolve()
            }

            if (res.status !== 200) {
              const res = await this.verifyIs("user/location-writable")

              if (res.status === 200) {
                this.add("toolbox/buttons")
                this.add("observer/id-mutation")
                resolve()
              }
            }
          }

          reject()

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "field-funnel/oninput-sign-support") {
      input.querySelectorAll(".field").forEach(field => {
        const input = field.querySelector(".field-input")
        input.oninput = () => this.verify("input/value", input)
      })
    }

    if (event === "script/field-funnel-sign-support") {

      return new Promise(async(resolve) => {

        const text = /*html*/`
          <script id="field-funnel-sign-support" type="module">
            import {Helper} from "/js/Helper.js"

            Helper.add("event/field-funnel-sign-support")
          </script>
        `

        const script = this.convert("text/script", text)

        const create = document.createElement("script")
        create.id = script.id
        create.type = script.type
        create.innerHTML = script.innerHTML

        if (document.body) {
          document.querySelectorAll(`#${create.id}`).forEach(script => script.remove())

          if (document.getElementById(create.id) === null) {
            document.body.append(create)
            return resolve(create)
          }

        } else {
          await this.add("ms/timeout", 3000)
          await this.add(event)
        }

      })

    }

    if (event === "ms/timeout") {
      return new Promise(resolve => {
        setTimeout(() => {
          return resolve()
        }, input)
      })
    }

    if (event === "event/service-creator") {

      return new Promise(async(resolve, reject) => {
        try {

          const companyName = document.querySelector("div.company-name")
          const totalPrice = document.querySelector("span.total-price")
          const singlePrice = document.querySelector("span.single-price")
          const serviceUnits = document.querySelectorAll("span.service-unit")
          const quantityInput = document.querySelector("input.quantity")
          const serviceSelect = document.querySelector("div.service-select").firstChild

          let selectedServices
          serviceSelect.oninput = (ev) => {
            const selected = ev.target.value

            companyName.innerHTML = "Firma"
            singlePrice.innerHTML = "0,00"
            totalPrice.innerHTML = "0,00"
            selectedServices = []

            this.overlay("toolbox", async roleListOverlay => {
              this.add("button/remove-overlay", roleListOverlay)

              const buttons = this.create("info/loading", roleListOverlay)

              const res = await this.get("trees/users/open", [`${window.location.pathname.split("/")[2]}.${selected}`, `${window.location.pathname.split("/")[2]}.company.name`, `${window.location.pathname.split("/")[2]}.services`, "reputation"])

              if (res.status === 200) {
                const users = JSON.parse(res.response)

                this.sort("array/reputation/descending", users)

                this.convert("parent/scrollable", buttons)

                this.render("text/h1", `${this.convert("text/capital-first-letter", selected)} auswählen`, buttons)

                for (let i = 0; i < users.length; i++) {
                  const user = users[i]

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = user[`${window.location.pathname.split("/")[2]}.company.name`]
                  button.right.innerHTML = `${user[`${window.location.pathname.split("/")[2]}.services`].length} Dienstleistungen`
                  button.onclick = () => {
                    this.overlay("toolbox", selectServicesOverlay => {
                      this.add("button/remove-overlay", selectServicesOverlay)

                      const save = this.create("button/save", selectServicesOverlay)
                      save.onclick = () => {

                        if (selectedServices === undefined || selectedServices.length === 0) {
                          window.alert("Es wurde keine Leistung ausgewählt.")
                        }

                        if (selectedServices !== undefined && selectedServices.length > 0) {
                          const serviceOptions = document.querySelector("div.service-options")
                          const serviceBox = this.create("div/service-box", serviceOptions)
                          serviceBox.checkbox.checked = true
                          serviceBox.quantity.innerHTML = document.querySelector("input.quantity").value
                          const company = document.createElement("p")
                          company.style.fontWeight = "bold"
                          company.innerHTML = document.querySelector("div.company-name").innerHTML
                          serviceBox.service.appendChild(company)
                          for (let i = 0; i < selectedServices.length; i++) {
                            const service = selectedServices[i]
                            const serviceDiv = document.createElement("div")
                            serviceDiv.innerHTML = service.name
                            serviceBox.service.append(serviceDiv)
                          }
                          serviceBox.singlePrice.innerHTML = document.querySelector("div.single-price").innerHTML
                          serviceBox.totalPrice.innerHTML = document.querySelector("div.total-price").innerHTML
                          this.remove("overlays")
                        }

                      }

                      const serviceButtons = this.create("div/scrollable", selectServicesOverlay)

                      this.render("text/h1", `Leistungen auswählen`, serviceButtons)

                      for (let i = 0; i < user[`${window.location.pathname.split("/")[2]}.services`].length; i++) {
                        const locationList = user[`${window.location.pathname.split("/")[2]}.services`][i]

                        const button = this.create("button/left-right", serviceButtons)

                        const checkbox = this.create("input/checkbox", button.left)
                        checkbox.style.transform = "scale(2)"
                        checkbox.style.margin = "0 21px"
                        checkbox.style.cursor = "pointer"
                        for (let i = 0; i < selectedServices.length; i++) {
                          const selectedService = selectedServices[i]
                          if (selectedService.name === locationList.funnel.name) {
                            checkbox.checked = true
                          }
                        }
                        checkbox.addEventListener("click", () => checkbox.checked = !checkbox.checked)

                        button.left.style.display = "flex"
                        button.left.style.alignItems = "center"
                        button.left.style.width = "233px"
                        button.left.append(locationList.funnel.name)
                        button.right.innerHTML = `${locationList.funnel.price} €`
                        button.right.style.fontSize = "34px"
                        if (locationList.funnel.unit !== undefined) {
                          button.right.innerHTML = `${locationList.funnel.price} ${locationList.funnel.unit}`
                        }

                        button.onclick = () => {
                          this.remove("node/sign", serviceSelect)
                          checkbox.checked = !checkbox.checked

                          const service = {}
                          service.name = locationList.funnel.name
                          service.price = locationList.funnel.price

                          companyName.innerHTML = user[`${window.location.pathname.split("/")[2]}.company.name`]

                          if (checkbox.checked === true) {
                            selectedServices.push(service)
                          }

                          if (checkbox.checked === false) {
                            const index = selectedServices.findIndex(it => it.name === service.name)
                            if (index !== -1) {
                              selectedServices.splice(index, 1)
                            }
                          }

                          const sum = selectedServices.reduce((accumulator, current) => {
                            return accumulator + Number(current.price)
                          }, 0)

                          singlePrice.innerHTML = `${sum.toFixed(2).replace(".", ",")} `
                          totalPrice.innerHTML = `${sum.toFixed(2).replace(".", ",")} `
                          quantityInput.value = 1

                          if (locationList.funnel.unit !== undefined) {
                            serviceUnit.innerHTML = locationList.funnel.unit
                          }

                        }


                      }

                    })
                  }

                }

              }

              if (res.status !== 200) {
                this.convert("parent/info", buttons)
                buttons.innerHTML = `Keine ${this.convert("text/capital-first-letter", selected)} gefunden.`
              }

            })
          }

          const res = await this.get("trees/users/open", ["getyour.expert.platforms"])
          if (res.status === 200) {
            const users = JSON.parse(res.response)
            for (let i = 0; i < users.length; i++) {
              const user = users[i]
              if (user["getyour.expert.platforms"] !== undefined) {
                for (let i = 0; i < user["getyour.expert.platforms"].length; i++) {
                  const platform = user["getyour.expert.platforms"][i]
                  if (platform.name === window.location.pathname.split("/")[2]) {
                    if (platform.roles !== undefined) {
                      serviceSelect.innerHTML = ""
                      for (let i = 0; i < platform.roles.length; i++) {
                        const role = platform.roles[i]
                        const option = document.createElement("option")
                        option.text = this.convert("text/capital-first-letter", role.name)
                        option.value = role.name
                        serviceSelect.append(option)
                      }
                    }
                  }
                }
              }
            }
          }

          quantityInput.oninput = (ev) => {
            const totalPrice = document.querySelector("span.total-price")
            const singlePrice = document.querySelector("span.single-price")
            totalPrice.innerHTML = `${(Number(singlePrice.innerHTML.replace(",", ".")) * ev.target.value).toFixed(2).replace(".", ",")} `
          }

          const addService = document.querySelector("div.add-service")
          addService.style.cursor = "pointer"
          addService.onclick = () => {

            if (selectedServices === undefined || selectedServices.length === 0) {
              window.alert("Es wurde keine Leistung ausgewählt.")
              this.setNotValidStyle(serviceSelect)
            }

            if (selectedServices !== undefined && selectedServices.length > 0) {
              const serviceOptions = document.querySelector("div.service-options")
              const serviceBox = this.create("div/service-box", serviceOptions)
              serviceBox.checkbox.checked = true
              serviceBox.quantity.innerHTML = document.querySelector("input.quantity").value
              const company = document.createElement("p")
              company.style.fontWeight = "bold"
              company.innerHTML = document.querySelector("div.company-name").innerHTML
              serviceBox.service.appendChild(company)
              for (let i = 0; i < selectedServices.length; i++) {
                const service = selectedServices[i]
                const serviceDiv = document.createElement("div")
                serviceDiv.innerHTML = service.name
                serviceBox.service.append(serviceDiv)
              }
              serviceBox.singlePrice.innerHTML = document.querySelector("div.single-price").innerHTML
              serviceBox.totalPrice.innerHTML = document.querySelector("div.total-price").innerHTML
            }

          }

        } catch (error) {
          reject(error)
        }
      })


    }

    if (event === "event/back-button") {
      const button = document.querySelector(".back-button")
      if (button) {
        this.convert("node/dark-light", button)
        button.onclick = () => window.history.back()
      }
    }

    if (event === "event/role-apps") {

      const button = document.querySelector(".role-apps-button")

      if (button !== null) {

        button.onclick = async () => {

          this.overlay("toolbox", overlay => {
            this.add("button/remove-overlay", overlay)
            const info = this.create("header/info", overlay)
            info.append(this.convert("text/span", input.tag))

            this.get("role-apps/closed", overlay, input.id)

          })

        }

      }

    }

    if (event === "event/location-list-funnel") {

      const button = document.getElementById(`${input.tag}-mirror-button`)

      if (button !== null) {
        button.onclick = () => {

          this.overlay("toolbox", async overlay => {

            this.add("button/remove-overlay", overlay)
            const info = this.create("header/info", overlay)
            info.innerHTML = "." + input.tag

            const create = this.create("button/left-right", overlay)
            create.left.innerHTML = ".create"
            create.right.innerHTML = this.convert("text/capital-first-letter", input.tag) + " definieren"
            create.addEventListener("click", () => {

              this.overlay("toolbox", async overlay => {
                this.add("button/remove-overlay", overlay)
                const info = this.create("header/info", overlay)
                info.append(this.convert("text/span", input.tag + ".create"))

                const content = this.create("div/scrollable", overlay)
                const fieldFunnel = await this.convert("path/field-funnel", input.path)
                content.append(fieldFunnel)

                this.verifyIs("field-funnel/valid", fieldFunnel)

                const submitButton = fieldFunnel.querySelector(".submit-field-funnel-button")

                if (submitButton) {

                  submitButton.innerHTML = `${this.convert("text/capital-first-letter", input.tag)} jetzt speichern`
                  submitButton.onclick = async () => {

                    await this.verify("field-funnel", fieldFunnel)

                    const map = await this.convert("field-funnel/map", fieldFunnel)

                    this.overlay("security", async securityOverlay => {

                      const register = {}
                      register.tag = input.tag
                      register.map = map
                      const res = await this.register("map/location-list/closed", register)

                      if (res.status === 200) {
                        window.alert("Daten erfolgreich gespeichert.")

                        const res = await this.get("tag/location/self", input.tag)
                        if (res.status === 200) {
                          const tag = JSON.parse(res.response)
                          this.render("location-list/node/closed", {list: tag[input.tag], tag: input.tag, path: input.path}, locationList)
                        }
                        if (res.status !== 200) {
                          this.convert("parent/info", locationList)
                          locationList.innerHTML = `Keine ${this.comvert("text/capital-first-letter", input.tag)} gefunden`
                        }
                        this.remove("overlay", securityOverlay)
                      }

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", securityOverlay)
                      }

                    })

                  }

                } else {
                  window.alert("Field Funnel besitzt keinen Button mit der Klasse 'submit-field-funnel-button'")
                }


              })

            })

            this.render("text/hr", "Meine " + this.convert("text/capital-first-letter", input.tag), overlay)

            const locationList = this.create("info/loading", overlay)
            const res = await this.get("tag/location/self", input.tag)
            if (res.status === 200) {
              const tag = JSON.parse(res.response)
              this.render("location-list/node/closed", {list: tag[input.tag], tag: input.tag, path: input.path}, locationList)
            }
            if (res.status !== 200) {
              this.convert("parent/info", locationList)
              locationList.innerHTML = `Keine ${this.comvert("text/capital-first-letter", input.tag)} gefunden`
            }

          })

        }
      }

    }

    if (event === "event/prefill-field-funnel") {

      document.querySelectorAll(".field-funnel").forEach(async funnel => {
        const trees = await this.convert("field-funnel/trees", funnel)

        const res = await this.get("trees/user/closed", trees)

        if (res.status === 200) {
          const keys = JSON.parse(res.response)

          this.render("tree-map/field-funnel", keys, funnel)
        }
      })

    }

    if (event === "event/submit-field-funnel") {

      document.querySelectorAll(".field-funnel").forEach(funnel => {

        this.add("outline-hover/field-funnel", funnel)

        const submitButton = funnel.querySelector(".submit-field-funnel-button")

        if (submitButton !== null) {

          if (submitButton.onclick === null) {
            submitButton.onclick = async () => {

              if (this.verifyIs("tag/empty", funnel.id)) {
                window.alert("Funnel ist nicht gültig: id ist kein tag")
                throw new Error("funnel tag is empty")
              }

              const map = await this.convert("field-funnel/map", funnel)

              if (map !== undefined) {

                this.overlay("security", async securityOverlay => {

                  const res = await this.register("map/location-list/closed", {tag: funnel.id, map})

                  if (res.status === 200) {

                    window.alert("Daten wurden erfolgreich gespeichert.")

                    if (funnel.hasAttribute("next-path")) {
                      window.location.assign(funnel.getAttribute("next-path"))
                    }

                    securityOverlay.remove()

                  } else {
                    window.alert("Fehler.. Bitte wiederholen.")
                    securityOverlay.remove()
                  }
                })

              }

            }
          }

        }

      })

    }

    if (event === "event/on-info-click") {

      document.querySelectorAll(".field").forEach(field => {
        if (field.hasAttribute("on-info-click")) {
          this.convert("field/on-info-click", field)
        }
      })

    }

    if (event === "event/on-field-info-click") {

      document.querySelectorAll(".field").forEach(field => {
        if (field.hasAttribute("on-info-click")) {
          this.convert("field/on-info-click", field)
        }
      })

    }

    if (event === "event/dbltouch") {
      let lastTapTime = 0

      input.node.addEventListener("touchend", ev => {
        const currentTime = new Date().getTime()
        const timeDifference = currentTime - lastTapTime

        if (timeDifference < 300 && timeDifference > 0) {
          input.callback(ev)
        }

        lastTapTime = currentTime
      })
    }

    if (event === "event/field-funnel-sign-support") {

      document.querySelectorAll(".field-funnel").forEach(funnel => {
        this.verifyIs("field-funnel/valid", funnel)
      })

      document.querySelectorAll(".field-funnel").forEach(funnel => {
        funnel.querySelectorAll(".field").forEach(field => {
          const input = field.querySelector(".field-input")
          input.addEventListener("input", () => this.verify("input/value", input))
        })
      })

    }

    if (event === "event/role-login") {

      const submit = document.querySelector(".start-login-event")
      const emailInput = document.querySelector(".email-input")
      const dsgvoInput = document.querySelector(".dsgvo-input")

      const emailField = emailInput.closest(".field")
      const dsgvoField = dsgvoInput.closest(".field")
      // console.log(emailField);
      this.convert("node/dark-light", emailField)
      this.convert("node/dark-light", dsgvoField)

      this.verify("input/value", emailInput)
      this.verify("input/value", dsgvoInput)

      this.add("input/value", emailInput)
      this.add("oninput/verify-input", emailInput)
      this.add("oninput/verify-input", dsgvoInput)

      submit.addEventListener("click", async () => {

        if (emailInput !== null) {
          if (dsgvoInput !== null) {

            await this.verify("input/value", emailInput)
            await this.verify("input/value", dsgvoInput)

            await this.withVerifiedEmail(emailInput.value, async () => {

              const register = {}
              register.url = "/register/email/location/"
              register.email = emailInput.value
              register.id = input.id
              register.name = input.name
              const res = await this.request("location/json", register)

              {
                const register = {}
                register.url = "/request/register/session/"
                const res = await this.request("closed/json", register)

                if (res.status === 200) {
                  const redirect = {}
                  redirect.url = "/redirect/user/closed/"
                  const res = await this.request("closed/json", redirect)
                  if (res.status === 200) window.location.assign(res.response)
                } else {
                  window.history.back()
                }
              }

            })
          }
        }

      })


    }

    if (event === "event/soundbox") {

      return new Promise(async(resolve, reject) => {
        try {

          const fileImport = document.querySelector("[soundbox-file-import]")
          fileImport.oninput = async () => {

            const promises = []
            for (let i = 0; i < fileImport.files.length; i++) {
              const file = fileImport.files[i]
              const promise = this.verifyIs("file/mp3", file)
              promises.push(promise)
            }

            const results = await Promise.all(promises)

            if (results.every(result => result === true)) {
              this.setValidStyle(fileImport)

              this.overlay("security", async securityOverlay => {

                const progress = this.create("div/progress-bar", securityOverlay)

                for (var i = 0; i < fileImport.files.length; i++) {
                  const file = fileImport.files[i]

                  // nginx file too large error
                  // mit salih klären todo

                  await new Promise(async(resolve, reject) => {
                    const formdata = new FormData()
                    formdata.append('mp3-file', file)

                    const res = await fetch('/upload/mp3-file/self/', {
                      method: 'POST',
                      body: formdata,
                    })

                    if (res.status === 200) {

                      progress.bar.style.backgroundColor = '#4CAF50'
                      progress.bar.style.width = ((i + 1) / fileImport.files.length) * 100 + '%'

                      resolve()
                    }


                    if (res.status !== 200) {

                      progress.bar.style.backgroundColor = '#FF5733'
                      progress.bar.style.width = ((i + 1) / fileImport.files.length) * 100 + '%'

                      resolve()
                    }

                  })

                }

                window.alert("Sound erfolgreich gespeichert.")
                this.remove("overlay", securityOverlay)

              })

            } else {
              window.alert("Nicht alle Uploads sind mp3 Dateien.")
              console.error("Not all files are mp3")
              this.setNotValidStyle(fileImport)
            }


          }

          const audioList = document.querySelector("[soundbox-audio-list]")
          if (audioList !== null) {

            const res = await this.get("cids/soundbox/self")

            if (res.status === 200) {
              const sounds = JSON.parse(res.response)

              for (let i = 0; i < sounds.length; i++) {
                const sound = sounds[i]

                const audioField = this.create("field/audio", audioList)
                audioField.audio.id = sound.created
                audioField.audio.src = `https://ipfs.io/ipfs/${sound.cid}/`

                const track = document.createElement("div")
                track.classList.add("track")
                track.innerHTML = sound.track
                audioField.label.append(track)

                const creator = document.createElement("div")
                creator.classList.add("creator")
                creator.innerHTML = `${sound.creator} - ${sound.album}`
                audioField.label.append(creator)

                const played = document.createElement("div")
                played.classList.add("played")

                if (sound.played) {
                  played.innerHTML = sound.played
                } else {
                  played.innerHTML = "0"
                }

                played.style.position = "absolute"
                played.style.top = "0"
                played.style.right = "0"
                played.style.margin = "21px 34px 0 0"
                audioField.label.append(played)

                const reloadTimeout = setTimeout(audioField.audio.load(), 3000)
                audioField.audio.addEventListener("canplay", () => {
                  clearTimeout(reloadTimeout)
                })
                audioField.audio.addEventListener("error", () => {
                  audioField.remove()
                })

                audioField.label.style.cursor = "pointer"
                audioField.label.addEventListener("click", () => {
                  console.log(audioField.audio.id)

                  this.overlay("toolbox", overlay => {
                    this.add("button/remove-overlay", overlay)

                    const funnel = this.create("div/scrollable", overlay)

                    const trackField = this.create("field/textarea", funnel)
                    trackField.label.innerHTML = "Track"
                    trackField.input.style.fontSize = "13px"
                    trackField.input.setAttribute("required", "true")
                    if (sound.track) trackField.input.value = sound.track
                    trackField.input.oninput = () => this.verify("input/value", trackField.input)
                    this.verify("input/value", trackField.input)

                    const creatorField = this.create("field/textarea", funnel)
                    creatorField.label.innerHTML = "Schöpfer"
                    creatorField.input.style.fontSize = "13px"
                    creatorField.input.setAttribute("required", "true")
                    if (sound.creator) creatorField.input.value = sound.creator
                    creatorField.input.oninput = () => this.verify("input/value", creatorField.input)
                    this.verify("input/value", creatorField.input)

                    const albumField = this.create("field/textarea", funnel)
                    albumField.label.innerHTML = "Album"
                    albumField.input.style.fontSize = "13px"
                    albumField.input.setAttribute("required", "true")
                    if (sound.album) albumField.input.value = sound.album
                    albumField.input.oninput = () => this.verify("input/value", albumField.input)
                    this.verify("input/value", albumField.input)

                    const submit = this.create("button/action", funnel)
                    submit.innerHTML = "Daten jetzt speichern"
                    submit.onclick = async () => {
                      await this.verify("input/value", trackField.input)
                      await this.verify("input/value", creatorField.input)
                      await this.verify("input/value", albumField.input)

                      this.overlay("security", async securityOverlay => {

                        const register = {}
                        register.id = audioField.audio.id
                        register.track = trackField.input.value
                        register.creator = creatorField.input.value
                        register.album = albumField.input.value
                        const res = await this.register("meta/soundbox/self", register)

                        if (res.status === 200) {
                          window.alert("Metadaten erfolgreich gespeichert.")
                          window.location.reload()
                        }

                        if (res.status !== 200) {
                          window.alert("Fehler.. Bitte wiederholen.")
                          this.remove("overlay", securityOverlay)
                        }
                      })

                    }




                  })

                })

                audioField.audio.addEventListener("ended", () => {
                  const res = this.register("played/soundbox/open", audioField.audio.id)

                  if (res === true) {
                    played.innerHTML = parseInt(played.innerHTML) + 1
                  }
                })


              }



            }

          }

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "event/register-html") {

      this.overlay("security", async securityOverlay => {

        // prepare html state
        this.remove("element/selector", {element: document, selector: "[data-id]"})
        this.remove("element/selector", {element: document, selector: "#toolbox"})
        this.remove("element/selector", {element: document, selector: ".overlay"})

        const html = document.documentElement.outerHTML.replace(/<html>/, "<!DOCTYPE html><html>")

        // save html state
        const res = await this.register("html/platform-value/closed", html)

        if (res.status === 200) {
          window.alert("Dokument erfolgreich gespeichert.")
          window.location.reload()
        }

        if (res.status !== 200) {

          const res = await this.register("html/platform-value/writable-closed", html)

          if (res.status === 200) {
            window.alert("Dokument erfolgreich gespeichert.")
            window.location.reload()
          }

          if (res.status !== 200) {

            window.alert("Fehler.. Bitte wiederholen.")
            await this.add("toolbox/onbody")
            this.remove("overlay", securityOverlay)

          }

        }

      })

    }

    if (event === "event/html-creator") {

      const htmlCreatorButton = document.querySelector(".html-creator")

      if (htmlCreatorButton !== null) {
        htmlCreatorButton.onclick = () => {

          this.overlay("html-creator", async overlay => {

            const body = document.body

            let selectedNode = body

            body.onkeydown = (ev) => {

              if (ev.metaKey && ev.key === 'c') {
                ev.preventDefault()
                if (selectedNode) {
                  this.convert("text/clipboard", selectedNode.outerHTML).then(() => window.alert("Dein HTML Element wurde erfolgreich in die Zwischenablage gespeichert."))
                }
              }

              if (ev.metaKey && ev.key === 'v') {
                ev.preventDefault()
                if (selectedNode) {
                  this.convert("clipboard/text").then(text => {
                    const node = this.convert("text/node", text)
                    selectedNode.append(node)
                  })
                }
              }

              let rememberSelectedNodes = []
              if (ev.metaKey && ev.key === 'Backspace') {
                ev.preventDefault()
                if (selectedNode) {
                  rememberSelectedNodes.push({ node: selectedNode, parent: selectedNode.parentElement, index: Array.from(selectedNode.parentElement.children).indexOf(selectedNode)})
                  selectedNode.remove()
                }
              }

              if (ev.metaKey && ev.key === 'z') {
                ev.preventDefault()
                if (selectedNode) {
                  if (rememberSelectedNodes.length > 0) {
                    const { node, parent, index } = rememberSelectedNodes.pop()
                    const children = Array.from(parent.children)
                    if (index >= 0 && index < children.length) {
                      parent.insertBefore(node, children[index])
                    } else {
                      parent.appendChild(node)
                    }
                  }

                }
              }

            }

            for (let i = 0; i < body.children.length; i++) {
              const child = body.children[i]

              if (child.classList.contains("html-creator")) continue
              if (child.classList.contains("overlay")) continue
              if (this.verifyIs("class/closest-node", {node: child, class: "overlay"})) continue

              this.add("event/dbltouch", {node: child, callback: async ev => {
                ev.preventDefault()
                ev.stopPropagation()
                await this.remove("element/selected-node", body)
                selectedNode = ev.target.parentElement
                this.add("element/selected-node", selectedNode)
              }})

              child.ondblclick = async (ev) => {
                ev.preventDefault()
                ev.stopPropagation()
                await this.remove("element/selected-node", body)
                selectedNode = ev.target.parentElement
                this.add("element/selected-node", selectedNode)
              }

              child.onclick = async (ev) => {
                ev.preventDefault()
                ev.stopPropagation()

                if (ev.target.hasAttribute("selected-node")) {
                  await this.remove("element/selected-node", body)
                  selectedNode = body
                  this.add("element/selected-node", selectedNode)
                } else {
                  await this.remove("element/selected-node", body)
                  selectedNode = ev.target
                  this.add("element/selected-node", selectedNode)
                }

              }

            }

            const observer = new MutationObserver((mutationsList) => {
              mutationsList.forEach((mutation) => {
                if (mutation.type === "childList" && mutation.addedNodes.length > 0) {


                  for (var i = 0; i < mutation.addedNodes.length; i++) {
                    const node = mutation.addedNodes[i]

                    if (node) {
                      if (node.classList) {
                        if (node.classList.contains("overlay")) continue
                      }
                    }

                    if (this.verifyIs("class/closest-node", {node, class: "overlay"})) continue

                    if (node.nodeType === Node.ELEMENT_NODE) {

                      this.add("event/dbltouch", {node: node, callback: async ev => {
                        ev.preventDefault()
                        ev.stopPropagation()
                        await this.remove("element/selected-node", body)
                        selectedNode = ev.target.parentElement
                        this.add("element/selected-node", selectedNode)
                      }})

                      node.ondblclick = async (ev) => {
                        ev.preventDefault()
                        ev.stopPropagation()
                        await this.remove("element/selected-node", body)
                        selectedNode = ev.target.parentElement
                        this.add("element/selected-node", selectedNode)
                      }

                      node.onclick = async (ev) => {
                        ev.preventDefault()
                        ev.stopPropagation()

                        if (ev.target.hasAttribute("selected-node")) {
                          await this.remove("element/selected-node", body)
                          selectedNode = body
                          this.add("element/selected-node", selectedNode)
                        } else {
                          await this.remove("element/selected-node", body)
                          selectedNode = ev.target
                          this.add("element/selected-node", selectedNode)
                        }

                      }

                    }

                  }

                }
              })
            })
            observer.observe(body, { childList: true, subtree: true })

            const handle = this.create("fn/algo", {algo: "onclick-handler"})
            const buttons = this.create("fn/algo", {algo: "creator-buttons", parent: overlay})()

            for (let i = 0; i < Object.entries(buttons).length; i++) {
              const [key, value] = Object.entries(buttons)[i]
              if (key.includes("Button")) {
                value.onclick = handle({onclick: key, node: selectedNode})
              }
            }



            buttons.createFlexButton.onclick = handle({onclick: "create-flex-div-with-items-from-width-prompt-in-node", node: selectedNode})
            buttons.wrapButton.onclick = handle({onclick: "create-flex-div-with-items-from-row-matrix-prompt-in-node", node: selectedNode})
            buttons.createGridButton.onclick = handle({onclick: "create-grid-div-with-items-from-matrix-prompt-in-node", node: selectedNode})
            buttons.rowContainerButton.onclick = handle({onclick: "create-flex-div-row-in-node", node: selectedNode})
            buttons.columnContainerButton.onclick = handle({onclick: "create-flex-div-column-in-node", node: selectedNode})
            buttons.imageTextButton.onclick = handle({onclick: "create-div-image-text-in-node", node: selectedNode})
            buttons.keyValueButton.onclick = handle({onclick: "create-div-key-value-in-node", node: selectedNode})
            buttons.actionBtnButton.onclick = handle({onclick: "create-action-button-in-node", node: selectedNode})
            buttons.horizontalHrButton.onclick = handle({onclick: "create-div-hr-in-node", node: selectedNode})
            buttons.simpleHeaderButton.onclick = handle({onclick: "create-header-left-in-node", node: selectedNode})
            buttons.h1Button.onclick = () => {
              const prompt = window.prompt("Gebe den Inhalt deiner Überschrift ein:")
              const h1 = this.create("h1", selectedNode)
              h1.innerHTML = prompt
            }
            buttons.h2Button.onclick = () => {
              const prompt = window.prompt("Gebe den Inhalt deiner Überschrift ein:")
              const h2 = this.create("h2", selectedNode)
              h2.innerHTML = prompt
            }
            buttons.h3Button.onclick = () => {
              const prompt = window.prompt("Gebe den Inhalt deiner Überschrift ein:")
              const h3 = this.create("h3", selectedNode)
              h3.innerHTML = prompt
            }
            buttons.pButton.onclick = () => {
              const prompt = window.prompt("Gebe den Inhalt deines Paragraphen ein:")
              const p = this.create("p", selectedNode)
              p.innerHTML = prompt
            }
            buttons.imageButton.onclick = () => {
              const image = document.createElement("img")
              image.src = "/public/image.svg"
              image.style.width = "100%"
              selectedNode.append(image)
            }
            buttons.tableHeaderButton.onclick = () => {
              const prompt = window.prompt("Gebe die Spalten und die Breite deiner Tabelle ein: (4 1 1 1 1 2)")

              const columns = prompt.split(" ")

              const tableHeader = document.createElement("div")
              tableHeader.classList.add("table-header")
              tableHeader.style.display = "flex"
              tableHeader.style.justifyContent = "center"
              tableHeader.style.alignItems = "center"
              tableHeader.style.margin = "21px 34px"

              for (var i = 0; i < columns.length; i++) {
                const width = columns[i]

                const number = parseInt(width)
                if (number >= 1 && number <= 9) {

                  const columnDiv = document.createElement("div")
                  columnDiv.classList.add("header-title")
                  columnDiv.innerHTML = `Überschrift ${i + 1}`
                  columnDiv.style.width = `${number * 10}%`
                  columnDiv.style.fontFamily = "sans-serif"
                  columnDiv.style.fontWeight = "bold"
                  tableHeader.append(columnDiv)

                }

              }

              selectedNode.append(tableHeader)

              if (tableHeader.children.length === 0) {
                tableHeader.remove()
              }

            }
            buttons.pdfLinkButton.onclick = () => {

              const prompt = window.prompt("Gebe die Quell-Url deiner PDF ein:")

              const a = document.createElement("a")
              a.classList.add("pdf-link")
              a.href = prompt
              selectedNode.append(a)


              const container = document.createElement("div")
              container.style.display = "flex"
              container.style.margin = "21px 34px"
              container.style.alignItems = "center"

              const img = document.createElement("img")
              img.src = "/public/pdf.svg"
              img.style.marginRight = "13px"

              const title = document.createElement("div")
              title.innerHTML = "Link"
              title.style.fontFamily = "sans-serif"
              title.style.textDecoration = "underline"

              container.append(img, title)
              a.append(container)

            }
            buttons.aLinkButton.onclick = () => {

              const prompt = window.prompt("Gebe die Quell-Url deines Links ein:")

              const a = document.createElement("a")
              a.classList.add("a-link")
              a.innerHTML = "Mein Link"
              a.href = prompt
              selectedNode.append(a)

            }
            buttons.spanButton.onclick = () => {

              Array.from(selectedNode.childNodes).forEach(node => {
                if (node.nodeType === Node.TEXT_NODE) {

                  const span = document.createElement("span")
                  span.innerHTML = node.textContent

                  selectedNode.replaceChild(span, node)

                }
              })

            }
            buttons.changeSiButton.onclick = () => {

              const prompt = window.prompt("Gebe deine SI-Einheit ein:")

              const span1 = document.createElement("span")
              span1.classList.add("placeholder")

              span1.innerHTML = selectedNode.innerHTML
              if (prompt === "kWh" || prompt.startsWith("ct")) span1.innerHTML = "0"
              if (
                prompt === "€" ||
                prompt.startsWith("EURO") ||
                prompt.startsWith("Euro") ||
                prompt === "%"
              ) span1.innerHTML = "0,00"

              const span2 = document.createElement("span")
              span2.classList.add("unit")
              span2.innerHTML = prompt

              selectedNode.innerHTML = ""
              selectedNode.append(span1)
              selectedNode.append(" ")
              selectedNode.append(span2)

            }
            buttons.addSpaceButton.onclick = () => {

              const prompt = window.prompt("Gebe den Abstand deines Leerraums ein:")
              const space = document.createElement("div")
              space.classList.add("space")
              space.style.width = "100%"
              space.style.height = prompt
              selectedNode.append(space)

            }
            buttons.arrowRightButton.onclick = () => {

              const prompt = window.prompt("Gebe die Farbe deines Pfeils ein:")

              const arrow = document.createElement("div")
              arrow.style.display = "flex"
              arrow.style.justifyContent = "center"
              arrow.style.alignItems = "center"
              arrow.style.width = "100%"
              arrow.style.height = "34px"
              selectedNode.append(arrow)

              const line = document.createElement("div")
              line.style.height = "3px"
              line.style.backgroundColor = prompt
              line.style.width = "100%"
              arrow.append(line)

              const symbol = document.createElement("span")
              symbol.style.display = "flex"
              symbol.style.justifyContent = "center"
              symbol.style.alignItems = "center"
              symbol.style.fontSize = "21px"
              symbol.style.color = prompt
              symbol.innerHTML = "➤"
              arrow.append(symbol)

            }
            buttons.divScrollableButton.onclick = () => {
              const scrollableDiv = this.create("div/scrollable", selectedNode)
            }
            buttons.packDivButton.onclick = async () => {
              const div = this.create("div")
              div.innerHTML = selectedNode.outerHTML
              await this.render("node/insert-before", selectedNode, div)
              selectedNode.remove()
            }
            buttons.textInputButton.onclick = () => {
              this.create("input/text", selectedNode)
            }
            buttons.numberInputButton.onclick = () => {
              this.create("input/tel", selectedNode)
            }
            buttons.checkboxInputButton.onclick = () => {
              this.create("input/checkbox", selectedNode)
            }
            buttons.passwordInputButton.onclick = () => {
              this.create("input/password", selectedNode)
            }
            buttons.selectInputButton.onclick = () => {
              this.create("input/select", selectedNode)
            }

            // input.cache - soll in closure sein
            // input.node
            // input.css property
            // input.default this is toggle
            // toggle specific style property in dom
            // wrap closure in handler ???
            let originalWidth
            buttons.growWidthButton.onclick = () => {

              if (selectedNode.style.width === "100%") {
                if (originalWidth) {
                  selectedNode.style.width = originalWidth
                } else {
                  selectedNode.style.width = null
                }

              } else {
                originalWidth = selectedNode.style.width
                selectedNode.style.width = "100%"
              }

            }
            buttons.maxWidthButton.onclick = () => {
              const prompt = window.prompt("Gebe die maximale Breite deines Elements ein:")
              selectedNode.style.maxWidth = prompt
            }
            buttons.minWidthButton.onclick = () => {
              const prompt = window.prompt("Gebe die minimale Breite deines Elements ein:")
              selectedNode.style.minWidth = prompt
            }
            buttons.exactWidthButton.onclick = () => {
              const prompt = window.prompt("Gebe die exakte Breite ein:")
              selectedNode.style.width = prompt
            }
            buttons.increaseWidthButton.onclick = () => {

              if (selectedNode.style.width) {
                const match = selectedNode.style.width.match(/(\d+(\.\d+)?)(\D.*)/)

                if (match) {
                  let number = parseFloat(match[1])
                  number++
                  const remainingChars = match[3]
                  selectedNode.style.width = `${number}${remainingChars}`
                }
              }

            }
            buttons.decreaseWidthButton.onclick = () => {

              if (selectedNode.style.width) {
                const match = selectedNode.style.width.match(/(\d+(\.\d+)?)(\D.*)/)

                if (match) {
                  let number = parseFloat(match[1])
                  number--
                  const remainingChars = match[3]
                  selectedNode.style.width = `${number}${remainingChars}`
                }
              }

            }

            let originalHeight
            buttons.growHeightButton.onclick = () => {

              if (selectedNode.style.height === "100%") {
                if (originalHeight) {
                  selectedNode.style.height = originalHeight
                } else {
                  selectedNode.style.height = null
                }

              } else {
                originalHeight = selectedNode.style.height
                selectedNode.style.height = "100%"
              }

            }
            buttons.maxHeightButton.onclick = () => {
              const prompt = window.prompt("Gebe die maximale Höhe deines Elements ein:")
              selectedNode.style.maxHeight = prompt
            }
            buttons.minHeightButton.onclick = () => {
              const prompt = window.prompt("Gebe die minimale Höhe deines Elements ein:")
              selectedNode.style.minHeight = prompt
            }
            buttons.exactHeightButton.onclick = () => {
              const prompt = window.prompt("Gebe die exakte Höhe ein:")
              selectedNode.style.height = prompt
            }
            buttons.increaseHeightButton.onclick = () => {

              if (selectedNode.style.height) {
                const match = selectedNode.style.height.match(/(\d+(\.\d+)?)(\D.*)/)

                if (match) {
                  let number = parseFloat(match[1])
                  number++
                  const remainingChars = match[3]
                  selectedNode.style.height = `${number}${remainingChars}`
                }
              }

            }
            buttons.decreaseHeightButton.onclick = () => {

              if (selectedNode.style.height) {
                const match = selectedNode.style.height.match(/(\d+(\.\d+)?)(\D.*)/)

                if (match) {
                  let number = parseFloat(match[1])
                  number--
                  const remainingChars = match[3]
                  selectedNode.style.height = `${number}${remainingChars}`
                }
              }

            }
            buttons.exactDisplayButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Display Wert ein:")
              if (prompt || prompt === "") selectedNode.style.display = prompt
            }

            let originalDisplayBlock
            buttons.displayBlockButton.onclick = () => {

              if (selectedNode.style.display === "block") {
                if (originalDisplayBlock) {
                    selectedNode.style.display = originalDisplayBlock
                } else {
                    selectedNode.style.display = null
                }

              } else {
                  originalDisplayBlock = selectedNode.style.display
                  selectedNode.style.display = "block"
              }

            }

            let originalDisplayInline
            buttons.displayInlineButton.onclick = () => {

              if (selectedNode.style.display === "inline") {
                if (originalDisplayInline) {
                    selectedNode.style.display = originalDisplayInline
                } else {
                    selectedNode.style.display = null
                }

              } else {
                  originalDisplayInline = selectedNode.style.display
                  selectedNode.style.display = "inline"
              }

            }

            let originalDisplayGrid
            buttons.toggleDisplayGridButton.onclick = () => {

              if (selectedNode.style.display === "grid") {
                if (originalDisplayGrid) {
                  selectedNode.style.display = originalDisplayGrid
                } else {
                  selectedNode.style.display = null
                }

              } else {

                originalDisplayGrid = selectedNode.style.display
                selectedNode.style.display = "grid"

              }

            }

            let originalDisplayFlex
            buttons.toggleDisplayFlexButton.onclick = () => {

              if (selectedNode.style.display === "flex") {
                if (originalDisplayFlex) {
                  selectedNode.style.display = originalDisplayFlex
                } else {
                  selectedNode.style.display = null
                }

              } else {

                originalDisplayFlex = selectedNode.style.display
                selectedNode.style.display = "flex"

              }

            }

            let originalDisplayTable
            buttons.toggleDisplayTableButton.onclick = () => {

              if (selectedNode.style.display === "table") {
                if (originalDisplayTable) {
                  selectedNode.style.display = originalDisplayTable
                } else {
                  selectedNode.style.display = null
                }

              } else {

                originalDisplayTable = selectedNode.style.display
                selectedNode.style.display = "table"

              }

            }

            let originalGridMobileStyle
            buttons.gridMobileButton.onclick = () => {

              if (originalGridMobileStyle) {
                selectedNode.setAttribute("style", originalGridMobileStyle)
                originalGridMobileStyle = undefined
              } else {
                originalGridMobileStyle = selectedNode.getAttribute("style")
                selectedNode.style.display = "grid"
                selectedNode.style.gridTemplateColumns = "1fr"
                selectedNode.style.gridGap = "21px"
              }

            }

            let originalGridFullDisplayStyle
            let originalGridFullDisplayChildrenStyle = []
            buttons.gridFullDisplayButton.onclick = () => {

              if (originalGridFullDisplayStyle) {
                selectedNode.setAttribute("style", originalGridFullDisplayStyle)
                originalGridFullDisplayStyle = undefined

                if (originalGridFullDisplayChildrenStyle.length > 0) {
                  for (var i = 0; i < selectedNode.children.length; i++) {
                    const child = selectedNode.children[i]

                    const style = originalGridFullDisplayChildrenStyle.pop()
                    if (style) {
                      child.setAttribute("style", style)
                    } else {
                      child.removeAttribute("style")
                    }

                  }
                }

              } else {
                originalGridFullDisplayStyle = selectedNode.getAttribute("style")
                selectedNode.style.display = "grid"
                selectedNode.style.gridTemplateColumns = "1fr"
                selectedNode.style.gridGap = "21px"

                for (var i = 0; i < selectedNode.children.length; i++) {
                  const child = selectedNode.children[i]

                  originalGridFullDisplayChildrenStyle.push(child.getAttribute("style"))
                  child.style.width = "100%"
                  child.style.height = "89vh"
                  child.style.overflow = "auto"

                }

              }

            }

            let originalGridTwoColumnsStyle
            let originalGridTwoColumnsChildrenStyle = []
            buttons.gridTwoColumnsButton.onclick = () => {

              if (originalGridTwoColumnsStyle) {
                selectedNode.setAttribute("style", originalGridTwoColumnsStyle)
                originalGridTwoColumnsStyle = undefined

                if (originalGridTwoColumnsChildrenStyle.length > 0) {
                  for (var i = 0; i < selectedNode.children.length; i++) {
                    const child = selectedNode.children[i]

                    const style = originalGridTwoColumnsChildrenStyle.pop()
                    if (style) {
                      child.setAttribute("style", style)
                    } else {
                      child.removeAttribute("style")
                    }

                  }
                }

              } else {
                originalGridTwoColumnsStyle = selectedNode.getAttribute("style")
                selectedNode.style.display = "grid"
                selectedNode.style.gridTemplateColumns = "1fr 1fr"
                selectedNode.style.gridGap = "21px"

                for (var i = 0; i < selectedNode.children.length; i++) {
                  const child = selectedNode.children[i]

                  originalGridTwoColumnsChildrenStyle.push(child.getAttribute("style"))
                  child.style.width = "100%"
                  child.style.height = "89vh"
                  child.style.overflow = "auto"

                }

              }

            }

            let originalGridThreeColumnsStyle
            let originalGridThreeColumnsChildrenStyle = []
            buttons.gridThreeColumnsButton.onclick = () => {

              if (originalGridThreeColumnsStyle) {
                selectedNode.setAttribute("style", originalGridThreeColumnsStyle)
                originalGridThreeColumnsStyle = undefined

                if (originalGridThreeColumnsChildrenStyle.length > 0) {
                  for (var i = 0; i < selectedNode.children.length; i++) {
                    const child = selectedNode.children[i]

                    const style = originalGridThreeColumnsChildrenStyle.pop()
                    if (style) {
                      child.setAttribute("style", style)
                    } else {
                      child.removeAttribute("style")
                    }

                  }
                }

              } else {
                originalGridThreeColumnsStyle = selectedNode.getAttribute("style")
                selectedNode.style.display = "grid"
                selectedNode.style.gridTemplateColumns = "1fr 1fr 1fr"
                selectedNode.style.gridGap = "21px"

                for (var i = 0; i < selectedNode.children.length; i++) {
                  const child = selectedNode.children[i]

                  originalGridThreeColumnsChildrenStyle.push(child.getAttribute("style"))
                  child.style.width = "100%"
                  child.style.height = "89vh"
                  child.style.overflow = "auto"

                }

              }

            }

            let originalGridFixedStyle
            let originalGridFixedChildrenStyle = []
            buttons.gridFixedButton.onclick = () => {

              if (originalGridFixedStyle) {
                selectedNode.setAttribute("style", originalGridFixedStyle)
                originalGridFixedStyle = undefined

                if (originalGridFixedChildrenStyle.length > 0) {
                  for (var i = 0; i < selectedNode.children.length; i++) {
                    const child = selectedNode.children[i]

                    const style = originalGridFixedChildrenStyle.pop()
                    if (style) {
                      child.setAttribute("style", style)
                    } else {
                      child.removeAttribute("style")
                    }

                  }
                }

              } else {

                const prompt = window.prompt("Gebe die exakte Dimension der Grid Elemente ein: (Breite = Höhe)")

                originalGridFixedStyle = selectedNode.getAttribute("style")
                selectedNode.style.display = "grid"
                selectedNode.style.gridTemplateColumns = `repeat(auto-fit, minmax(${prompt}, 1fr))`
                selectedNode.style.gridTemplateRows = `repeat(auto-fit, minmax(0, ${prompt}))`
                selectedNode.style.gridGap = "21px"

                for (var i = 0; i < selectedNode.children.length; i++) {
                  const child = selectedNode.children[i]

                  originalGridFixedChildrenStyle.push(child.getAttribute("style"))
                  child.style.width = "100%"
                  child.style.height = prompt
                  child.style.overflow = "auto"

                }

              }

            }

            let originalGridListRowsStyle
            let originalGridListRowsChildrenStyle = []
            buttons.gridListRowsButton.onclick = () => {

              if (originalGridListRowsStyle) {
                selectedNode.setAttribute("style", originalGridListRowsStyle)
                originalGridListRowsStyle = undefined

                if (originalGridListRowsChildrenStyle.length > 0) {
                  for (var i = 0; i < selectedNode.children.length; i++) {
                    const child = selectedNode.children[i]

                    const style = originalGridListRowsChildrenStyle.pop()
                    if (style) {
                      child.setAttribute("style", style)
                    } else {
                      child.removeAttribute("style")
                    }

                  }
                }

              } else {

                originalGridListRowsStyle = selectedNode.getAttribute("style")
                selectedNode.style.display = "grid"
                selectedNode.style.gridTemplateColumns = `89px 1fr`
                selectedNode.style.gridTemplateRows = `repeat(auto-fit, 55px)`
                selectedNode.style.gridGap = "21px"

                for (var i = 0; i < selectedNode.children.length; i++) {
                  const child = selectedNode.children[i]

                  originalGridListRowsChildrenStyle.push(child.getAttribute("style"))
                  child.style.width = "100%"
                  child.style.height = "55px"
                  child.style.overflow = "hidden"

                }

              }

            }
            buttons.gridSpanColumnButton.onclick = () => {

              const prompt = window.prompt("Gebe die Anzabl an Spalten ein, die dein Grid Elemente einnehmen soll:")
              const columns = parseInt(prompt)

              if (columns > 0) {
                selectedNode.style.gridColumn = `span ${columns}`
              }

            }
            buttons.gridSpanRowButton.onclick = () => {

              const prompt = window.prompt("Gebe die Anzabl an Zeilen ein, die dein Grid Elemente einnehmen soll:")
              const rows = parseInt(prompt)

              if (rows > 0) {
                selectedNode.style.gridRow = `span ${rows}`
                selectedNode.style.height = "100%"
              }

            }
            buttons.exactGridGapButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Abstand zwischen deinen Grid Elementen ein:")

              if (prompt || prompt === "") {
                selectedNode.style.gap = prompt
              }

            }
            buttons.gridAddColumnButton.onclick = () => {

              selectedNode.style.gridTemplateColumns = `${selectedNode.style.gridTemplateColumns} 1fr`

              if (selectedNode.lastElementChild) {
                selectedNode.append(selectedNode.lastElementChild.cloneNode(true))
              }

            }
            buttons.gridRemoveColumnButton.onclick = () => {

              const templateColumns = selectedNode.style.gridTemplateColumns.split(" ")
              templateColumns.pop()
              selectedNode.style.gridTemplateColumns = templateColumns.join(" ")

              if (selectedNode.lastElementChild) {
                selectedNode.lastElementChild.remove()
              }

            }
            buttons.gridAddRowButton.onclick = () => {

              selectedNode.style.gridTemplateRows = `${selectedNode.style.gridTemplateRows} 1fr`

              if (selectedNode.lastElementChild) {
                selectedNode.append(selectedNode.lastElementChild.cloneNode(true))
              }

            }
            buttons.gridRemoveRowButton.onclick = () => {

              const templateRows = selectedNode.style.gridTemplateRows.split(" ")
              templateRows.pop()
              selectedNode.style.gridTemplateRows = templateRows.join(" ")

              if (selectedNode.lastElementChild) {
                selectedNode.lastElementChild.remove()
              }

            }
            buttons.alignColumnButton.onclick = () => {
              this.convert("parent/flex-column", selectedNode)
            }

            let originalAlignLeft
            buttons.alignLeftButton.onclick = () => {

              if (selectedNode.style.justifyContent === "flex-start") {
                if (originalAlignLeft) {
                  selectedNode.style.justifyContent = originalAlignLeft
                } else {
                  selectedNode.style.justifyContent = null
                }

              } else {
                originalAlignLeft = selectedNode.style.justifyContent

                selectedNode.style.display = "flex"
                selectedNode.style.justifyContent = "flex-start"
              }


            }

            let originalAlignCenter
            buttons.alignCenterButton.onclick = () => {

              if (selectedNode.style.justifyContent === "center") {
                if (originalAlignCenter) {
                  selectedNode.style.justifyContent = originalAlignCenter
                } else {
                  selectedNode.style.justifyContent = null
                }

              } else {
                originalAlignCenter = selectedNode.style.justifyContent

                selectedNode.style.display = "flex"
                selectedNode.style.justifyContent = "center"
              }


            }

            let originalAlignRight
            buttons.alignRightButton.onclick = () => {

              if (selectedNode.style.justifyContent === "flex-end") {
                if (originalAlignRight) {
                  selectedNode.style.justifyContent = originalAlignRight
                } else {
                  selectedNode.style.justifyContent = null
                }

              } else {
                originalAlignRight = selectedNode.style.justifyContent

                selectedNode.style.display = "flex"
                selectedNode.style.justifyContent = "flex-end"
              }

            }
            buttons.alignRowButton.onclick = () => {
              this.convert("parent/flex-row", selectedNode)
            }

            let originalAlignTop
            buttons.alignTopButton.onclick = () => {

              if (selectedNode.style.alignItems === "flex-start") {
                if (originalAlignTop) {
                  selectedNode.style.alignItems = originalAlignTop
                } else {
                  selectedNode.style.alignItems = null
                }

              } else {
                originalAlignTop = selectedNode.style.alignItems

                selectedNode.style.display = "flex"
                selectedNode.style.alignItems = "flex-start"
              }


            }

            let originalAlignVertical
            buttons.alignVerticalButton.onclick = () => {

              if (selectedNode.style.alignItems === "center") {
                if (originalAlignVertical) {
                  selectedNode.style.alignItems = originalAlignVertical
                } else {
                  selectedNode.style.alignItems = null
                }

              } else {
                originalAlignVertical = selectedNode.style.alignItems

                selectedNode.style.display = "flex"
                selectedNode.style.alignItems = "center"
              }


            }

            let originalAlignBottom
            buttons.alignBottomButton.onclick = () => {

              if (selectedNode.style.alignItems === "flex-end") {
                if (originalAlignBottom) {
                  selectedNode.style.alignItems = originalAlignBottom
                } else {
                  selectedNode.style.alignItems = null
                }

              } else {
                originalAlignBottom = selectedNode.style.alignItems

                selectedNode.style.display = "flex"
                selectedNode.style.alignItems = "flex-end"
              }


            }
            buttons.flexButton.onclick = () => {

              const prompt = window.prompt("Gebe die Flex Matrix für dein Element ein: (grow shrink basis)")
              selectedNode.style.flex = prompt

            }

            let originalSpaceBetween
            buttons.spaceBetweenButton.onclick = () => {

              if (selectedNode.style.justifyContent === "space-between") {
                if (originalSpaceBetween) {
                  selectedNode.style.justifyContent = originalSpaceBetween
                } else {
                  selectedNode.style.justifyContent = null
                }

              } else {

                originalSpaceBetween = selectedNode.style.justifyContent
                this.convert("parent/space-between", selectedNode)

              }

            }

            let originalSpaceAround
            buttons.spaceAroundButton.onclick = () => {


              if (selectedNode.style.justifyContent === "space-around") {
                if (originalSpaceAround) {
                  selectedNode.style.justifyContent = originalSpaceAround
                } else {
                  selectedNode.style.justifyContent = null
                }

              } else {
                originalSpaceAround = selectedNode.style.justifyContent
                this.convert("parent/space-around", selectedNode)
              }

            }

            let originalToggleWrap
            buttons.toggleWrapButton.onclick = () => {

              if (selectedNode.style.flexWrap === "wrap") {
                if (originalToggleWrap) {
                  selectedNode.style.flexWrap = originalToggleWrap
                } else {
                  selectedNode.style.flexWrap = null
                }

              } else {
                originalToggleWrap = selectedNode.style.flexWrap

                selectedNode.style.display = "flex"
                selectedNode.style.flexWrap = "wrap"

              }

            }
            buttons.layerButton.onclick = async () => {

              const result = await this.verifyIs("class/found", {node: selectedNode, class: "layer" })
              if (result === true) {

                this.overlay("toolbox", async layerOverlay => {
                  this.add("button/remove-overlay", layerOverlay)

                  this.render("text/title", "Wähle einen Layer aus", layerOverlay)

                  const layers = this.create("div/scrollable", layerOverlay)


                  const fatherButton = this.create("button/left-right", layers)
                  fatherButton.classList.add("father-button")

                  let fatherZIndex = 0
                  if (selectedNode.style.zIndex) fatherZIndex = selectedNode.style.zIndex
                  fatherButton.left.innerHTML = "Ebene " + fatherZIndex

                  fatherButton.style.backgroundColor = this.colors.light.error

                  const fatherSelector = await this.convert("element/selector", selectedNode)
                  fatherButton.right.innerHTML = fatherSelector

                  fatherButton.onclick = () => {
                    // add selectedNode options
                    this.remove("overlay", layerOverlay)
                  }

                  selectedNode.querySelectorAll("*").forEach(async(item, i) => {
                    if (item.classList.contains("layer")) {

                      const selector = await this.convert("element/selector", item)

                      const button = this.create("button/left-right")
                      button.left.innerHTML = "Ebene " + item.style.zIndex
                      button.right.innerHTML = selector
                      button.onclick = async () => {
                        await this.remove("element/selected-node", preview)
                        selectedNode = item
                        this.add("element/selected-node", selectedNode)
                        this.remove("overlay", layerOverlay)
                      }

                      if (item.style.zIndex >= fatherZIndex) {
                        fatherButton.before(button)
                      }

                      if (item.style.zIndex < fatherZIndex) {
                        layers.append(button)
                      }

                    }
                  })

                })

              }
              if (result === false) {
                window.alert("In diesem Element sind keine Layer enthalten.")
              }

            }
            buttons.positiveLayerButton.onclick = () => {
              selectedNode.style.position = "relative"

              const layer = document.createElement("div")
              layer.classList.add("layer")
              layer.style.position = "absolute"
              layer.style.top = "0"
              layer.style.left = "0"
              layer.style.backgroundColor = selectedNode.style.backgroundColor
              layer.style.width = `${selectedNode.offsetWidth}px`
              layer.style.height = `${selectedNode.offsetHeight}px`
              let zIndex = 0
              if (selectedNode.style.zIndex) zIndex = selectedNode.style.zIndex
              zIndex++
              layer.style.zIndex = zIndex
              selectedNode.append(layer)

              this.convert("node/sort-children-by-z-index", selectedNode)

              window.alert("Layer erfolgreich angehängt.")

            }
            buttons.negativeLayerButton.onclick = () => {

              selectedNode.style.position = "relative"

              let fatherZIndex = 0
              if (selectedNode.style.zIndex) fatherZIndex = selectedNode.style.zIndex


              const layer = document.createElement("div")
              layer.classList.add("layer")
              layer.style.position = "absolute"
              layer.style.top = "0"
              layer.style.left = "0"
              layer.style.backgroundColor = selectedNode.style.backgroundColor
              layer.style.width = `${selectedNode.offsetWidth}px`
              layer.style.height = `${selectedNode.offsetHeight}px`
              let zIndex = 0
              if (selectedNode.style.zIndex) zIndex = selectedNode.style.zIndex
              zIndex--
              layer.style.zIndex = zIndex
              selectedNode.append(layer)

              this.convert("node/sort-children-by-z-index", selectedNode)

              window.alert("Layer erfolgreich angehängt.")

            }
            buttons.exactLayerButton.onclick = async () => {
              const prompt = window.prompt("Gebe die exakte Ebene für deinen Layer ein: (integer)")

              const zIndex = parseInt(prompt) || 0

              selectedNode.style.position = "relative"

              const layer = document.createElement("div")
              layer.classList.add("layer")
              layer.style.position = "absolute"
              layer.style.top = "0"
              layer.style.left = "0"
              layer.style.backgroundColor = selectedNode.style.backgroundColor
              layer.style.width = `${selectedNode.offsetWidth}px`
              layer.style.height = `${selectedNode.offsetHeight}px`
              layer.style.zIndex = zIndex
              selectedNode.append(layer)

              this.convert("node/sort-children-by-z-index", selectedNode)

              window.alert("Layer erfolgreich angehängt.")

            }
            buttons.removeLayerButton.onclick = () => {
              selectedNode.querySelectorAll("*").forEach((item, i) => {
                if (item.classList.contains("layer")) {
                  item.remove()
                }
              })
              window.alert("Alle Layer wurden erfolgreich entfernt.")
            }

            let originalPositionAbsolute
            buttonspositionAbsoluteButton.onclick = () => {

              if (selectedNode.style.position === "absolute") {
                if (originalPositionAbsolute) {
                    selectedNode.style.position = originalPositionAbsolute
                } else {
                    selectedNode.style.position = null
                }

              } else {
                  originalPositionAbsolute = selectedNode.style.position
                  selectedNode.style.position = "absolute"
              }

            }
            buttonspositionTopButton.onclick = () => {

              if (selectedNode.classList.contains("layer")) {
                const prompt = window.prompt("Geben den exakten Abstand nach oben ein:")

                selectedNode.style.top = prompt

              }

            }
            buttonspositionRightButton.onclick = () => {

              if (selectedNode.classList.contains("layer")) {
                const prompt = window.prompt("Geben den exakten Abstand nach rechts ein:")

                selectedNode.style.right = prompt

              }

            }
            buttonspositionBottomButton.onclick = () => {

              if (selectedNode.classList.contains("layer")) {
                const prompt = window.prompt("Geben den exakten Abstand nach unten ein:")

                selectedNode.style.bottom = prompt

              }

            }
            buttonspositionLeftButton.onclick = () => {

              if (selectedNode.classList.contains("layer")) {
                const prompt = window.prompt("Geben den exakten Abstand nach links ein:")

                selectedNode.style.left = prompt

              }

            }
            buttonstransformTranslateButton.onclick = () => {
              const prompt = window.prompt("Gebe den X und Y Wert ein und bewege dein Element in die gewünschte Richtung: (21px -34px)")
              selectedNode.style.transform = `translate(${prompt})`
            }
            buttonstransformTranslateXButton.onclick = () => {
              const prompt = window.prompt("Gebe den X-Wert ein und bewege dein Element in die gewünschte Richtung: (-34px)")
              selectedNode.style.transform = `translateX(${prompt})`
            }
            buttonstransformTranslateYButton.onclick = () => {
              const prompt = window.prompt("Gebe den Y-Wert ein und bewege dein Element in die gewünschte Richtung: (34px)")
              selectedNode.style.transform = `translateY(${prompt})`
            }
            buttonszIndexButton.onclick = () => {
              const prompt = window.prompt("Gebe deinen Z-Index ein:")
              selectedNode.style.position = "relative"
              selectedNode.style.zIndex = prompt
            }
            buttonsscaleButton.onclick = () => {
              const prompt = window.prompt("Gebe die Höhe deiner Skalierung ein:")

              const scaleNumber = parseFloat(prompt)
              selectedNode.style.transform = `scale(${scaleNumber})`
            }

            let rotationDegree = 0
            buttons.rotateRightButton.onclick = () => {
              rotationDegree += 90
              if (rotationDegree === 360) rotationDegree = 0
              selectedNode.style.transform = `rotate(${rotationDegree}deg)`
            }
            buttons.exactRotateRightButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Winkel für deine Rotation, nach rechts, ein: (0-360)")
              let degree = parseInt(prompt)
              if (degree >= 0 && degree <= 360) {
                if (degree === 360) degree = 0
                selectedNode.style.transform = `rotate(${degree}deg)`
              }
            }
            buttons.rotateLeftButton.onclick = () => {
              rotationDegree -= 90
              if (rotationDegree === -360) rotationDegree = 0
              selectedNode.style.transform = `rotate(${rotationDegree}deg)`
            }
            buttons.exactRotateLeftButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Winkel für deine Rotation, nach links, ein: (0-360)")
              let degree = parseInt(prompt)
              if (degree >= 0 && degree <= 360) {
                if (degree === 360) degree = 0
                selectedNode.style.transform = `rotate(-${degree}deg)`
              }
            }

            let originalWhiteSpaceNoWrap
            buttons.whiteSpaceNoWrapButton.onclick = () => {

              if (selectedNode.style.whiteSpace === "nowrap") {
                if (originalWhiteSpaceNoWrap) {
                    selectedNode.style.whiteSpace = originalWhiteSpaceNoWrap
                } else {
                    selectedNode.style.whiteSpace = null
                }

              } else {
                  originalWhiteSpaceNoWrap = selectedNode.style.whiteSpace
                  selectedNode.style.whiteSpace = "nowrap"
              }

            }

            let originalFontFamily
            buttons.fontFamilyButton.onclick = () => {

              if (selectedNode.style.fontFamily === "sans-serif") {
                if (originalFontFamily) {
                    selectedNode.style.fontFamily = originalFontFamily
                } else {
                    selectedNode.style.fontFamily = null
                }

              } else {
                  originalFontFamily = selectedNode.style.fontFamily
                  selectedNode.style.fontFamily = "sans-serif"
              }

            }

            let originalFontWeightNormal
            buttons.fontWeightNormalButton.onclick = () => {

              if (selectedNode.style.fontWeight === "normal") {
                if (originalFontWeightNormal) {
                    selectedNode.style.fontWeight = originalFontWeightNormal
                } else {
                    selectedNode.style.fontWeight = null
                }

              } else {
                  originalFontWeightNormal = selectedNode.style.fontWeight
                  selectedNode.style.fontWeight = "normal"
              }

            }

            let originalFontWeight
            buttons.fontWeightButton.onclick = () => {

              if (selectedNode.style.fontWeight === "bold") {
                if (originalFontWeight) {
                    selectedNode.style.fontWeight = originalFontWeight
                } else {
                    selectedNode.style.fontWeight = null
                }

              } else {
                  originalFontWeight = selectedNode.style.fontWeight
                  selectedNode.style.fontWeight = "bold"
              }

            }

            let originalFontStyle
            buttons.fontStyleButton.onclick = () => {

              if (selectedNode.style.fontStyle === "italic") {
                if (originalFontStyle) {
                    selectedNode.style.fontStyle = originalFontStyle
                } else {
                    selectedNode.style.fontStyle = null
                }

              } else {
                  originalFontStyle = selectedNode.style.fontStyle
                  selectedNode.style.fontStyle = "italic"
              }

            }

            let originalTextDecoration
            buttons.textDecorationButton.onclick = () => {

              if (selectedNode.style.textDecoration === "underline") {
                if (originalTextDecoration) {
                    selectedNode.style.textDecoration = originalTextDecoration
                } else {
                    selectedNode.style.textDecoration = null
                }

              } else {
                  originalTextDecoration = selectedNode.style.textDecoration
                  selectedNode.style.textDecoration = "underline"
              }

            }
            buttons.fontSizeButton.onclick = () => {
              const prompt = window.prompt("Gebe deine Schriftgröße ein:")
              selectedNode.style.fontSize = prompt
            }
            buttons.fontColorButton.onclick = () => {
              const prompt = window.prompt("Gebe deine Schriftfarbe ein: (text, hex, rgb, rgba)")
              selectedNode.style.color = prompt
            }
            buttons.backgroundColorButton.onclick = () => {
              const prompt = window.prompt("Gebe deinen Hintergrund Farbcode ein: (text, hex, rgb, rgba)")
              selectedNode.style.backgroundColor = prompt
            }

            let originalUnorderedListInner
            buttons.unorderedListButton.onclick = () => {

              const ul = document.createElement("ul")
              const li = document.createElement("li")
              ul.append(li)

              if (selectedNode.firstChild.tagName === "UL") {
                li.innerHTML = originalUnorderedListInner
                selectedNode.firstChild.append(li)
              } else {
                originalUnorderedListInner = selectedNode.innerHTML
                li.innerHTML = originalUnorderedListInner
                selectedNode.innerHTML = ""
                selectedNode.append(ul)
              }

            }

            let originalOrderedListInner
            buttons.orderedListButton.onclick = () => {

              const ol = document.createElement("ol")
              const li = document.createElement("li")
              ol.append(li)

              if (selectedNode.firstChild.tagName === "OL") {
                li.innerHTML = originalOrderedListInner
                selectedNode.firstChild.append(li)
              } else {
                originalOrderedListInner = selectedNode.innerHTML
                li.innerHTML = originalOrderedListInner
                selectedNode.innerHTML = ""
                selectedNode.append(ol)
              }


            }

            let originalLineHeight
            buttons.lineHeightButton.onclick = () => {
              const prompt = window.prompt("Gebe die exakte Linien Höhe ein:")
              selectedNode.style.lineHeight = prompt
            }

            let originalOverflowY
            buttons.overflowYButton.onclick = () => {

              if (selectedNode.style.overflowY === "auto") {
                if (originalOverflowY) {
                    selectedNode.style.overflowY = originalOverflowY
                } else {
                    selectedNode.style.overflowY = null
                }

              } else {
                  originalOverflowY = selectedNode.style.overflowY
                  selectedNode.style.overflowY = "auto"
              }

            }

            let originalOverflowX
            buttons.overflowXButton.onclick = () => {

              if (selectedNode.style.overflowX === "auto") {
                if (originalOverflowX) {
                    selectedNode.style.overflowX = originalOverflowX
                } else {
                    selectedNode.style.overflowX = null
                }

              } else {
                  originalOverflowX = selectedNode.style.overflowX
                  selectedNode.style.overflowX = "auto"
              }

            }

            let originalDisplayNone
            buttons.toggleDisplayNoneButton.onclick = () => {

              if (selectedNode.style.display === "none") {
                if (originalDisplayNone) {
                  selectedNode.style.display = originalDisplayNone
                } else {
                  selectedNode.style.display = null
                }

              } else {

                originalDisplayNone = selectedNode.style.display
                selectedNode.style.display = "none"

              }

            }

            let originalVisibilityHidden
            buttons.toggleVisibilityHiddenButton.onclick = () => {

              if (selectedNode.style.visibility === "hidden") {
                if (originalVisibilityHidden) {
                  selectedNode.style.visibility = originalVisibilityHidden
                } else {
                  selectedNode.style.visibility = null
                }

              } else {

                originalVisibilityHidden = selectedNode.style.visibility
                selectedNode.style.visibility = "hidden"

              }

            }
            buttons.exactOpacityButton.onclick = () => {

              const prompt = window.prompt("Geben die Sichtbarkeit in Prozent ein: (0-100)")

              const opacity = parseInt(prompt)

              if (opacity >= 0 && opacity <= 100) {
                selectedNode.style.opacity = `${prompt / 100}`
              }

            }

            let originalMargin
            buttons.toggleMarginButton.onclick = () => {

              if (selectedNode.style.margin === "21px 34px") {
                if (originalMargin) {
                    selectedNode.style.margin = originalMargin
                } else {
                    selectedNode.style.margin = "0"
                }

              } else {
                  originalMargin = selectedNode.style.margin
                  selectedNode.style.margin = "21px 34px"
              }

            }

            let originalMarginTop
            buttons.toggleMarginTopButton.onclick = () => {

              if (selectedNode.style.marginTop === "21px") {
                if (originalMarginTop) {
                    selectedNode.style.marginTop = originalMarginTop
                } else {
                    selectedNode.style.marginTop = "0"
                }

              } else {
                  originalMarginTop = selectedNode.style.marginTop
                  selectedNode.style.marginTop = "21px"
              }

            }

            let originalMarginRight
            buttons.toggleMarginRightButton.onclick = () => {

              if (selectedNode.style.marginRight === "34px") {
                if (originalMarginRight) {
                    selectedNode.style.marginRight = originalMarginRight
                } else {
                    selectedNode.style.marginRight = "0"
                }

              } else {
                  originalMarginRight = selectedNode.style.marginRight
                  selectedNode.style.marginRight = "34px"
              }

            }

            let originalMarginBottom
            buttons.toggleMarginBottomButton.onclick = () => {

              if (selectedNode.style.marginBottom === "21px") {
                if (originalMarginBottom) {
                    selectedNode.style.marginBottom = originalMarginBottom
                } else {
                    selectedNode.style.marginBottom = "0"
                }

              } else {
                  originalMarginBottom = selectedNode.style.marginBottom
                  selectedNode.style.marginBottom = "21px"
              }

            }

            let originalMarginLeft
            buttons.toggleMarginLeftButton.onclick = () => {

              if (selectedNode.style.marginLeft === "34px") {
                if (originalMarginLeft) {
                    selectedNode.style.marginLeft = originalMarginLeft
                } else {
                    selectedNode.style.marginLeft = "0"
                }

              } else {
                  originalMarginLeft = selectedNode.style.marginLeft
                  selectedNode.style.marginLeft = "34px"
              }

            }
            buttons.exactMarginButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Außenabstand ein: (oben rechts unten links) oder (oben-unten rechts-links) oder (oben-unten-rechts-links)")
              selectedNode.style.margin = prompt
            }
            buttons.exactMarginTopButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Außenabstand nach oben ein:")
              selectedNode.style.marginTop = prompt
            }
            buttons.exactMarginRightButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Außenabstand nach rechts ein:")
              selectedNode.style.marginRight = prompt
            }
            buttons.exactMarginBottomButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Außenabstand nach unten ein:")
              selectedNode.style.marginBottom = prompt
            }
            buttons.exactMarginLeftButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Außenabstand nach links ein:")
              selectedNode.style.marginLeft = prompt
            }

            let originalPadding
            buttons.togglePaddingButton.onclick = () => {
              if (selectedNode.style.padding === "21px 34px") {
                if (originalPadding) {
                    selectedNode.style.padding = originalPadding
                } else {
                    selectedNode.style.padding = "0"
                }

              } else {
                  originalPadding = selectedNode.style.padding
                  selectedNode.style.padding = "21px 34px"
              }

            }

            let originalPaddingTop
            buttons.togglePaddingTopButton.onclick = () => {

              if (selectedNode.style.paddingTop === "21px") {
                if (originalPaddingTop) {
                    selectedNode.style.paddingTop = originalPaddingTop
                } else {
                    selectedNode.style.paddingTop = "0"
                }

              } else {
                  originalPaddingTop = selectedNode.style.paddingTop
                  selectedNode.style.paddingTop = "21px"
              }

            }

            let originalPaddingRight
            buttons.togglePaddingRightButton.onclick = () => {
              if (selectedNode.style.paddingRight === "34px") {
                if (originalPaddingRight) {
                    selectedNode.style.paddingRight = originalPaddingRight
                } else {
                    selectedNode.style.paddingRight = "0"
                }

              } else {
                  originalPaddingRight = selectedNode.style.paddingRight
                  selectedNode.style.paddingRight = "34px"
              }

            }

            let originalPaddingBottom
            buttons.togglePaddingBottomButton.onclick = () => {

              if (selectedNode.style.paddingBottom === "21px") {
                if (originalPaddingBottom) {
                    selectedNode.style.paddingBottom = originalPaddingBottom
                } else {
                    selectedNode.style.paddingBottom = "0"
                }

              } else {
                  originalPaddingBottom = selectedNode.style.paddingBottom
                  selectedNode.style.paddingBottom = "21px"
              }


            }

            let originalPaddingLeft
            buttons.togglePaddingLeftButton.onclick = () => {

              if (selectedNode.style.paddingLeft === "34px") {
                if (originalPaddingLeft) {
                    selectedNode.style.paddingLeft = originalPaddingLeft
                } else {
                    selectedNode.style.paddingLeft = "0"
                }

              } else {
                  originalPaddingLeft = selectedNode.style.paddingLeft
                  selectedNode.style.paddingLeft = "34px"
              }

            }
            buttons.exactPaddingButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Innenabstand ein: (oben rechts unten links) oder (oben-unten rechts-links) oder (oben-unten-rechts-links)")
              selectedNode.style.padding = prompt
            }
            buttons.exactPaddingTopButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Innenabstand nach oben ein:")
              selectedNode.style.paddingTop = prompt
            }
            buttons.exactPaddingRightButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Innenabstand nach rechts ein:")
              selectedNode.style.paddingRight = prompt
            }
            buttons.exactPaddingBottomButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Innenabstand nach unten ein:")
              selectedNode.style.paddingBottom = prompt
            }
            buttons.exactPaddingLeftButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Innenabstand nach links ein:")
              selectedNode.style.paddingLeft = prompt
            }


            let originalBorder
            buttons.toggleBorderButton.onclick = () => {
              if (selectedNode.style.border === "1px solid black") {
                if (originalBorder) {
                    selectedNode.style.border = originalBorder
                } else {
                    selectedNode.style.border = null
                }

              } else {
                  originalBorder = selectedNode.style.border
                  selectedNode.style.border = "1px solid black"
              }

            }

            let originalBorderTop
            buttons.toggleBorderTopButton.onclick = () => {

              if (selectedNode.style.borderTop === "1px solid black") {
                if (originalBorderTop) {
                    selectedNode.style.borderTop = originalBorderTop
                } else {
                    selectedNode.style.borderTop = null
                }

              } else {
                  originalBorderTop = selectedNode.style.borderTop
                  selectedNode.style.borderTop = "1px solid black"
              }

            }

            let originalBorderRight
            buttons.toggleBorderRightButton.onclick = () => {
              if (selectedNode.style.borderRight === "1px solid black") {
                if (originalBorderRight) {
                    selectedNode.style.borderRight = originalBorderRight
                } else {
                    selectedNode.style.borderRight = null
                }

              } else {
                  originalBorderRight = selectedNode.style.borderRight
                  selectedNode.style.borderRight = "1px solid black"
              }

            }

            let originalBorderBottom
            buttons.toggleBorderBottomButton.onclick = () => {

              if (selectedNode.style.borderBottom === "1px solid black") {
                if (originalBorderBottom) {
                    selectedNode.style.borderBottom = originalBorderBottom
                } else {
                    selectedNode.style.borderBottom = null
                }

              } else {
                  originalBorderBottom = selectedNode.style.borderBottom
                  selectedNode.style.borderBottom = "1px solid black"
              }


            }

            let originalBorderLeft
            buttons.toggleBorderLeftButton.onclick = () => {

              if (selectedNode.style.borderLeft === "1px solid black") {
                if (originalBorderLeft) {
                    selectedNode.style.borderLeft = originalBorderLeft
                } else {
                    selectedNode.style.borderLeft = null
                }

              } else {
                  originalBorderLeft = selectedNode.style.borderLeft
                  selectedNode.style.borderLeft = "1px solid black"
              }

            }
            buttons.exactBorderButton.onclick = () => {
              const prompt = window.prompt("Gebe die exakten Grenzlinien ein: (width style color)")
              selectedNode.style.border = prompt
            }
            buttons.exactBorderTopButton.onclick = () => {
              const prompt = window.prompt("Gebe die exakten Grenzlinien nach oben ein: (width style color)")
              selectedNode.style.borderTop = prompt
            }
            buttons.exactBorderRightButton.onclick = () => {
              const prompt = window.prompt("Gebe die exakten Grenzlinien nach rechts ein: (width style color)")
              selectedNode.style.borderRight = prompt
            }
            buttons.exactBorderBottomButton.onclick = () => {
              const prompt = window.prompt("Gebe die exakten Grenzlinien nach unten ein: (width style color)")
              selectedNode.style.borderBottom = prompt
            }
            buttons.exactBorderLeftButton.onclick = () => {
              const prompt = window.prompt("Gebe die exakten Grenzlinien nach links ein: (width style color)")
              selectedNode.style.borderLeft = prompt
            }

            let originalBorderRadius
            buttons.toggleBorderRadiusButton.onclick = () => {
              if (selectedNode.style.borderRadius === "3px") {
                if (originalBorderRadius) {
                    selectedNode.style.borderRadius = originalBorderRadius
                } else {
                    selectedNode.style.borderRadius = null
                }

              } else {
                  originalBorderRadius = selectedNode.style.borderRadius
                  selectedNode.style.borderRadius = "3px"
              }

            }

            let originalBorderTopLeftRadius
            buttons.toggleBorderTopLeftRadiusButton.onclick = () => {

              if (selectedNode.style.borderTopLeftRadius === "3px") {
                if (originalBorderTopLeftRadius) {
                    selectedNode.style.borderTopLeftRadius = originalBorderTopLeftRadius
                } else {
                    selectedNode.style.borderTopLeftRadius = null
                }

              } else {
                  originalBorderTopLeftRadius = selectedNode.style.borderTopLeftRadius
                  selectedNode.style.borderTopLeftRadius = "3px"
              }

            }

            let originalBorderTopRightRadius
            buttons.toggleBorderTopRightRadiusButton.onclick = () => {
              if (selectedNode.style.borderTopRightRadius === "3px") {
                if (originalBorderTopRightRadius) {
                    selectedNode.style.borderTopRightRadius = originalBorderTopRightRadius
                } else {
                    selectedNode.style.borderTopRightRadius = null
                }

              } else {
                  originalBorderTopRightRadius = selectedNode.style.borderTopRightRadius
                  selectedNode.style.borderTopRightRadius = "3px"
              }

            }

            let originalBorderBottomRightRadius
            buttons.toggleBorderBottomRightRadiusButton.onclick = () => {

              if (selectedNode.style.borderBottomRightRadius === "3px") {
                if (originalBorderBottomRightRadius) {
                    selectedNode.style.borderBottomRightRadius = originalBorderBottomRightRadius
                } else {
                    selectedNode.style.borderBottomRightRadius = null
                }

              } else {
                  originalBorderBottomRightRadius = selectedNode.style.borderBottomRightRadius
                  selectedNode.style.borderBottomRightRadius = "3px"
              }


            }

            let originalBorderBottomLeftRadius
            buttons.toggleBorderBottomLeftRadiusButton.onclick = () => {

              if (selectedNode.style.borderBottomLeftRadius === "3px") {
                if (originalBorderBottomLeftRadius) {
                    selectedNode.style.borderBottomLeftRadius = originalBorderBottomLeftRadius
                } else {
                    selectedNode.style.borderBottomLeftRadius = null
                }

              } else {
                  originalBorderBottomLeftRadius = selectedNode.style.borderBottomLeftRadius
                  selectedNode.style.borderBottomLeftRadius = "3px"
              }

            }
            buttons.exactBorderRadiusButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Radius, für alle Ecken, ein:")
              selectedNode.style.borderRadius = prompt
            }
            buttons.exactBorderTopLeftRadiusButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Radius, für die Ecken Oben-Links, ein:")
              selectedNode.style.borderTopLeftRadius = prompt
            }
            buttons.exactBorderTopRightRadiusButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Radius, für die Ecken Oben-Rechts, ein:")
              selectedNode.style.borderTopRightRadius = prompt
            }
            buttons.exactBorderBottomRightRadiusButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Radius, für die Ecken Unten-Rechts, ein:")
              selectedNode.style.borderBottomRightRadius = prompt
            }
            buttons.exactBorderBottomLeftRadiusButton.onclick = () => {
              const prompt = window.prompt("Gebe den exakten Radius, für die Ecken Unten-Links, ein:")
              selectedNode.style.borderBottomLeftRadius = prompt
            }

            let originalBorderNone
            buttons.toggleBorderNoneButton.onclick = () => {
              console.log(originalBorderNone);
              if (selectedNode.style.border === "none") {
                if (originalBorderNone) {
                    selectedNode.style.border = originalBorderNone
                } else {
                    selectedNode.style.border = null
                }

              } else {
                  originalBorderNone = selectedNode.style.border
                  selectedNode.style.border = "none"
              }

            }

            let originalBoxStyle
            buttons.boxButton.onclick = () => {

              if (selectedNode.style.boxShadow === "rgba(0, 0, 0, 0.13) 0px 1px 3px") {
                if (originalBoxStyle) {
                    selectedNode.setAttribute("style", originalBoxStyle)
                } else {
                    selectedNode.removeAttribute("style")
                }

              } else {
                  originalBoxStyle = selectedNode.getAttribute("style")
                  selectedNode.style.margin = "21px 34px"
                  selectedNode.style.padding = "8px"
                  selectedNode.style.borderRadius = "3px"
                  selectedNode.style.boxShadow = "rgba(0, 0, 0, 0.13) 0px 1px 3px"
              }

            }
            buttons.exactBoxShadowButton.onclick = () => {
              const prompt = window.prompt("Geben den exakten Schatten ein:")
              selectedNode.style.boxShadow = prompt
            }
            buttons.mediaQueriesOverviewButton.onclick = async () => {

              this.overlay("toolbox", queriesOverlay => {
                this.add("button/remove-overlay", queriesOverlay)

                const content = this.create("div/scrollable", queriesOverlay)


                document.head.querySelectorAll("style").forEach((style, i) => {

                  if (style.id === "large-device") this.render("text/hr", "Für Bildschirme breiter als 1025 Pixel", content)
                  if (style.id === "middle-device") this.render("text/hr", "Für Bildschirme zwischen 601 und 1024 Pixel", content)
                  if (style.id === "small-device") this.render("text/hr", "Für Bildschirme kleiner als 600 Pixel", content)
                  if (style.id === "printer-device") this.render("text/hr", "Für Drucker", content)

                  const queries = style.textContent.split("@")
                  for (var i = 0; i < queries.length; i++) {
                    const query = queries[i]

                    if (query.trim() === "") continue

                    const queryButton = this.create("button/left-right", content)
                    queryButton.left.innerHTML = this.convert("query/selector", query)
                    queryButton.right.innerHTML = `Media Query ${i}`

                    queryButton.onclick = () => {
                      this.overlay("toolbox", queryOverlay => {
                        this.add("button/remove-overlay", queryOverlay)

                        const buttons = this.create("div/scrollable", queryOverlay)

                        const currentSelector = this.convert("query/selector", query)
                        const cssSplit = this.convert("query/css", query).split(" ")
                        const currentCss = cssSplit[0] + " " + cssSplit[1]

                        const info = this.create("header/info", queryOverlay)
                        info.innerHTML = currentSelector

                        {
                          const button = this.create("button/left-right", buttons)
                          button.left.innerHTML = ".selector"
                          button.right.innerHTML = "Ziel Element ändern"
                          button.onclick = () => {
                            this.overlay("toolbox", selectorOverlay => {
                              this.add("button/remove-overlay", selectorOverlay)

                              const info = this.create("header/info", selectorOverlay)
                              info.innerHTML = `${currentSelector}.selector`

                              const funnel = this.create("div/scrollable", selectorOverlay)

                              const selectorField = this.create("field/textarea", funnel)
                              selectorField.label.innerHTML = "CSS Selektor"
                              selectorField.input.style.fontSize = "13px"
                              selectorField.input.value = currentSelector
                              this.verify("input/value", selectorField.input)

                              const submit = this.create("button/action", funnel)
                              submit.innerHTML = "Selektor jetzt speichern"
                              submit.onclick = () => {

                                try {

                                  const newSelector = selectorField.input.value
                                  style.textContent = style.textContent.replace(currentSelector, newSelector)
                                  window.alert("Selektor erfolgreich gespeichert.")

                                  this.remove("overlay", queriesOverlay)
                                  this.remove("overlay", queryOverlay)
                                  this.remove("overlay", selectorOverlay)

                                } catch (error) {
                                  console.error(error)
                                  window.alert("Fehler.. Bitte wiederholen.")
                                }

                              }



                            })
                          }
                        }

                        {
                          const button = this.create("button/left-right", buttons)
                          button.left.innerHTML = ".css"
                          button.right.innerHTML = "Style anpassen"
                          button.onclick = () => {
                            this.overlay("toolbox", cssOverlay => {
                              this.add("button/remove-overlay", cssOverlay)

                              const info = this.create("header/info", cssOverlay)
                              info.innerHTML = `${currentSelector}.css`

                              const funnel = this.create("div/scrollable", cssOverlay)

                              const cssField = this.create("field/textarea", funnel)
                              cssField.label.innerHTML = "CSS Regel"
                              cssField.input.style.fontSize = "13px"
                              cssField.input.value = currentCss
                              this.verify("input/value", cssField.input)

                              const submit = this.create("button/action", funnel)
                              submit.innerHTML = "CSS jetzt speichern"
                              submit.onclick = () => {

                                try {

                                  const newCss = cssField.input.value
                                  style.textContent = style.textContent.replace(currentCss, newCss)
                                  window.alert("CSS erfolgreich gespeichert.")

                                  this.remove("overlay", queriesOverlay)
                                  this.remove("overlay", queryOverlay)
                                  this.remove("overlay", cssOverlay)

                                } catch (error) {
                                  console.error(error)
                                  window.alert("Fehler.. Bitte wiederholen.")
                                }

                              }



                            })
                          }
                        }

                        {
                          const button = this.create("button/left-right", buttons)
                          button.left.innerHTML = ".remove"
                          button.right.innerHTML = "Media Query entfernen"
                          button.onclick = () => {
                            try {
                              style.textContent = style.textContent.replace(`@${query}`, "")
                              this.remove("overlay", queriesOverlay)
                              this.remove("overlay", queryOverlay)
                              window.alert("Media Query erfolgreich entfernt.")
                            } catch (error) {
                              console.error(error)
                              window.alert("Fehler.. Bitte wiederholen.")
                            }
                          }
                        }

                      })

                    }

                  }

                })

              })



            }
            buttons.largeDeviceButton.onclick = async () => {

              const query = "(min-width: 1025px)"

              const prompt = window.prompt("Gebe die CSS Eigenschaft, nur für Bildschirme größer als 1025px, ein:")

              if (prompt) {

                let largeStyle = document.querySelector("style[id='large-device']")

                if (largeStyle === null) {
                  const style = document.createElement("style")
                  style.type = "text/css"
                  style.id = "large-device"
                  document.head.appendChild(style)
                }

                largeStyle = document.querySelector("style[id='large-device']")

                const selector = await this.convert("element/selector", selectedNode)

                largeStyle.append(`\n@media only screen and ${query} {${selector}{${prompt} !important;}}`)

              }


            }
            buttons.middleDeviceButton.onclick = async () => {

              const query = "(min-width: 601px) and (max-width: 1024px)"

              const prompt = window.prompt("Gebe die CSS Eigenschaft, nur für Bildschirme zwischen 601px und 1024px, ein:")

              if (prompt) {

                let middleStyle = document.querySelector("style[id='middle-device']")

                if (middleStyle === null) {
                  const style = document.createElement("style")
                  style.type = "text/css"
                  style.id = "middle-device"
                  document.head.appendChild(style)
                }

                middleStyle = document.querySelector("style[id='middle-device']")

                const selector = await this.convert("element/selector", selectedNode)

                middleStyle.append(`\n@media only screen and ${query} {${selector}{${prompt} !important;}}`)

              }

            }
            buttons.smallDeviceButton.onclick = async () => {

              const query = "(max-width: 600px)"

              const prompt = window.prompt("Gebe die CSS Eigenschaft, nur für Bildschirme kleiner als 600px, ein:")

              if (prompt) {

                let smallStyle = document.querySelector("style[id='small-device']")

                if (smallStyle === null) {
                  const style = document.createElement("style")
                  style.type = "text/css"
                  style.id = "small-device"
                  document.head.appendChild(style)
                }

                smallStyle = document.querySelector("style[id='small-device']")

                const selector = await this.convert("element/selector", selectedNode)

                smallStyle.append(`\n@media only screen and ${query} {${selector}{${prompt} !important;}}`)

              }


            }
            buttons.printerDeviceButton.onclick = async () => {

              const prompt = window.prompt("Gebe die CSS Eigenschaft, nur für Drucker, ein:")

              if (prompt) {

                let printerStyle = document.querySelector("style[id='printer-device']")

                if (printerStyle === null) {
                  const style = document.createElement("style")
                  style.type = "text/css"
                  style.id = "printer-device"
                  document.head.appendChild(style)
                }

                printerStyle = document.querySelector("style[id='printer-device']")

                const selector = await this.convert("element/selector", selectedNode)

                printerStyle.append(`\n@media print {${selector}{${prompt} !important;}}`)

              }


            }
            buttons.insertAfterButton.onclick = () => {

              if (selectedNode) {
                if (rememberCuttedNodes.length > 0) {

                  const { node } = rememberCuttedNodes.pop()
                  selectedNode.after(node)

                } else {

                  this.convert("clipboard/text").then(text => {
                    const node = this.convert("text/node", text)
                    selectedNode.after(node)
                  })

                }
              }

            }
            buttons.insertBeforeButton.onclick = () => {

              if (selectedNode) {
                if (rememberCuttedNodes.length > 0) {
                  const { node } = rememberCuttedNodes.pop()
                  selectedNode.before(node)
                } else {

                  this.convert("clipboard/text").then(text => {
                    const node = this.convert("text/node", text)
                    selectedNode.before(node)
                  })

                }
              }

            }
            buttons.insertLeftButton.onclick = () => {

              if (selectedNode) {

                if (rememberCuttedNodes.length > 0) {

                  const { node, parent, index } = rememberCuttedNodes.pop()

                  if (selectedNode.firstChild) {
                    selectedNode.insertBefore(node, selectedNode.firstChild)
                  } else {
                    selectedNode.appendChild(node)
                  }

                } else {

                  this.convert("clipboard/text").then(text => {
                    const node = this.convert("text/node", text)

                    if (selectedNode.firstChild) {
                      selectedNode.insertBefore(node, selectedNode.firstChild)
                    } else {
                      selectedNode.appendChild(node)
                    }

                  })

                }
              }

            }
            buttons.insertRightButton.onclick = () => {

              if (selectedNode) {

                if (rememberCuttedNodes.length > 0) {

                  const { node, parent, index } = rememberCuttedNodes.pop()
                  selectedNode.appendChild(node)

                } else {

                  this.convert("clipboard/text").then(text => {
                    const node = this.convert("text/node", text)
                    selectedNode.appendChild(node)
                  })

                }
              }

            }

            let rememberCuttedNodes = []
            buttons.cutOuterHtmlButton.onclick = () => {
              if (selectedNode) {
                rememberCuttedNodes.push({ node: selectedNode, parent: selectedNode.parentElement, index: this.convert("node/index", selectedNode)})
                selectedNode.remove()
              }
            }
            buttons.copyOuterHtmlButton.onclick = () => {

              this.convert("text/clipboard", selectedNode.outerHTML).then(() => {
                window.alert("Element wurde erfolgreich in die Zwischenablage gespeichert.")
              })

            }
            buttons.pasteOuterHtmlButton.onclick = () => {

              this.convert("clipboard/text").then(text => {
                const node = this.convert("text/node", text)
                selectedNode.append(node)
              })

            }
            buttons.copyStyleButton.onclick = () => {

              if (selectedNode.hasAttribute("style")) {
                this.convert("text/clipboard", selectedNode.getAttribute("style")).then(() => {
                  window.alert("Style wurde erfolgreich in die Zwischenablage gespeichert.")
                })
              }

            }
            buttons.pasteStyleButton.onclick = () => {

              this.convert("clipboard/text").then(text => {
                selectedNode.setAttribute("style", text)
              })

            }

            let originalRemoveStyle
            buttons.removeStyleButton.onclick = () => {

              if (!selectedNode.hasAttribute("style")) {
                if (originalRemoveStyle) {
                  selectedNode.setAttribute("style", originalRemoveStyle)
                } else {
                  selectedNode.removeAttribute("style")
                }
              } else {
                  originalRemoveStyle = selectedNode.getAttribute("style")
                  selectedNode.removeAttribute("style")
              }

            }

            let originalRemoveInner
            buttons.removeInnerButton.onclick = () => {

              if (this.verifyIs("text/empty", selectedNode.innerHTML)) {
                if (originalRemoveInner) {
                  selectedNode.innerHTML = originalRemoveInner
                } else {
                  selectedNode.innerHTML = ""
                }
              } else {
                  originalRemoveInner = selectedNode.innerHTML
                  selectedNode.innerHTML = ""
              }

            }

            let originalRemoveInnerWithText
            buttons.removeInnerWithTextButton.onclick = () => {
              const prompt = window.prompt("Ersetze den Inhalt deines Elements mit folgendem Text:")
              selectedNode.innerHTML = prompt
            }

            let originalRemoveNode
            let originalParentNode
            let originalIndex
            buttons.removeNodeButton.onclick = () => {

              if (originalRemoveNode) {

                if (originalParentNode) {
                  originalParentNode.insertBefore(originalRemoveNode, originalParentNode.childNodes[originalIndex])
                }

                selectedNode = originalRemoveNode
                originalRemoveNode = undefined
                originalParentNode = undefined
                originalIndex = undefined

              } else {
                originalParentNode = selectedNode.parentElement
                originalIndex = Array.from(originalParentNode.childNodes).indexOf(selectedNode)
                originalRemoveNode = selectedNode.cloneNode(true)
                selectedNode.remove()
              }

            }
            buttons.idButton.onclick = () => {
              const prompt = window.prompt("Gebe deinem Element einen eindeutigen Namen:")

              const found = document.getElementById(prompt)

              if (found === null) {
                selectedNode.setAttribute("id", prompt)
              } else {
                window.alert("Diese Id existiert bereits.")
              }

            }
            buttons.addClassButton.onclick = () => {
              const prompt = window.prompt("Füge deinem Element einen Klassen Namen hinzu:")
              try {
                selectedNode.classList.add(prompt)
              } catch (error) {
                window.alert("Dieser Name ist ungültig.")
              }
            }
            buttons.setAttributeButton.onclick = () => {
              const prompt = window.prompt("Markiere dein Element mit einem Attribut: (attribute=value)")

              try {
                const promptSplit = prompt.split("=")
                if (promptSplit.length === 2) {
                  selectedNode.setAttribute(promptSplit[0], promptSplit[1])
                }
              } catch (error) {
                window.alert("Du musst ein 'Gleichheitszeichen =' nutzen, um dein Attribut vom Wert zu trennen.")
              }

            }
            buttons.addScriptButton.onclick = () => {
              this.overlay("popup", async overlay => {
                overlay.info.innerHTML = `.scripts`

                const create = this.create("button/left-right", overlay)
                create.left.innerHTML = ".create"
                create.right.innerHTML = "Neues Skript hochladen"
                create.addEventListener("click", () => {

                  this.overlay("toolbox", overlay => {
                    this.add("button/remove-overlay", overlay)
                    const info = this.create("header/info", overlay)
                    info.append(this.convert("text/span", ".script"))

                    const funnel = this.create("div/scrollable", overlay)

                    const nameField = this.create("field/tag", funnel)
                    nameField.label.innerHTML = "Skript Identifikation (text/tag)"
                    nameField.input.placeholder = "mein-skript"
                    this.verify("input/value", nameField.input)
                    nameField.input.addEventListener("input", () => this.verify("input/value", nameField.input))

                    const scriptField = this.create("field/script", funnel)
                    scriptField.input.style.height = "100vh"
                    this.verify("input/value", scriptField.input)
                    scriptField.input.addEventListener("input", () => this.verify("input/value", scriptField.input))

                    const button = this.create("button/action", funnel)
                    button.innerHTML = "Skript jetzt speichern"
                    button.addEventListener("click", async () => {

                      await this.verify("field-funnel", funnel)

                      const map = {}
                      map.script = scriptField.input.value
                      map.name = nameField.input.value

                      this.overlay("security", async securityOverlay => {

                        const res = await this.register("script/closed", map)

                        if (res.status === 200) {

                          this.convert("parent/loading", content)
                          await this.add("scripts/update-buttons", content)

                          this.remove("overlay", securityOverlay)
                          this.remove("overlay", overlay)

                        }

                        if (res.status !== 200) {
                          window.alert("Fehler.. Bitte wiederholen.")
                          this.remove("overlay", securityOverlay)
                        }

                      })

                    })

                  })

                })

                this.render("text/hr", "Meine Skripte", overlay)

                const content = this.create("info/loading", overlay)

                await this.add("scripts/update-buttons", content)


              })
            }
            buttons.appendStyleButton.onclick = () => {

              const prompt = window.prompt("Füge deinem Element einen individuellen CSS Befehl hinzu: (property:value;)")

              if (prompt) {

                if (selectedNode.hasAttribute("style")) {
                  const result = selectedNode.getAttribute("style") + prompt
                  selectedNode.setAttribute("style", result)
                } else {
                  selectedNode.setAttribute("style", prompt)
                }

              }


            }
            buttons.templatesButton.onclick = () => {
              this.overlay("popup", async overlay => {

                const searchField = this.create("field/text", overlay)
                searchField.label.innerHTML = "Suche nach Text in deinem Template"
                searchField.input.placeholder = "Mein Button"
                searchField.style.margin = "21px 34px"
                this.verify("input/value", searchField.input)
                this.add("outline-hover/node", searchField.input)

                if (selectedNode) {
                  const registerTemplateButton = this.create("button/app", overlay)
                  this.render("icon/node/path", "/public/add.svg", registerTemplateButton)
                  registerTemplateButton.onclick = async () => {

                    if (selectedNode.hasAttribute("contenteditable")) {
                      selectedNode.removeAttribute("contenteditable")
                    }
                    if (selectedNode.hasAttribute("id")) {
                      selectedNode.removeAttribute("id")
                    }
                    await this.remove("element/selected-node", selectedNode)

                    const confirm = window.confirm("Möchtest du das ausgewählte Element als Template speichern?")
                    if (confirm === true) {
                      this.overlay("security", async securityOverlay => {
                        const res = await this.register("html/templates/self", selectedNode.outerHTML)
                        if (res.status === 200) {
                          window.alert("Template erfolgreich gespeichert.")
                          securityOverlay.remove()
                          overlay.remove()
                        } else {
                          window.alert("Fehler.. Bitte wiederholen.")
                          securityOverlay.remove()
                        }
                      })
                    }

                  }
                }

                const content = this.create("info/loading", overlay)

                const res = await this.get("templates/getyour/self")
                if (res.status === 200) {
                  const templates = JSON.parse(res.response)

                  let filtered
                  searchField.input.oninput = (ev) => {
                    filtered = templates.filter(it => it.html.toLowerCase().includes(ev.target.value.toLowerCase()))
                    const highlighted = filtered.map(it => {
                      const highlightedHtml = it.html.replace(new RegExp(ev.target.value, 'i'), `<mark>${ev.target.value}</mark>`)
                      return { ...it, html: highlightedHtml }
                    })
                    this.render("templates/node/selected-node", {templates: highlighted, selectedNode}, content)
                  }

                  this.render("templates/node/selected-node", {templates, selectedNode}, content)
                }

                if (res.status !== 200) {
                  this.convert("parent/info", content)
                  content.innerHTML = "Keine Templates gefunden"
                }

              })
            }
            buttons.fontSizeForEachChildButton.onclick = () => {

              const prompt = window.prompt("Gebe die Schriftgröße für jede Kind Element ein:")
              for (var i = 0; i < selectedNode.children.length; i++) {
                const child = selectedNode.children[i]
                child.style.fontSize = prompt
              }

            }

            const res = await this.get("list/svg/open")
            if (res.status === 200) {
              const list = JSON.parse(res.response)
              for (let i = 0; i < list.length; i++) {
                const svgName = list[i]
                const button = this.create("button/icon", buttons.svgPickerOptions)
                button.setAttribute("svg-name", svgName)
                const icon = await this.convert("text/icon", svgName)
                button.append(icon)
                button.onclick = async () => {
                  const iconClone = icon.cloneNode(true)
                  iconClone.style.width = "34px"
                  selectedNode.append(iconClone)
                }
              }
            }



          })
        }
      }


    }

    if (event === "event/html-feedback") {

      const button = document.querySelector(".html-feedback-button")
      this.convert("node/dark-light", button)


      const counter = document.querySelector(".feedback-counter")
      counter.innerHTML = "0"

      this.get("feedback/length/location").then((res) => {

        try {
          const length = parseInt(res.response)
          counter.innerHTML = length
        } catch (error) {
          console.error(error)
        }

      })

      button.onclick = () => {

        this.overlay("toolbox", async overlay => {
          const feedbackOverlay = overlay

          this.add("button/remove-overlay", overlay)

          const info = this.create("header/info", overlay)
          info.append(this.convert("text/span", window.location.pathname))
          info.append(this.convert("text/span", `.feedback`))

          const content = this.create("div/scrollable", overlay)

          const feedbackContainer = this.create("info/loading", content)
          feedbackContainer.info.remove()

          feedbackContainer.style.margin = "21px 34px"
          feedbackContainer.style.overflowY = "auto"
          feedbackContainer.style.overscrollBehavior = "none"
          feedbackContainer.style.fontFamily = "monospace"
          feedbackContainer.style.fontSize = "13px"
          feedbackContainer.style.height = `${window.innerHeight * 0.4}px`


          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            feedbackContainer.style.color = this.colors.dark.text
          } else {
            feedbackContainer.style.color = this.colors.light.text
          }

          const res = await this.get("feedback/values/location")

          if (res.status !== 200) {
            feedbackContainer.innerHTML = `<span style="margin: 21px 34px;">Kein Feedback gefunden.</span>`
          }

          getFeedbackSuccess: if (res.status === 200) {
            const feedback = JSON.parse(res.response)

            if (feedback.length === 0) {
              feedbackContainer.innerHTML = `<span style="margin: 21px 34px;">Kein Feedback gefunden.</span>`
              break getFeedbackSuccess
            }

            this.convert("element/reset", feedbackContainer)
            feedbackContainer.style.margin = "21px 34px"
            feedbackContainer.style.overflowY = "auto"
            feedbackContainer.style.overscrollBehavior = "none"
            feedbackContainer.style.fontFamily = "monospace"
            feedbackContainer.style.fontSize = "13px"
            feedbackContainer.style.height = `${window.innerHeight * 0.4}px`

            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
              feedbackContainer.style.color = this.colors.dark.text
            } else {
              feedbackContainer.style.color = this.colors.light.text
            }

            for (let i = 0; i < feedback.length; i++) {
              const value = feedback[i]

              const div = document.createElement("div")
              div.style.display = "flex"
              div.style.justifyContent = "space-between"
              div.style.alignItems = "center"

              if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {

                if (i % 2 === 0) {
                  div.style.background = this.colors.light.foreground
                  div.style.color = this.colors.light.text
                } else {
                  div.style.background = this.colors.dark.foreground
                  div.style.color = this.colors.dark.text
                }

              } else {

                if (i % 2 === 1) {
                  div.style.background = this.colors.light.foreground
                  div.style.color = this.colors.light.text
                } else {
                  div.style.background = this.colors.dark.foreground
                  div.style.color = this.colors.dark.text
                }

              }

              const left = document.createElement("span")
              left.innerHTML = `${this.convert("millis/dd.mm.yyyy hh:mm", value.id)}`
              div.append(left)

              const nextToLeft = document.createElement("span")
              nextToLeft.style.width = "100%"
              nextToLeft.style.margin = "0 13px"
              nextToLeft.innerHTML = value.content
              div.append(nextToLeft)

              const right = document.createElement("span")
              right.style.padding = "13px"
              right.innerHTML = value.importance
              div.append(right)

              feedbackContainer.append(div)

              div.style.cursor = "pointer"
              div.addEventListener("click", () => {

                this.overlay("toolbox", overlay => {
                  this.add("button/remove-overlay", overlay)

                  const button = this.create("button/left-right", overlay)
                  this.render("icon/node/path", "/public/bucket.svg", button.left).then(icon => {
                    icon.style.width = "34px"
                  })
                  button.right.innerHTML = "Feedback löschen"

                  button.addEventListener("click", async () => {
                    const confirm = window.confirm("Möchtest du diesen Beitrag wirklich löschen?")

                    if (confirm === true) {
                      const del = {}
                      del.url = "/delete/feedback/location/"
                      del.type = "html-value"
                      del.id = value.id
                      const res = await this.request("location/json", del)

                      if (res.status === 200) {
                        counter.innerHTML = parseInt(counter.innerHTML) - 1
                        this.remove("overlay", overlay)
                        this.remove("overlay", feedbackOverlay)
                      } else {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", overlay)
                      }


                    }

                  })
                })

              })
            }


          }

          const contentField = this.create("field/textarea", content)
          contentField.label.innerHTML = "Feedback"
          contentField.input.setAttribute("required", "true")
          contentField.input.maxLength = "377"
          contentField.input.style.fontSize = "13px"
          contentField.input.placeholder = "Schreibe ein anonymes Feedback, wenn du möchtest.."

          this.verify("input/value", contentField.input)
          contentField.input.addEventListener("input", () => this.verify("input/value", contentField.input))


          const importanceField = this.create("field/range", content)
          importanceField.input.min = "0"
          importanceField.input.max = "13"
          importanceField.input.step = "1"
          importanceField.input.value = "0"
          importanceField.label.innerHTML = `Wichtigkeit - ${importanceField.input.value}`

          this.verify("input/value", importanceField.input)

          importanceField.input.addEventListener("input", (event) => {
            this.verify("input/value", importanceField.input)
            importanceField.label.innerHTML = `Wichtigkeit - ${event.target.value}`
          })

          const button = this.create("button/action", content)
          button.innerHTML = "Feedback jetzt speichern"
          button.addEventListener("click", async () => {

            await this.verify("input/value", contentField.input)

            this.overlay("toolbox", async securityOverlay => {

              const register = {}
              register.content = contentField.input.value
              register.importance = importanceField.input.value
              const res = await this.register("feedback/html/location", register)

              if (res.status === 200) {
                window.alert("Vielen Dank für dein Feedback.\n\nDein Feedback ist vollkommen anonym, dynamisch und hilft dabei diese Webseite, noch besser für dich, zu optimieren.")
                this.remove("overlay", securityOverlay)
                this.remove("overlay", overlay)
                counter.innerHTML = parseInt(counter.innerHTML) + 1
              } else {
                window.alert("Fehler.. Bitte wiederholen.")
                this.remove("overlay", securityOverlay)
              }

            })


          })



        })

      }

    }

    if (event === "event/click-funnel") {

      document.querySelectorAll(".click-funnel").forEach(funnel => {

        const startButton = funnel.querySelector(".start-click-funnel-button")

        if (startButton.onclick === null) {
          startButton.onclick = () => {

            startButton.style.display = "none"

            const questions = []
            for (let i = 0; i < funnel.children.length; i++) {
              const child = funnel.children[i]
              if (child.classList.contains("click-field")) {
                questions.push(child)
                child.style.display = "flex"
                break
              }
            }

            if (questions.length <= 0) {
              this.add("click-funnel/end", funnel)
              return
            }
          }
        }

        for (let i = 0; i < funnel.children.length; i++) {
          const child = funnel.children[i]

          if (child.classList.contains("click-field")) {

            child.querySelectorAll(".answer-box").forEach(box => {

              if (box.onclick === null) {

                box.onclick = () => {

                  child.style.display = "none"

                  box.querySelectorAll(".answer").forEach(answer => {
                    answer.setAttribute("clicked", true)
                  })

                  if (child.nextSibling === null) {

                    this.add("click-funnel/end", funnel)

                    return

                  }

                  if (box.hasAttribute("onclick-condition")) {
                    const condition = JSON.parse(box.getAttribute("onclick-condition"))

                    if (condition.action === "skip") {
                      try {
                        this.skipSiblings(parseInt(condition.skip) + 1, child)

                        return
                      } catch (error) {

                        this.add("click-funnel/end", funnel)

                        return

                      }
                    }

                    if (condition.action === "path") {
                      window.location.assign(condition.path)
                      return
                    }

                  }

                  child.nextSibling.style.display = "flex"

                }

              }



            })

          }

        }

      })

    }

    if (event === "underline-hover/node") {
      input.addEventListener("mouseover", () => {
        input.style.textDecoration = "underline"
      })

      input.addEventListener("mouseout", () => {
        input.style.textDecoration = null
      })
    }

    if (event === "click-funnel/end") {

      const endButton = input.querySelector(".end-click-funnel-button")
      const buttonIcon = endButton.children[0]
      const buttonText = endButton.children[1]

      if (endButton.onclick === null) {

        endButton.onclick = () => {

          const funnelTag = input.id

          if (!this.verifyIs("text/tag", funnelTag)) {
            window.alert("Funnel Id ist ungültig.")
            throw new Error("id not a tag")
          }

          const map = {}
          input.querySelectorAll(".click-field").forEach(field => {
            field.querySelectorAll(".answer").forEach(answer => {
              if (answer.getAttribute("clicked") === "true") {
                map[field.id] = answer.innerHTML
              }
            })
          })

          this.overlay("toolbox", async securityOverlay => {
            this.create("info/loading", securityOverlay)

            const res = await this.register("click-funnel/location/self", {tag: funnelTag, funnel: map})

            if (res.status === 200) {

              buttonIcon.innerHTML = ""
              this.render("icon/node/path", "/public/check-animated.svg", buttonIcon)
              buttonText.innerHTML = "Erfolgreich"

              endButton.onclick = () => window.location.reload()

              window.alert("Ihre Daten wurden erfolgreich gespeichert.")

              if (input.hasAttribute("next-path")) {
                window.location.assign(input.getAttribute("next-path"))
              }

              this.remove("overlay", securityOverlay)


            } else {
              window.alert("Fehler.. Bitte wiederholen.")

              buttonIcon.innerHTML = ""
              this.render("icon/node/path", "/public/exclamation-triangle.svg", buttonIcon)
              buttonText.innerHTML = "Fehler"

              endButton.onclick = () => window.location.reload()

              this.remove("overlay", securityOverlay)
            }
          })


        }

      }

      endButton.style.display = "flex"

    }

    if (event === "icon/touch") {
      this.render("icon/node/path", "/public/touch.svg").then(icon => {
        icon.classList.add("touch")
        icon.style.marginLeft = "21px"
        input?.querySelectorAll(".icon.touch").forEach(it => it.remove())
        input?.append(icon)
      })
    }

    if (event === "script/click-funnel-event") {

      const script = this.create(event)

      if (input !== undefined) {
        document.querySelectorAll(`#${script.id}`).forEach(script => script.remove())
        input.append(script)
      }

      return script

    }

    if (event === "script/html-creator") {

      const script = this.create(event)

      if (input !== undefined) {
        document.querySelectorAll(`.${script.id}`).forEach(script => script.remove())
        document.querySelectorAll(`#${script.id}`).forEach(script => script.remove())
        input.append(script)
      }

      return script
    }

    if (event === "script/html-feedback") {

      const script = this.create(event)

      if (input !== undefined) {
        document.querySelectorAll(`.${script.id}`).forEach(node => node.remove())
        document.querySelectorAll(`#${script.id}`).forEach(node => node.remove())
        input.append(script)
      }

      return script
    }

    if (event === "script/back-button") {

      const script = this.create(event)

      if (input !== undefined) {
        document.querySelectorAll(`.${script.id}`).forEach(node => node.remove())
        document.querySelectorAll(`#${script.id}`).forEach(node => node.remove())
        input.append(script)
      }

      return script
    }

    if (event === "script/open-login") {

      const script = this.create(event)

      if (input !== undefined) {
        if (input.querySelector(`#${script.id}`) === null) {
          input.append(script)
        }
      }

      return script
    }

    if (event === "script/toolbox-getter") {

      return new Promise(async(resolve) => {

        const text = `
          <script id="toolbox-getter" type="module">
import {Helper} from "/js/Helper.js"

await Helper.add("toolbox/onbody")
          </script>
        `

        const script = this.convert("text/script", text)

        const create = document.createElement("script")
        create.id = script.id
        create.type = script.type
        create.innerHTML = script.innerHTML

        if (document.body) {
          document.querySelectorAll("#toolbox-getter").forEach(getter => getter.remove())
          document.body.append(create)
          resolve(create)
        } else {
          await this.add("ms/timeout", 3000)
          await this.add("script/toolbox-getter")
        }

      })

    }

    if (event === "script/always") {
      return new Promise((resolve, reject) => {

        try {
          const html = this.convert("text/dom", input.script)

          if (html.tagName === "SCRIPT") {

            const node = this.convert("js/script", html.innerHTML)
            node.id = input.name
            node.type = "module"

            document.querySelectorAll(`#${node.id}`).forEach(element => element.remove())

            if (document.getElementById(node.id) === null) {
              document.body.append(node)
            }


          }

          return resolve()
        } catch (error) {
          return reject(error)
        }

      })
    }

    if (event === "script/once") {

      if (document.getElementById(input.id) === null) {
        document.body.append(input)
      }

    }

    if (event === "style/node/not-valid") {

      const color = this.colors.light.error
      input.style.border = `2px solid ${color}`
      if (input.type === "checkbox") {
        input.style.outline = `2px solid ${color}`
      }
      input.style.borderRadius = "3px"
      const signs = input.parentNode.querySelectorAll("div[class='sign']")
      if (signs.length === 0) {
        const sign = document.createElement("div")
        sign.classList.add("sign")
        sign.innerHTML = "x"
        sign.style.position = "absolute"
        sign.style.right = "34px"
        sign.style.color = color
        sign.style.fontSize = "34px"
        sign.style.fontFamily = "sans-serif"
        input.parentNode.append(sign)
        return input
      }
      if (signs.length > 0) {
        signs.forEach(sign => sign.remove())
        const sign = document.createElement("div")
        sign.classList.add("sign")
        sign.innerHTML = "x"
        sign.style.position = "absolute"
        sign.style.right = "34px"
        sign.style.color = color
        sign.style.fontSize = "34px"
        sign.style.fontFamily = "sans-serif"
        input.parentNode.append(sign)
        return input
      }
      return input
    }

    if (event === "style/node/valid") {
      input.style.border = "2px solid #00c853"
      if (input.type === "checkbox") {
        input.style.outline = "2px solid #00c853"
      }
      input.style.borderRadius = "3px"
      const signs = input.parentNode.querySelectorAll("div[class='sign']")
      if (signs.length === 0) {
        const sign = document.createElement("div")
        sign.classList.add("sign")

        sign.innerHTML = "✓"
        sign.style.position = "absolute"
        sign.style.right = "34px"
        sign.style.color = "#00c853"
        sign.style.fontSize = "34px"
        sign.style.fontFamily = "sans-serif"
        input.parentNode.append(sign)
        return input
      }
      if (signs.length > 0) {
        signs.forEach(sign => sign.remove())
        const sign = document.createElement("div")
        sign.classList.add("sign")

        sign.innerHTML = "✓"
        sign.style.position = "absolute"
        sign.style.right = "34px"
        sign.style.color = "#00c853"
        sign.style.fontSize = "34px"
        sign.style.fontFamily = "sans-serif"
        input.parentNode.append(sign)
        return input
      }
      return input
    }

    if (event === "button/delete-self") {

      const button = this.create("button/left-right")
      button.right.innerHTML = "Mein Konto löschen"
      button.left.innerHTML = ".delete"
      button.addEventListener("click", () => {

        const confirm = window.confirm("Du bist gerade dabei deine persönliche Datenbank zu löschen. Diese Daten werden gelöscht und können nicht mehr wiederhergestellt werden. Du wirst abgemeldet und musst dich erneut registrieren lassen.\n\nMöchtest du alle deine Daten wirklich löschen?")

        if (confirm === true) {
          const prompt = window.prompt("Bitte bestätige deine E-Mail Adresse, um fortzufahren.")

          if (this.verifyIs("text/empty", prompt)) {
            alert("Fehler.. Bitte wiederholen.")
            throw new Error("not found")
          }

          this.overlay("security", async securityOverlay => {

            const verify = {}
            verify.url = "/verify/email/closed/"
            verify.email = prompt
            const res = await this.request("closed/json", verify)


            if (res.status === 200) {

              const res = await this.delete("user/db/self", prompt)

              if (res.status === 200) {
                alert("Daten erfolgreich gelöscht.")
                window.location.assign("/")
              } else {
                alert("Fehler.. Bitte wiederholen.")
                this.remove("overlay", securityOverlay)
              }


            } else {
              alert("Fehler.. Bitte wiederholen.")
              this.remove("overlay", securityOverlay)
            }

          })


        }


      })

      input?.append(button)
      return button

    }

    if (event === "button/register-expert-platform") {

      const button = this.create("button/left-right")
      button.right.innerHTML = "Neue Plattform erstellen"
      button.left.innerHTML = ".platform"
      button.addEventListener("click", () => {

        this.overlay("toolbox", async overlay => {

          this.add("button/remove-overlay", overlay)
          this.render("text/bottom-left", ".platform", overlay)

          const funnel = this.create("div/scrollable", overlay)

          const platformNameField = this.create("field/tag", funnel)
          platformNameField.label.innerHTML = "Plattform Name"
          platformNameField.input.maxLength = "21"
          platformNameField.input.placeholder = "meine-plattform"
          platformNameField.input.addEventListener("input", () => this.verify("input/value", platformNameField.input))
          this.verify("input/value", platformNameField.input)

          const button = this.create("button/action", funnel)
          button.innerHTML = "Plattform jetzt speichern"
          button.addEventListener("click", async () => {

            await this.verify("input/value", platformNameField.input)

            const platformName = platformNameField.input.value

            const res = await this.verify("platform-name/exist-open", platformName)

            if (res.status === 200) {
              window.alert("Plattform existiert bereits.")
              this.setNotValidStyle(platformNameField.input)
              throw new Error("platform exist")
            }


            this.overlay("toolbox", async securityOverlay => {

              const res = await this.register("platform/expert/self", platformName)

              if (res.status === 200) {
                alert("Plattform erfolgreich gespeichert.")
                window.location.reload()
              } else {
                alert("Fehler.. Bitte wiederholen.")
                this.remove("overlay", securityOverlay)
              }


            })

          })

        })
      })

      input?.append(button)
      return button

    }

    if (event === "button/update-expert-name") {

      const button = this.create("button/left-right")
      button.right.innerHTML = "Experten Name ändern"
      button.left.innerHTML = ".name"
      button.addEventListener("click", () => {
        this.overlay("popup", overlay => {

          const funnel = this.create("div/scrollable", overlay)

          const nameField = this.create("field/tag", funnel)
          nameField.input.value = window.location.pathname.split("/")[1]
          nameField.input.placeholder = "mein-neuer-experten-name"
          nameField.input.maxLength = "21"
          nameField.input.oninput = () => this.verify("input/value", nameField.input)
          this.verify("input/value", nameField.input)

          const button = this.create("button/action", funnel)
          button.innerHTML = "Name jetzt speichern"
          button.addEventListener("click", async () => {

            await this.verify("input/value", nameField.input)

            this.overlay("security", async securityOverlay => {

              const res = await this.register("name/expert/self", nameField.input.value)

              if (res.status === 200) {
                window.alert("Name erfolgreich gespeichert.")
                window.location.assign(`/${nameField.input.value}/`)
              }

              if (res.status !== 200) {
                window.alert("Fehler.. Bitte wiederholen.")
                this.remove("overlay", securityOverlay)
              }

            })



          })

        })
      })

      if (input) input.append(button)
      return button
    }

    if (event === "button/network") {

      const button = this.create("button/left-right")
      button.left.innerHTML = ".network"
      button.right.innerHTML = "Nutze die Macht deines Netzwerks"

      button.onclick = () => {
        this.overlay("toolbox", async nextStepOverlay => {
          this.render("text/bottom-left", ".network", nextStepOverlay)
          this.add("button/remove-overlay", nextStepOverlay)
          this.render("text/h1", "Nächste Schritte", nextStepOverlay)
          const updateNext = this.render("text/link", "Aktualisieren", nextStepOverlay)
          updateNext.style.justifyContent = "flex-start"
          updateNext.style.width = "233px"
          updateNext.style.margin = "0 34px"

          const nextList = this.create("div/scrollable", nextStepOverlay)
          this.render("contacts/node/next-list", nextList)
          updateNext.onclick = async () => {
            await this.render("contacts/node/next-list", nextList)
          }
          const app = this.create("button/getyour", nextStepOverlay)

          app.onclick = () => {
            this.overlay("toolbox", async networkFunctionsOverlay => {
              this.add("button/remove-overlay", networkFunctionsOverlay)
              this.render("text/bottom-left", ".network.functions", networkFunctionsOverlay)

              const buttons = this.create("div/scrollable", networkFunctionsOverlay)

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".contacts"
                button.right.innerHTML = "Meine Kontakte"
                button.onclick = () => {
                  this.overlay("popup", async overlay => {
                    this.render("text/h1", "Meine Kontaktliste", overlay)

                    const container = this.create("div", overlay)
                    container.style.display = "flex"
                    container.style.flexWrap = "wrap"
                    container.style.margin = "21px 34px"
                    const importButton = this.render("text/link", "Importieren", container)
                    const exportButton = this.render("text/link", "Exportieren", container)
                    const sendTemplateButton = this.render("text/link", "Template senden", container)

                    importButton.onclick = () => {
                      this.overlay("popup", overlay => {
                        const funnel = this.create("div/scrollable", overlay)

                        const contactsField = this.create("field/textarea", funnel)
                        contactsField.label.innerHTML = "Meine JavaScript Kontaktliste"
                        contactsField.input.style.fontFamily = "monospace"
                        contactsField.input.style.height = "55vh"
                        contactsField.input.setAttribute("required", "true")
                        contactsField.input.oninput = () => this.verify("input/value", contactsField.input)
                        this.add("outline-hover/node", contactsField.input)
                        this.verify("input/value", contactsField.input)
                        contactsField.input.placeholder = `[
{
  created: 1706575455693, // id, einzigartig
  email: "neuer@kontakt.de", // id, einzigartig
  alias: "Kontakt Name",  // optional
  birthday: "1999-03-21", // optional
  status: "kontakt status", // optional
  notes: "Kontakt Notizen", // optional
  phone: "+123456789", // optional
  website: "https://www.kontakt-webseite.de/" // optional
},

.
.

]
                        `

                        const submit = this.render("text/node/action-button", "Kontakte jetzt importieren", funnel)
                        submit.onclick = async () => {
                          await this.verify("input/value", contactsField.input)

                          const contacts = JSON.parse(contactsField.input.value)

                          for (let i = 0; i < contacts.length; i++) {
                            const contact = contacts[i]
                            if (!contact.created || !contact.email) {
                              this.setNotValidStyle(contactsField.input)
                              window.alert("Deine Kontaktliste ist in einem ungültigen Format.")
                              throw new Error("contact list is invalid")
                            }
                          }

                          this.overlay("security", async securityOverlay => {
                            const res = await this.register("contacts/user/js-list", contacts)
                            if (res.status === 200) {
                              window.alert("Deine Kontakte wurden erfolgreich importiert.")
                              this.convert("parent/loading", contactsDiv)
                              const res = await this.get("contacts/user/self")
                              if (res.status !== 200) {
                                this.convert("parent/info", contactsDiv)
                                parent.innerHTML = "Keine Kontakte gefunden"
                              }
                              if (res.status === 200) {
                                const contacts = JSON.parse(res.response)
                                this.render("contacts/node/update-self", contacts, contactsDiv)
                                overlay.remove()
                                securityOverlay.remove()
                              }
                            }
                          })


                        }

                      })
                    }

                    sendTemplateButton.onclick = () => {
                      this.overlay("popup", async overlay => {
                        this.render("text/h1", "Wähle ein Template", overlay)

                        const searchField = this.create("field/text", overlay)
                        searchField.label.innerHTML = "Suche nach Text in deinem Template"
                        searchField.input.placeholder = "Mein Button"
                        searchField.style.margin = "21px 34px"
                        this.verify("input/value", searchField.input)
                        this.add("outline-hover/node", searchField.input)


                        const contactsDiv = this.create("div/scrollable", overlay)

                        const res = await this.get("templates/getyour/self")
                        if (res.status === 200) {
                          const templates = JSON.parse(res.response)

                          let filtered
                          searchField.input.oninput = (ev) => {
                            filtered = templates.filter(it => it.html.toLowerCase().includes(ev.target.value.toLowerCase()))
                            const highlighted = filtered.map(it => {
                              const highlightedHtml = it.html.replace(new RegExp(ev.target.value, 'i'), `<mark>${ev.target.value}</mark>`)
                              return { ...it, html: highlightedHtml }
                            })
                            this.render("templates/node/send-html", highlighted, contactsDiv)
                          }

                          this.render("templates/node/send-html", templates, contactsDiv)
                        }

                      })
                    }

                    const searchField = this.create("field/text", overlay)
                    searchField.label.innerHTML = "Suche nach E-Mail Adresse"
                    searchField.input.placeholder = "domain.de"
                    searchField.style.margin = "0 34px"
                    this.verify("input/value", searchField.input)
                    this.add("outline-hover/node", searchField.input)

                    const contactsDiv = this.create("div/scrollable", overlay)

                    const res = await this.get("contacts/user/self")
                    if (res.status !== 200) {
                      this.convert("parent/info", contactsDiv)
                      parent.innerHTML = "Keine Kontakte gefunden"
                    }
                    let filtered
                    if (res.status === 200) {
                      const contacts = JSON.parse(res.response)

                      exportButton.onclick = () => {
                        if (filtered) {
                          this.convert("text/clipboard", JSON.stringify(filtered))
                          .then(() => window.alert("JavaScript Kontaktliste wurde erfolgreich in die Zwischenablage gespeichert."))
                        } else {
                          this.convert("text/clipboard", JSON.stringify(contacts))
                          .then(() => window.alert("JavaScript Kontaktliste wurde erfolgreich in die Zwischenablage gespeichert."))
                        }
                      }

                      searchField.input.oninput = (ev) => {
                        filtered = contacts.filter(it => it.email.toLowerCase().includes(ev.target.value.toLowerCase()))
                        const highlighted = filtered.map(it => {
                          const highlightedEmail = it.email.replace(new RegExp(ev.target.value, 'i'), `<mark>${ev.target.value}</mark>`)
                          return { ...it, email: highlightedEmail }
                        })
                        this.render("contacts/node/update-self", highlighted, contactsDiv)
                      }

                      this.render("contacts/node/update-self", contacts, contactsDiv)
                    }


                    const addButton = this.create("button/add", overlay)
                    addButton.onclick = () => {

                      this.overlay("popup", overlay => {
                        this.render("text/h1", "Neuen Kontakt erstellen", overlay)

                        const funnel = this.create("div/scrollable", overlay)

                        const emailField = this.create("field/email", funnel)
                        emailField.label.innerHTML = "Welche E-Mail Adresse möchtest du zu deiner Kontaktliste hinzufügen"
                        emailField.input.placeholder = "neue@email.de"
                        this.verify("input/value", emailField.input)
                        emailField.input.oninput = () => this.verify("input/value", emailField.input)

                        const submit = this.create("button/action", funnel)
                        submit.innerHTML = "Kontakt jetzt speichern"
                        submit.onclick = async () => {
                          await this.verify("input/value", emailField.input)

                          this.overlay("security", async securityOverlay => {
                            const res = await this.register("email/contacts/self", emailField.input.value)

                            if (res.status === 200) {
                              window.alert("Kontakt erfolgreich gespeichert.")

                              const res = await this.get("contacts/user/self")
                              if (res.status !== 200) {
                                this.convert("parent/info", contactsDiv)
                                parent.innerHTML = "Keine Kontakte gefunden"
                              }
                              if (res.status === 200) {
                                const contacts = JSON.parse(res.response)
                                this.render("contacts/node/update-self", contacts, contactsDiv)
                              }

                              securityOverlay.remove()
                              overlay.remove()
                            }

                            if (res.status !== 200) {
                              window.alert("Fehler.. Bitte wiederholen.")
                              securityOverlay.remove()
                            }
                          })

                        }

                      })
                    }

                  })
                }
              }

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".pager"
                button.right.innerHTML = "Schreibe schnell, einfach und sicher deine Nachrichten"
                button.onclick = () => {
                  this.overlay("popup", async overlay => {
                    const addButton = this.create("button/add", overlay)
                    addButton.onclick = () => {
                      this.overlay("popup", overlay => {
                        this.render("text/h1", "Neuen Pager erstellen", overlay)

                        const funnel = this.create("div/scrollable", overlay)

                        // create select field instead and fill it with children contacts
                        // not a selected field
                        // a search field that checks the children emails
                        const emailsField = this.create("field/emails", funnel)
                        emailsField.label.innerHTML = "Welche E-Mail Adressen dürfen auf diesen Pager zugreifen?"
                        this.verify("input/value", emailsField.input)
                        emailsField.oninput = () => {

                          this.verify("input/value", emailsField.input)
                          if (emailsField.input.value === "[]") {
                            this.setNotValidStyle(emailsField.input)
                          }
                        }

                      })
                    }

                    this.render("text/h1", "Meine Pager", overlay)

                    const pagerList = this.create("info/loading", overlay)



                    // search the platform closed
                    const res = await this.get("pager/email/closed")



                    if (res.status === 200) {
                      const pager = JSON.parse(res.response)
                      console.log(pager);

                      this.convert("parent/scrollable", pagerList)

                    }

                    if (res.status !== 200) {
                      this.convert("parent/info", pagerList)
                      this.render("icon/node/path", "/public/add.svg", pagerList).then(icon => {
                        pagerList.innerHTML = `Deine E-Mail Adresse wurde in keinem Pager gefunden. Erstelle einen neuen Pager in dem du auf <span style="width: 34px; margin: 0 5px">${icon.outerHTML}</span> klickst.`
                      })
                    }

                  })
                }
              }

            })
          }

          // termin calendar app

        })
      }

      if (input) input.append(button)
      return button
    }

    if (event === "button/assign-expert-home") {

      return new Promise(async(resolve, reject) => {
        try {

          const res = await this.get("name/expert/self")

          if (res.status === 200) {
            const name = res.response

            const button = this.create("button/left-right")
            button.left.innerHTML = ".expert"
            button.right.innerHTML = "Der Bereich für Experten"
            button.onclick = () => window.location.assign(`/${name}/`)

            if (input) input.append(button)
            resolve(button)
          }

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "button/register-html") {

      const save = this.create("button/save", input)

      save.onclick = async () => {

        this.add("event/register-html")

      }

    }

    if (event === "button/start") {

      const button = this.create("button/left-right")
      button.left.innerHTML = ".start"
      button.right.innerHTML = "Beginne deine Reise in die digitale Freiheit"

      button.onclick = () => window.location.assign("/")

      if (input) input.append(button)
      return button
    }

    if (event === "button/remove-overlay") {

      const button = this.create("button/bottom-left")
      this.render("icon/node/path", "/public/arrow-back.svg", button)
      button.onclick = () => input.remove()
      input?.append(button)
      return button

    }

    if (event === "button/conflicts") {
      const button = this.create("button/left-right", input)
      button.left.innerHTML = ".conflicts"
      button.right.innerHTML = "Konflikte"

      button.addEventListener("click", () => {

        this.overlay("toolbox", overlay => {

          this.add("button/remove-overlay", overlay)

          const buttons = this.create("div/scrollable", overlay)

          {
            // const buttons = document.createElement("div")
            // buttons.style.overflowY = "auto"
            // buttons.style.overscrollBehavior = "none"
            // buttons.style.paddingBottom = "144px"
            // overlay.append(buttons)

            {
              const infoBox = document.createElement("div")

              infoBox.style.display = "flex"

              if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                infoBox.style.color = this.colors.matte.black
                infoBox.style.backgroundColor = this.colors.matte.celadon
                infoBox.style.border = `2px solid ${this.colors.matte.forest}`
              } else {
                infoBox.style.color = this.colors.matte.black
                infoBox.style.backgroundColor = this.colors.matte.celadon
                infoBox.style.border = `2px solid ${this.colors.matte.forest}`
              }

              infoBox.style.fontSize = "13px"
              infoBox.style.margin = "21px 34px"
              infoBox.style.padding = "21px"
              infoBox.style.borderRadius = "13px"

              this.render("icon/node/path", "/public/smiling-bear.svg", infoBox).then(icon => {
                icon.style.width = "144px"
                icon.style.marginRight = "8px"
              })

              const message = document.createElement("div")
              message.style.fontSize = "13px"

              message.innerHTML = `
                <p>In unserer Gemeinschaft legen wir großen Wert auf Offenheit, Transparenz und ein harmonisches Miteinander. Wir möchten betonen, dass es vollkommen in Ordnung ist, Konflikte zu melden, und wir ermutigen dies sogar ausdrücklich. Konflikte sind ein natürlicher Bestandteil des menschlichen Zusammenlebens und können uns dabei helfen, Missverständnisse aufzuklären, Probleme zu lösen und eine Veränderung herbeizuführen, bei der sich alle Parteien verstanden fühlen.</p>
              `

              infoBox.append(message)

              buttons.append(infoBox)
            }

            {
              const button = document.createElement("div")
              button.style.display = "flex"
              button.style.flexWrap = "wrap"
              button.style.justifyContent = "space-between"
              button.style.alignItems = "center"
              button.style.margin = "21px 34px"
              button.style.backgroundColor = "rgba(255, 255, 255, 0.6)"
              button.style.borderRadius = "13px"
              button.style.border = "0.3px solid black"
              button.style.boxShadow = "0 3px 6px rgba(0, 0, 0, 0.16)"
              button.style.cursor = "pointer"
              // button.addEventListener("click", () => window.location.assign("/getyour/pana/impressum/"))

              const icon = document.createElement("img")
              icon.style.margin = "13px 34px"
              icon.style.width = "34px"
              icon.src = "/public/add.svg"
              icon.alt = "Hinzufügen"
              button.append(icon)

              const title = document.createElement("div")
              title.innerHTML = "Neuen Konflikt melden"
              title.style.margin = "21px 34px"
              title.style.fontSize = "21px"
              button.append(title)

              buttons.append(button)
            }

            {
              const button = document.createElement("div")
              button.style.display = "flex"
              button.style.flexWrap = "wrap"
              button.style.justifyContent = "space-between"
              button.style.alignItems = "center"
              button.style.margin = "21px 34px"
              button.style.backgroundColor = "rgba(255, 255, 255, 0.6)"
              button.style.borderRadius = "13px"
              button.style.border = "0.3px solid black"
              button.style.boxShadow = "0 3px 6px rgba(0, 0, 0, 0.16)"
              button.style.cursor = "pointer"

              const icon = document.createElement("img")
              icon.style.margin = "13px 34px"
              icon.style.width = "34px"
              icon.src = "/public/open.svg"
              icon.alt = "Offen"
              button.append(icon)

              const title = document.createElement("div")
              title.innerHTML = "Offene Konflikte"
              title.style.margin = "21px 34px"
              title.style.fontSize = "21px"
              button.append(title)

              buttons.append(button)
            }

            {
              const button = document.createElement("div")
              button.style.display = "flex"
              button.style.flexWrap = "wrap"
              button.style.justifyContent = "space-between"
              button.style.alignItems = "center"
              button.style.margin = "21px 34px"
              button.style.backgroundColor = "rgba(255, 255, 255, 0.6)"
              button.style.borderRadius = "13px"
              button.style.border = "0.3px solid black"
              button.style.boxShadow = "0 3px 6px rgba(0, 0, 0, 0.16)"
              button.style.cursor = "pointer"
              // button.addEventListener("click", () => window.location.assign("/getyour/pana/impressum/"))

              const icon = document.createElement("img")
              icon.style.margin = "13px 34px"
              icon.style.width = "34px"
              icon.src = "/public/solved.svg"
              icon.alt = "Gelöst"
              button.append(icon)

              const title = document.createElement("div")
              title.innerHTML = "Gelöste Konflikte"
              title.style.margin = "21px 34px"
              title.style.fontSize = "21px"
              button.append(title)

              buttons.append(button)
            }

          }

        })

      })

    }

    if (event === "onclick/open-login") {

      input.addEventListener("click", async () => {

        const emailInput = document.querySelector(".email-input")
        const dsgvoInput = document.querySelector(".dsgvo-input")

        if (emailInput !== null) {
          if (dsgvoInput !== null) {

            await this.verify("input/value", emailInput)
            await this.verify("input/value", dsgvoInput)

            await this.withVerifiedEmail(emailInput.value, async () => {

              if (emailInput.value.endsWith("@get-your.de")) {

                const res = await this.register("email/super-admin", emailInput.value)

                if (res.status !== 200) {
                  window.alert("Fehler.. Bitte wiederholen.")
                  window.location.assign("/")
                  throw new Error("not found")
                }

              }

              {
                const register = {}
                register.url = "/request/register/session/"
                const res = await this.request("closed/json", register)

                if (res.status === 200) {
                  const redirect = {}
                  redirect.url = "/redirect/user/closed/"
                  const res = await this.request("closed/json", redirect)

                  if (res.status === 200) {
                    window.location.assign(res.response)
                  } else if (!Helper.verifyIs("text/empty", document.referrer)) {
                    window.location.assign(document.referrer)
                  } else {
                    window.history.back()
                  }

                } else {
                  window.history.back()
                }
              }

            })



          }
        }

      })

    }

    if (event === "oninput/verify-input") {

      if (input.type === "email") {
        input.addEventListener("input", (ev) => {
          this.verify("input/value", ev.target)
        })
      }

      if (input.type === "checkbox") {
        input.addEventListener("input", (ev) => {

          if (ev.target.checked === true) {
            ev.target.setAttribute("checked", "true")
          } else {
            ev.target.removeAttribute("checked")
          }

          this.verify("input/value", ev.target)
        })
      }




    }

    if (event === "outline-hover/node") {
      input.addEventListener("mouseover", () => {
        input.style.outline = "3px solid #999"
      })

      input.addEventListener("mouseout", () => {
        input.style.outline = null
      })
    }

    if (event === "outline-hover/field-funnel") {
      for (let i = 0; i < input.querySelectorAll("*").length; i++) {
        const node = input.querySelectorAll("*")[i]
        if (node.classList.contains("field-input") || node.classList.contains("submit-field-funnel-button")) {
          this.add("outline-hover/node", node)
        }
      }
    }

    if (event === "input/value") {

      if (input.type === "email") {

        if (window.localStorage.getItem("email") !== null) {
          input.value = window.localStorage.getItem("email")
          this.verify("input/value", input)
        }

      }

    }

    if (event === "user-json/keydown-event") {

      if (input.classList.contains("user-json")) {

        input.onkeydown = (ev) => {
          if (ev.key === 'Enter') {
            ev.preventDefault()
            if (input.onenter !== undefined) input.onenter(ev)
          }
        }

      }

    }

  }

  static animate(event, input) {
    // event = input/animation

    if (event === "node/pulsate") {
      return input?.animate(
        [
          { transform: 'scale(1)' },
          { transform: 'scale(1.1)' },
          { transform: 'scale(1)' }
        ],
        {
          duration: 3000,
          easing: 'ease-in-out',
          iterations: Infinity
        }
      )
    }

    if (event === "node/border-ripple-out") {

      input.style.position = "relative"

      const rippleNode = input.cloneNode("true")
      rippleNode.classList.add("ripple-out")
      rippleNode.innerHTML = ""
      rippleNode.style.position = "absolute"
      rippleNode.style.top = "-8px"
      rippleNode.style.left = "-8px"
      input.querySelectorAll(".ripple-out").forEach(it => it.remove())
      input.appendChild(rippleNode)

      rippleNode.animate(
        [
          { transform: 'scale(1)', opacity: 1 },
          { transform: 'scale(2)', opacity: 0 }
        ],
        {
          duration: 3000,
          easing: 'ease-in-out',
          iterations: Infinity,
        }
      )

    }

  }

  static callback(event, input, callback) {
    // event = input/algo

    if (event === "email/pin-verified") {

      return new Promise(async(resolve, reject) => {
        try {

          this.overlay("security", async overlay => {

            const content = document.createElement("div")
            content.style.display = "flex"
            content.style.flexDirection = "column"
            content.style.justifyContent = "center"
            content.style.alignItems = "center"
            content.style.height = `${window.innerHeight}px`
            overlay.append(content)

            try {
              const send = {}
              send.url = "/request/send/email/with/pin/"
              send.email = input
              send.location = window.location.href
              send.referer = document.referrer
              const res = await this.request("location/json", send)

              if (res.status === 200) {
                overlay.info.remove()
                this.convert("element/reset", content)
                content.style.overflowY = "auto"

                const pinField = this.create("field/hex", content)
                pinField.label.textContent = "Meine PIN"
                this.setNotValidStyle(pinField.input)
                pinField.input.addEventListener("input", () => {
                  this.verify("input/value", pinField.input)
                })

                const button = this.create("button/action", content)
                button.style.fontSize = "34px"
                button.innerHTML = "PIN bestätigen"
                button.addEventListener("click", async () => {

                  this.overlay("security", async securityOverlay => {

                    try {

                      await this.verify("input/value", pinField.input)

                      const pin = pinField.input.value

                      const verify = {}
                      verify.url = "/request/verify/pin/"
                      verify.userPin = pin
                      verify.location = window.location.href
                      verify.referer = document.referrer
                      const res = await this.request("location/json", verify)

                      if (res.status === 200) {

                        await callback(overlay)
                        overlay.remove()
                        securityOverlay.remove()

                      }

                    } catch (error) {

                      EventTarget.prototype.addEventListener = function(type, listener, options) {
                        console.log('Event listeners blocked')
                      }
                      window.XMLHttpRequest = function() {
                        console.log('XHR blocked')
                      }
                      window.alert("Es tut uns sehr leid, dass ein Fehler aufgetreten ist. Wir verstehen, wie frustrierend es sein kann, wenn Dinge nicht so funktionieren, wie sie sollten. Wir möchten Sie gerne beruhigen und Ihnen versichern, dass unser Team hart daran arbeitet, diesen Fehler so schnell wie möglich zu beheben. Wir hoffen, dass Sie uns die Gelegenheit geben werden, das Problem zu lösen. Falls der Fehler noch einmal auftritt, stehen wir Ihnen gerne zur Verfügung. Bitte zögern Sie nicht, uns unter 'datenschutz@get-your.de' zu kontaktieren, damit wir Ihnen helfen können. In der Zwischenzeit möchten wir Sie ermutigen, es einfach noch einmal zu versuchen. Vielen Dank für Ihr Verständnis und Ihre Geduld.")
                      window.location.reload()
                      throw error

                    }

                  })

                })

                const infoBox = this.create("info/success", content)
                infoBox.style.fontSize = "21px"
                infoBox.innerHTML = `
                <p>PIN erfolgreich an '${input}' gesendet. <span style="font-size:34px;">✓</span></p>
                <p>Es ist wichtig, dass deine PIN geheim gehalten wird, da sie als persönliches Kennwort dient und den Zugriff auf sensible Informationen oder Ressourcen ermöglicht. Teile deine PIN niemals mit anderen Personen. Das gilt selbst für enge Freunde, Familienmitglieder oder Mitarbeiter. Deine PIN sollte nur dir bekannt sein.</p>
                <p><b><span style="font-size:34px;">Bitte bestätige deine PIN um fortzufahren.</span></b></p>
                `

              }



            } catch (error) {
              EventTarget.prototype.addEventListener = function(type, listener, options) {
                console.log('Event listeners blocked')
              }
              window.XMLHttpRequest = function() {
                console.log('XHR blocked')
              }
              window.alert(`Es konnte keine E-Mail an '${input}' verschickt werden.`)
              window.location.reload()
              throw error
            }

          })

        } catch (error) {
          reject(error)
        }
      })

    }

  }

  static create(event, input) {

    // no events, only creation
    // event = thing/algo

    if (event === "overlay/security") {
      const overlay = document.createElement("div")
      overlay.classList.add("overlay")
      overlay.style.height = "100%"
      overlay.style.overscrollBehavior = "none"
      overlay.style.width = "100%"
      overlay.style.zIndex = "99999999999999"
      overlay.style.position = "fixed"
      overlay.style.top = "0"
      overlay.style.left = "0"
      overlay.style.display = "flex"
      overlay.style.flexDirection = "column"
      overlay.style.background = this.colors.light.background

      this.create("info/loading", overlay)

      input?.append(overlay)
      return overlay
    }

    if (event === "template/checklist") {

      const items = []
      items.push({title: "Angebotsübersicht", description: "Hier können Sie ihr Angebot prüfen und anpassen, nähere Produktinformationen erhalten, Allgemeine Geschäftsbedingungen aufrufen und mehr über den Hersteller erfahren."})
      items.push({title: "Angebot hochladen", description: "Wenn Sie noch Fragen haben, finden Sie hier einen kompetenten Ansprechpartner. Haben Sie ihr Angebot geprüft und ggf. geändert, können Sie es hier drucken, hochladen und somit zur Prüfung freigeben."})
      items.push({title: "Baugo", description: "Ihr Angebot wird geprüft und ggf. freigegeben. Hier finden Sie ihren Projektbericht."})
      items.push({title: "Projektvorbereitung", description: "Um einen einwandfreien Aufbau ihres Energiekonzeptes zu ermöglichen, finden Sie hier eine Liste von Aufgaben, die Sie noch vor der Montage erledigen müssen."})
      items.push({title: "Bestätigen Sie die Warenlieferung", description: "Damit zusätzliche Kosten leicht vermieden werden können, prüfen Sie bitte mit Sorgfalt, ob alle gekauften Artikel angeliefert wurden. Die Bestätigung der Ware ist unerlässlich, um weitere Schritte des Aufbaus abzuschließen."})
      items.push({title: "DC-Ansprechpartner", description: "Ihren persönlichen Ansprechpartner für technische Fragen während der Montage finden Sie hier."})
      items.push({title: "Dachmontage - Termin vereinbaren", description: "Über den Terminkalender können Sie einfach und bequem ihren Wunschtermin mit dem Montageteam vereinbaren."})
      items.push({title: "Abnahmeprotokoll DC hochladen", description: "Nachdem unser Monteur das Abnahmeprotokoll aufgenommen hat, prüfen wir es zu ihrem Schutz."})
      items.push({title: "AC-Ansprechpartner", description: "Ihren persönlichen Ansprechpartner für technische Fragen während der Montage finden Sie hier."})
      items.push({title: "Hauselektrik - Termin vereinbaren", description: "Über den Terminkalender können Sie einfach und bequem ihren Wunschtermin mit dem Montageteam vereinbaren."})
      items.push({title: "Abnahmeprotokoll AC hochladen", description: "Nachdem unser Monteur das Abnahmeprotokoll aufgenommen hat, prüfen wir es zu ihrem Schutz."})
      items.push({title: "WP-Ansprechpartner", description: "Ihren persönlichen Ansprechpartner für technische Fragen während der Montage finden Sie hier."})
      items.push({title: "Wärmepumpe - Termin vereinbaren", description: "Über den Terminkalender können Sie einfach und bequem ihren Wunschtermin mit dem Montageteam vereinbaren."})
      items.push({title: "Abnahmeprotokoll WP hochladen", description: "Nachdem unser Monteur das Abnahmeprotokoll aufgenommen hat, prüfen wir es zu ihrem Schutz."})
      items.push({title: "Feedback", description: "Um uns stetig verbessern zu können, brauchen wir ihre Mithilfe. Geben Sie uns ihr Feedback zur Montage, damit unsere Prozesse noch einfacher und schneller werden."})

      this.create("header/left-right", input)
      this.create("header/nav", input)

      this.render("text/title", "Essentielles zum Anlagenaufbau", input)

      const info = this.create("info/success", input)
      info.innerHTML = "Bitte befolgen Sie diese Schritte, um den einwandfreien Aufbau ihres Energiesystems vorzubereiten."

      const checklist = this.render("checklist/items", items, input)

      return checklist

    }

    if (event === "soundbox") {

      const fileImportField = this.create("field/file", input)
      fileImportField.label.innerHTML = "MP3 to CID"
      fileImportField.input.setAttribute("accept", "audio/mp3")
      fileImportField.input.setAttribute("required", "true")
      fileImportField.input.setAttribute("multiple", "true")
      fileImportField.input.setAttribute("soundbox-file-import", "")
      this.verify("input/value", fileImportField.input)

      this.create("script/soundbox", input)

      const div = this.create("div/top-bottom", input)
      div.top.setAttribute("soundbox-tools", "")
      div.bottom.setAttribute("soundbox-audio-list", "")

    }

    if (event === "input/select") {
      const select = document.createElement("select")
      select.add = (options) => {
        select.innerHTML = ""
        for (let i = 0; i < options.length; i++) {
          const option = document.createElement("option")
          option.value = options[i]
          option.text = options[i]
          select.appendChild(option)
        }
      }
      input?.append(select)
      return select
    }

    if (event === "input/password") {

      const password = document.createElement("input")
      password.type = "password"

      if (input) input.append(password)
      return password
    }

    if (event === "input/checkbox") {

      const checkbox = document.createElement("input")
      checkbox.type = "checkbox"

      if (input) input.append(checkbox)
      return checkbox
    }

    if (event === "input/tel") {

      const tel = document.createElement("input")
      tel.type = "tel"

      if (input) input.append(tel)
      return tel
    }

    if (event === "input/number") {

      const number = document.createElement("input")
      number.type = "number"

      if (input) input.append(number)
      return number
    }

    if (event === "input/text") {

      const text = document.createElement("input")
      text.type = "text"
      input?.appendChild(text)
      return text

    }

    if (event === "img") {

      const img = document.createElement("img")
      img.src = "/public/image-placeholder.svg"
      img.style.width = "34px"
      img.style.margin = "21px 34px"

      input?.append(img)
      return img
    }

    if (event === "p") {

      const p = document.createElement("p")
      p.style.margin = "21px 34px"
      p.style.fontFamily = "sans-serif"
      p.style.fontWeight = "normal"
      input?.appendChild(p)
      return p

    }

    if (event === "h3") {

      const h3 = document.createElement("h3")
      h3.style.margin = "21px 34px"
      h3.style.fontFamily = "sans-serif"
      h3.style.fontWeight = "normal"

      input?.append(h3)
      return h3
    }

    if (event === "h2") {

      const h2 = document.createElement("h2")
      h2.style.margin = "21px 34px"
      h2.style.fontFamily = "sans-serif"
      h2.style.fontWeight = "normal"

      input?.append(h2)
      return h2
    }

    if (event === "h1") {

      const h1 = document.createElement("h1")
      h1.style.margin = "21px 34px"
      h1.style.fontFamily = "sans-serif"
      h1.style.fontWeight = "normal"

      input?.append(h1)
      return h1
    }

    if (event === "hr") {

      const hr = document.createElement("hr")

      if (input) input.append(hr)
      return hr
    }

    if (event === "field-funnel/source") {

      const funnel = this.create("div/scrollable", input)
      funnel.id = "source"

      funnel.authorsField = this.create("field/textarea", funnel)
      funnel.authorsField.id = "authors"
      funnel.authorsField.label.innerHTML = "Authoren (mit Komma trennen)"
      funnel.authorsField.input.placeholder = "author1, author2, .., authorN"
      funnel.authorsField.input.setAttribute("required", "true")
      funnel.authorsField.input.oninput = () => this.verify("input/value", funnel.authorsField.input)
      this.verify("input/value", funnel.authorsField.input)
      this.add("outline-hover/node", funnel.authorsField.input)

      funnel.titleField = this.create("field/textarea", funnel)
      funnel.titleField.id = "title"
      funnel.titleField.label.innerHTML = "Titel der Quelle"
      funnel.titleField.input.placeholder = "JavaScript für Anfänger"
      funnel.titleField.input.setAttribute("required", "true")
      funnel.titleField.input.oninput = () => this.verify("input/value", funnel.titleField.input)
      this.verify("input/value", funnel.titleField.input)
      this.add("outline-hover/node", funnel.titleField.input)

      funnel.editionField = this.create("field/tel", funnel)
      funnel.editionField.id = "edition"
      funnel.editionField.label.innerHTML = "Auflage"
      funnel.editionField.input.placeholder = "0"
      funnel.editionField.input.oninput = () => this.verify("input/value", funnel.editionField.input)
      this.verify("input/value", funnel.editionField.input)
      this.add("outline-hover/node", funnel.editionField.input)

      funnel.publisherField = this.create("field/textarea", funnel)
      funnel.publisherField.id = "publisher"
      funnel.publisherField.label.innerHTML = "Herausgeber (mit Komma trennen)"
      funnel.publisherField.input.placeholder = "publisher1, publisher2, .., publisherN"
      funnel.publisherField.input.setAttribute("required", "true")
      funnel.publisherField.input.oninput = () => this.verify("input/value", funnel.publisherField.input)
      this.verify("input/value", funnel.publisherField.input)
      this.add("outline-hover/node", funnel.publisherField.input)

      funnel.publishedField = this.create("field/tel", funnel)
      funnel.publishedField.id = "published"
      funnel.publishedField.label.innerHTML = "Jahr der Herausgabe"
      funnel.publishedField.input.placeholder = "2019"
      funnel.publishedField.input.setAttribute("required", "true")
      funnel.publishedField.input.oninput = () => this.verify("input/value", funnel.publishedField.input)
      this.verify("input/value", funnel.publishedField.input)
      this.add("outline-hover/node", funnel.publishedField.input)

      funnel.isbnField = this.create("field/text", funnel)
      funnel.isbnField.id = "isbn"
      funnel.isbnField.label.innerHTML = "ISBN Nummern (mit Komma trennen)"
      funnel.isbnField.input.placeholder = "isbn1, isbn2, .., isbnN"
      funnel.isbnField.input.oninput = () => this.verify("input/value", funnel.isbnField.input)
      this.verify("input/value", funnel.isbnField.input)
      this.add("outline-hover/node", funnel.isbnField.input)

      funnel.weblinkField = this.create("field/text", funnel)
      funnel.weblinkField.id = "weblink"
      funnel.weblinkField.label.innerHTML = "Web Link zur Quelle"
      funnel.weblinkField.input.placeholder = "https://www.meine-infos.de/meine-quelle/"
      funnel.weblinkField.input.oninput = () => this.verify("input/value", funnel.weblinkField.input)
      this.verify("input/value", funnel.weblinkField.input)
      this.add("outline-hover/node", funnel.weblinkField.input)

      funnel.languageField = this.create("field/text", funnel)
      funnel.languageField.id = "language"
      funnel.languageField.label.innerHTML = "Sprachen erste 2 Buchstaben (mit Komma trennen)"
      funnel.languageField.input.placeholder = "de, en, fr, .."
      funnel.languageField.input.oninput = () => this.verify("input/value", funnel.languageField.input)
      this.verify("input/value", funnel.languageField.input)
      this.add("outline-hover/node", funnel.languageField.input)

      funnel.typeField = this.create("field/text", funnel)
      funnel.typeField.id = "type"
      funnel.typeField.label.innerHTML = "Art der Quelle"
      funnel.typeField.input.placeholder = "text/book"
      funnel.typeField.input.oninput = () => this.verify("input/value", funnel.typeField.input)
      this.verify("input/value", funnel.typeField.input)
      this.add("outline-hover/node", funnel.typeField.input)

      funnel.keywordsField = this.create("field/textarea", funnel)
      funnel.keywordsField.id = "keywords"
      funnel.keywordsField.label.innerHTML = "Schlüsselwörter deiner Quelle (mit Komma trennen)"
      funnel.keywordsField.input.placeholder = "keyword1, keyword2, .., keywordN"
      funnel.keywordsField.input.style.height = "144px"
      funnel.keywordsField.input.oninput = () => this.verify("input/value", funnel.keywordsField.input)
      this.verify("input/value", funnel.keywordsField.input)
      this.add("outline-hover/node", funnel.keywordsField.input)

      funnel.descriptionField = this.create("field/textarea", funnel)
      funnel.descriptionField.id = "description"
      funnel.descriptionField.label.innerHTML = "Beschreibung oder Notizen zu deiner Quelle"
      funnel.descriptionField.input.placeholder = "Hier findest du mehr Informationen über deine Quelle .."
      funnel.descriptionField.input.style.height = "144px"
      funnel.descriptionField.input.oninput = () => this.verify("input/value", funnel.descriptionField.input)
      this.verify("input/value", funnel.descriptionField.input)
      this.add("outline-hover/node", funnel.descriptionField.input)

      funnel.imageField = this.create("field/text", funnel)
      funnel.imageField.id = "image"
      funnel.imageField.label.innerHTML = "Bild URL deiner Quelle"
      funnel.imageField.input.placeholder = "https://www.meine-infos.de/meine-quellbild.jpg"
      funnel.imageField.input.oninput = () => this.verify("input/value", funnel.imageField.input)
      this.verify("input/value", funnel.imageField.input)
      this.add("outline-hover/node", funnel.imageField.input)

      funnel.submit = this.create("button/action", funnel)
      funnel.submit.className = "submit-field-funnel-button"
      this.add("outline-hover/node", funnel.submit)
      funnel.submit.innerHTML = "Quelle jetzt speichern"
      return funnel

    }

    if (event === "funnel/condition") {

      const funnel = this.create("div/scrollable")

      funnel.leftField = this.create("field/tree", funnel)
      funnel.leftField.label.innerHTML = "Nach welcher Datenstruktur soll die Plattform suchen"
      funnel.leftField.input.maxLength = "55"
      funnel.leftField.input.placeholder = "getyour.expert.name"
      this.verify("input/value", funnel.leftField.input)
      funnel.leftField.input.oninput = () => this.verify("input/value", funnel.leftField.input)

      funnel.operatorField = this.create("field/operator", funnel)
      this.verify("input/value", funnel.operatorField.input)
      funnel.operatorField.input.oninput = () => this.verify("input/value", funnel.operatorField.input)

      funnel.rightField = this.create("field/text", funnel)
      funnel.rightField.label.innerHTML = "Vergleichswert"
      funnel.rightField.input.maxLength = "55"
      funnel.rightField.input.setAttribute("required", "true")
      funnel.rightField.input.placeholder = "any"
      this.verify("input/value", funnel.rightField.input)
      funnel.rightField.input.oninput = () => this.verify("input/value", funnel.rightField.input)

      funnel.submit = this.create("button/action", funnel)
      funnel.submit.innerHTML = "Bedingung jetzt speichern"


      if (input !== undefined) input.append(funnel)
      return funnel
    }

    if (event === "fn/algo") {

      if (input.algo === "addLargeStyle") {

        const query = "(min-width: 1025px)"
        const prompt = window.prompt("Gebe die CSS Eigenschaft, nur für Bildschirme größer als 1025px, ein: (z.B., color: red;)")
        if (!this.verifyIs("text/empty", prompt)) {
          let largeStyle = document.querySelector("style[id='large-device']")
          if (largeStyle === null) {
            const style = document.createElement("style")
            style.type = "text/css"
            style.id = "large-device"
            document.head.appendChild(style)
          }
          largeStyle = document.querySelector("style[id='large-device']")
          const selector = this.convert("node/selector", input.node)
          largeStyle.append(`\n@media only screen and ${query} {${selector}{${prompt} !important;}}`)
        }

      }

      if (input.algo === "addGridColumn") {

        return ({node}) => {
          node.style.gridTemplateColumns = `${node.style.gridTemplateColumns} 1fr`
          if (node.lastElementChild) {
            node.append(node.lastElementChild.cloneNode(true))
          }
        }

      }

      if (input.algo === "addGridRow") {

        return ({node}) => {

          node.style.gridTemplateRows = `${node.style.gridTemplateRows} 1fr`
          if (node.lastElementChild) {
            node.append(node.lastElementChild.cloneNode(true))
          }

        }

      }

      if (input.algo === "addLayerAbove") {

        return ({node}) => {
          node.style.position = "relative"
          const layer = document.createElement("div")
          layer.classList.add("layer")
          layer.style.position = "absolute"
          layer.style.top = "0"
          layer.style.left = "0"
          layer.style.borderRadius = node.style.borderRadius
          layer.style.backgroundColor = node.style.backgroundColor
          layer.style.width = `${node.offsetWidth}px`
          layer.style.height = `${node.offsetHeight}px`
          let maxZIndex = this.convert("node/max-z-index", node)
          maxZIndex++
          layer.style.zIndex = maxZIndex
          node.append(layer)
          this.convert("node/sort-children-by-z-index", node)
          window.alert("Layer erfolgreich angehängt.")
        }

      }

      if (input.algo === "addLayerBelow") {

        return ({node}) => {
          node.style.position = "relative"
          const layer = document.createElement("div")
          layer.classList.add("layer")
          layer.style.position = "absolute"
          layer.style.top = "0"
          layer.style.left = "0"
          layer.style.borderRadius = node.style.borderRadius
          layer.style.backgroundColor = node.style.backgroundColor
          layer.style.width = `${node.offsetWidth}px`
          layer.style.height = `${node.offsetHeight}px`
          let minZIndex = this.convert("node/min-z-index", node)
          minZIndex--
          layer.style.zIndex = minZIndex
          node.append(layer)
          this.convert("node/sort-children-by-z-index", node)
          window.alert("Layer erfolgreich angehängt.")
        }

      }

      if (input.algo === "addLayerPrompt") {

        return ({node}) => {
          const prompt = window.prompt("Gebe die exakte Ebene für deinen Layer ein: (z.B., 3, -1)")
          if (this.verifyIs("text/int", prompt)) {
            node.style.position = "relative"
            const layer = document.createElement("div")
            layer.classList.add("layer")
            layer.removeAttribute("id")
            layer.style.position = "absolute"
            layer.style.top = "0"
            layer.style.left = "0"
            layer.style.borderRadius = node.style.borderRadius
            layer.style.backgroundColor = node.style.backgroundColor
            layer.style.width = `${node.offsetWidth}px`
            layer.style.height = `${node.offsetHeight}px`
            layer.style.zIndex = prompt
            node.append(layer)
            this.convert("node/sort-children-by-z-index", node)
            window.alert("Layer erfolgreich angehängt.")
          }
        }

      }

      if (input.algo === "addOpacityWithPrompt") {

        const prompt = window.prompt("Gebe die Sichtbarkeit in Prozent ein: (z.B., 50)")
        const opacity = parseInt(prompt)
        if (opacity >= 0 && opacity <= 100) {
          input.node.style.opacity = `${prompt / 100}`
        }

      }

      if (input.algo === "addMiddleStyle") {

        const query = "(min-width: 601px) and (max-width: 1024px)"
        const prompt = window.prompt("Gebe die CSS Eigenschaft, nur für Bildschirme zwischen 601px und 1024px, ein: (z.B., color: red;)")
        if (!this.verifyIs("text/empty", prompt)) {
          let middleStyle = document.querySelector("style[id='middle-device']")
          if (middleStyle === null) {
            const style = document.createElement("style")
            style.type = "text/css"
            style.id = "middle-device"
            document.head.appendChild(style)
          }
          middleStyle = document.querySelector("style[id='middle-device']")
          const selector = this.convert("node/selector", input.node)
          middleStyle.append(`\n@media only screen and ${query} {${selector}{${prompt} !important;}}`)
        }

      }

      if (input.algo === "addOuterHtmlToClipboard") {

        this.convert("text/clipboard", input.node.outerHTML).then(() => {
          window.alert("Element wurde erfolgreich in deine Zwischenablage gespeichert.")
        })

      }

      if (input.algo === "addStyleToClipboard") {

        if (input.node.hasAttribute("style")) {
          this.convert("text/clipboard", input.node.getAttribute("style")).then(() => {
            window.alert("Style wurde erfolgreich in deine Zwischenablage gespeichert.")
          })
        }

      }

      if (input.algo === "addClipboardToStyle") {

        this.convert("clipboard/text").then(text => {
          input.node.setAttribute("style", text)
        })

      }

      if (input.algo === "addPrinterStyle") {

        const query = "(max-width: 600px)"
        const prompt = window.prompt("Gebe die CSS Eigenschaft, nur für Drucker, ein: (z.B., color: red;)")
        if (!this.verifyIs("text/empty", prompt)) {
          let printerStyle = document.querySelector("style[id='printer-device']")
          if (printerStyle === null) {
            const style = document.createElement("style")
            style.type = "text/css"
            style.id = "printer-device"
            document.head.appendChild(style)
          }
          printerStyle = document.querySelector("style[id='printer-device']")
          const selector = this.convert("node/selector", input.node)
          printerStyle.append(`\n@media print {${selector}{${prompt} !important;}}`)
        }

      }

      if (input.algo === "addSmallStyle") {

        const query = "(max-width: 600px)"
        const prompt = window.prompt("Gebe die CSS Eigenschaft, nur für Bildschirme kleiner als 600px, ein: (z.B., color: red;)")
        if (!this.verifyIs("text/empty", prompt)) {
          let smallStyle = document.querySelector("style[id='small-device']")
          if (smallStyle === null) {
            const style = document.createElement("style")
            style.type = "text/css"
            style.id = "small-device"
            document.head.appendChild(style)
          }
          smallStyle = document.querySelector("style[id='small-device']")
          const selector = this.convert("node/selector", input.node)
          smallStyle.append(`\n@media only screen and ${query} {${selector}{${prompt} !important;}}`)
        }

      }

      if (input.algo === "appendAllSvgIcons") {

        return async (parent, onclick) => {
          const res = await this.get("list/svg/open")
          if (res.status === 200) {
            const list = JSON.parse(res.response)
            for (let i = 0; i < list.length; i++) {
              const svgName = list[i]
              const button = this.create("button/icon", parent)
              button.setAttribute("svg-name", svgName)
              this.add("outline-hover/node", button)
              const icon = await this.convert("text/icon", svgName)
              button.append(icon)
              button.onclick = () => onclick(icon)
            }
          }
        }

      }

      if (input.algo === "appendClipboardToNode") {

        this.convert("clipboard/text").then(text => {
          const node = this.convert("text/node", text)
          input.node.append(node)
        })

      }

      if (input.algo === "appendOrderedListItem") {

        let inner
        return ({node}) => {

          const ul = document.createElement("ol")
          const li = document.createElement("li")
          ul.appendChild(li)

          if (node.firstChild.tagName === "OL") {
            li.innerHTML = inner
            node.firstChild.appendChild(li)
          } else {
            inner = node.innerHTML
            li.innerHTML = inner
            node.innerHTML = ""
            node.appendChild(ul)
          }

        }

      }

      if (input.algo === "appendStyleWithPrompt") {

        const prompt = window.prompt("Füge deinem Element einen individuellen CSS Befehl hinzu: (z.B., color: red;)")
        if (!this.verifyIs("text/empty", prompt)) {
          if (input.node.hasAttribute("style")) {
            const result = input.node.getAttribute("style") + prompt
            input.node.setAttribute("style", result)
          } else {
            input.node.setAttribute("style", prompt)
          }
        }

      }

      if (input.algo === "appendUnorderedListItem") {

        let inner
        return ({node}) => {

          const ul = document.createElement("ul")
          const li = document.createElement("li")
          ul.appendChild(li)

          if (node.firstChild.tagName === "UL") {
            li.innerHTML = inner
            node.firstChild.appendChild(li)
          } else {
            inner = node.innerHTML
            li.innerHTML = inner
            node.innerHTML = ""
            node.appendChild(ul)
          }

        }

      }

      if (input.algo === "creator-buttons") {

        const navigation = this.create("div/flex-row", input.parent)
        this.add("outline-hover/node", navigation)
        const templatesLink = this.render("text/link", "Vorlagen", navigation)
        templatesLink.onclick = () => templatesTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const inputLink = this.render("text/link", "Eingabe Felder", navigation)
        inputLink.onclick = () => inputTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const widthLink = this.render("text/link", "Breite", navigation)
        widthLink.onclick = () => widthTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const heightLink = this.render("text/link", "Höhe", navigation)
        heightLink.onclick = () => heightTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const displayLink = this.render("text/link", "Display", navigation)
        displayLink.onclick = () => displayTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const gridLink = this.render("text/link", "Grid", navigation)
        gridLink.onclick = () => gridTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const flexLink = this.render("text/link", "Flex", navigation)
        flexLink.onclick = () => flexTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const layerLink = this.render("text/link", "Layer", navigation)
        layerLink.onclick = () => layerTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const transformationLink = this.render("text/link", "Transformation", navigation)
        transformationLink.onclick = () => transformationTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const editTextLink = this.render("text/link", "Textverarbeitung", navigation)
        editTextLink.onclick = () => editTextTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const visibilityLink = this.render("text/link", "Sichtbarkeit", navigation)
        visibilityLink.onclick = () => visibilityTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const spacingLink = this.render("text/link", "Abstände", navigation)
        spacingLink.onclick = () => spacingTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const borderLink = this.render("text/link", "Grenzlinien", navigation)
        borderLink.onclick = () => borderTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const mediaQueriesLink = this.render("text/link", "Media Queries", navigation)
        mediaQueriesLink.onclick = () => mediaQueriesTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const optimizeWorkLink = this.render("text/link", "Korrekturen", navigation)
        optimizeWorkLink.onclick = () => optimizeWorkTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const converterLink = this.render("text/link", "Konverter", navigation)
        converterLink.onclick = () => converterTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const forEachChildLink = this.render("text/link", "Für jedes Element", navigation)
        forEachChildLink.onclick = () => forEachChildTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const pickColorLink = this.render("text/link", "Farben", navigation)
        pickColorLink.onclick = () => pickColorTitle.scrollIntoView({ behavior: "smooth", block: "start" })
        const pickSvgLink = this.render("text/link", "SVG", navigation)
        pickSvgLink.onclick = () => pickSvgTitle.scrollIntoView({ behavior: "smooth", block: "start" })

        const optionsContainer = this.create("div/scrollable", input.parent)
        optionsContainer.style.marginTop = "21px"
        optionsContainer.style.height = `${window.innerHeight * 0.4}px`

        const templatesTitle = this.render("text/hr", "Anwendungen für Vorlagen einsetzen", optionsContainer)
        const templateOptions = this.create("div/flex-row", optionsContainer)
        const createFlexButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/bars-two.svg", createFlexButton)
        const wrapButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/arrow-wrap.svg", wrapButton)
        const createGridButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/grid-pencil.svg", createGridButton)
        const rowContainerButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/window-half-y.svg", rowContainerButton)
        const columnContainerButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/window-half-x.svg", columnContainerButton)
        const imageTextButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/display-text.svg", imageTextButton)
        const keyValueButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/lines-two-columns.svg", keyValueButton)
        const actionBtnButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/button.svg", actionBtnButton)
        const horizontalHrButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/window-half-x-overline.svg", horizontalHrButton)
        const simpleHeaderButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/window-header-top-1.svg", simpleHeaderButton)
        const h1Button = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/H1.svg", h1Button)
        const h2Button = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/H2.svg", h2Button)
        const h3Button = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/H3.svg", h3Button)
        const pButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/paragraph.svg", pButton)
        const imageButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/image.svg", imageButton)
        const tableHeaderButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/table-header-top.svg", tableHeaderButton)
        const pdfLinkButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/download-pdf.svg", pdfLinkButton)
        const aLinkButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/chain.svg", aLinkButton)
        const spanButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/window-span-x.svg", spanButton)
        const changeSiButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/change-si.svg", changeSiButton)
        const addSpaceButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/arrow-down-two-lines.svg", addSpaceButton)
        const arrowRightButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/arrow-right.svg", arrowRightButton)
        const divScrollableButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/arrow-top-bottom.svg", divScrollableButton)
        const packDivButton = this.create("button/icon", templateOptions)
        this.render("icon/node/path", "/public/arrow-compress-window.svg", packDivButton)

        const inputTitle = this.render("text/hr", "Anwendungen für Eingabe Felder einsetzen", optionsContainer)
        const inputOptions = this.create("div/flex-row", optionsContainer)
        const textInputButton = this.create("button/icon", inputOptions)
        this.render("icon/node/path", "/public/input-text.svg", textInputButton)
        const numberInputButton = this.create("button/icon", inputOptions)
        this.render("icon/node/path", "/public/input-number.svg", numberInputButton)
        const checkboxInputButton = this.create("button/icon", inputOptions)
        this.render("icon/node/path", "/public/input-checkbox.svg", checkboxInputButton)
        const passwordInputButton = this.create("button/icon", inputOptions)
        this.render("icon/node/path", "/public/input-password.svg", passwordInputButton)
        const selectInputButton = this.create("button/icon", inputOptions)
        this.render("icon/node/path", "/public/input-select.svg", selectInputButton)

        const widthTitle = this.render("text/hr", "Anwendungen für die Breite", optionsContainer)
        const widthOptions = this.create("div/flex-row", optionsContainer)
        const growWidthButton = this.create("button/icon", widthOptions)
        this.render("icon/node/path", "/public/lines-100-x.svg", growWidthButton)
        const maxWidthButton = this.create("button/icon", widthOptions)
        this.render("icon/node/path", "/public/arrow-left-right-with-lines.svg", maxWidthButton)
        const minWidthButton = this.create("button/icon", widthOptions)
        this.render("icon/node/path", "/public/window-with-arrow-left-right.svg", minWidthButton)
        const exactWidthButton = this.create("button/icon", widthOptions)
        this.render("icon/node/path", "/public/arrow-point-x.svg", exactWidthButton)
        const increaseWidthButton = this.create("button/icon", widthOptions)
        this.render("icon/node/path", "/public/w-up.svg", increaseWidthButton)
        const decreaseWidthButton = this.create("button/icon", widthOptions)
        this.render("icon/node/path", "/public/w-down.svg", decreaseWidthButton)

        const heightTitle = this.render("text/hr", "Anwendungen für die Höhe", optionsContainer)
        const heightOptions = this.create("div/flex-row", optionsContainer)
        const growHeightButton = this.create("button/icon", heightOptions)
        this.render("icon/node/path", "/public/lines-100-y.svg", growHeightButton)
        const maxHeightButton = this.create("button/icon", heightOptions)
        this.render("icon/node/path", "/public/arrow-top-down-with-lines.svg", maxHeightButton)
        const minHeightButton = this.create("button/icon", heightOptions)
        this.render("icon/node/path", "/public/window-with-arrow-top-down.svg", minHeightButton)
        const exactHeightButton = this.create("button/icon", heightOptions)
        this.render("icon/node/path", "/public/arrow-point-y.svg", exactHeightButton)
        const increaseHeightButton = this.create("button/icon", heightOptions)
        this.render("icon/node/path", "/public/H-up.svg", increaseHeightButton)
        const decreaseHeightButton = this.create("button/icon", heightOptions)
        this.render("icon/node/path", "/public/H-down.svg", decreaseHeightButton)

        const displayTitle = this.render("text/hr", "Anwendungen für Display Elemente", optionsContainer)
        const displayOptions = this.create("div/flex-row", optionsContainer)
        const exactDisplayButton = this.create("button/icon", displayOptions)
        this.render("icon/node/path", "/public/window-layout-1.svg", exactDisplayButton)
        const displayBlockButton = this.create("button/icon", displayOptions)
        this.render("icon/node/path", "/public/window-header-top-2.svg", displayBlockButton)
        const displayInlineButton = this.create("button/icon", displayOptions)
        this.render("icon/node/path", "/public/window-layout-2.svg", displayInlineButton)
        const toggleDisplayGridButton = this.create("button/icon", displayOptions)
        this.render("icon/node/path", "/public/window-layout-3.svg", toggleDisplayGridButton)
        const toggleDisplayFlexButton = this.create("button/icon", displayOptions)
        this.render("icon/node/path", "/public/window-layout-4.svg", toggleDisplayFlexButton)
        const toggleDisplayTableButton = this.create("button/icon", displayOptions)
        this.render("icon/node/path", "/public/window-layout-5.svg", toggleDisplayTableButton)

        const gridTitle = this.render("text/hr", "Anwendungen für Grid Elemente", optionsContainer)
        const gridOptions = this.create("div/flex-row", optionsContainer)
        const gridMobileButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-layout-6.svg", gridMobileButton)
        const gridFullDisplayButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-layout-7.svg", gridFullDisplayButton)
        const gridTwoColumnsButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-layout-8.svg", gridTwoColumnsButton)
        const gridThreeColumnsButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-layout-9.svg", gridThreeColumnsButton)
        const gridFixedButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-layout-10.svg", gridFixedButton)
        const gridListRowsButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-layout-11.svg", gridListRowsButton)
        const gridSpanColumnButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-span-x.svg", gridSpanColumnButton)
        const gridSpanRowButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-span-y.svg", gridSpanRowButton)
        const exactGridGapButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/window-layout-12.svg", exactGridGapButton)
        const gridAddColumnButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/dots-plus-line-right.svg", gridAddColumnButton)
        const gridRemoveColumnButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/dots-plus-line-left.svg", gridRemoveColumnButton)
        const gridAddRowButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/dots-plus-line-bottom.svg", gridAddRowButton)
        const gridRemoveRowButton = this.create("button/icon", gridOptions)
        this.render("icon/node/path", "/public/dots-plus-line-top.svg", gridRemoveRowButton)

        const flexTitle = this.render("text/hr", "Anwendungen für Flex Elemente", optionsContainer)
        const flexOptions = this.create("div/flex-row", optionsContainer)
        const alignColumnButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-y-between-lines.svg", alignColumnButton)
        const alignLeftButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-x-line-left.svg", alignLeftButton)
        const alignCenterButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-x-line-middle.svg", alignCenterButton)
        const alignRightButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-x-line-right.svg", alignRightButton)
        const alignRowButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-x-between-lines.svg", alignRowButton)
        const alignTopButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-y-line-top.svg", alignTopButton)
        const alignVerticalButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-y-line-middle.svg", alignVerticalButton)
        const alignBottomButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-y-line-bottom.svg", alignBottomButton)
        const flexButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/arrow-left-right-lines-between.svg", flexButton)
        const spaceBetweenButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-x-space-between.svg", spaceBetweenButton)
        const spaceAroundButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/bars-x-space-around.svg", spaceAroundButton)
        const toggleWrapButton = this.create("button/icon", flexOptions)
        this.render("icon/node/path", "/public/lines-x-with-arrow.svg", toggleWrapButton)

        const layerTitle = this.render("text/hr", "Anwendungen für die Layer Elemente", optionsContainer)
        const layerOptions = this.create("div/flex-row", optionsContainer)
        const layerButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/layer.svg", layerButton)
        const positiveLayerButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/layer-plus.svg", positiveLayerButton)
        const negativeLayerButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/layer-minus.svg", negativeLayerButton)
        const exactLayerButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/layer-pencil.svg", exactLayerButton)
        const removeLayerButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/layer-x.svg", removeLayerButton)
        const positionAbsoluteButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/window-with-top-left-arrow-inside.svg", positionAbsoluteButton)
        const positionTopButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/arrow-down-lines-top.svg", positionTopButton)
        const positionRightButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/arrow-left-lines-right.svg", positionRightButton)
        const positionBottomButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/arrow-top-lines-bottom.svg", positionBottomButton)
        const positionLeftButton = this.create("button/icon", layerOptions)
        this.render("icon/node/path", "/public/arrow-right-lines-left.svg", positionLeftButton)

        const transformationTitle = this.render("text/hr", "Anwendungen für die Transformation", optionsContainer)
        const transformationOptions = this.create("div/flex-row", optionsContainer)
        const transformTranslateButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/window-plus-x-y.svg", transformTranslateButton)
        const transformTranslateXButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/arrow-x-point-y-z.svg", transformTranslateXButton)
        const transformTranslateYButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/arrow-y-point-x-z.svg", transformTranslateYButton)
        const zIndexButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/arrow-z-point-x-y.svg", zIndexButton)
        const scaleButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/window-scale.svg", scaleButton)
        const rotateRightButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/arrow-rotate-right.svg", rotateRightButton)
        const exactRotateRightButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/arrow-rotate-right-x.svg", exactRotateRightButton)
        const rotateLeftButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/arrow-rotate-right.svg", rotateLeftButton).then(icon => {
          icon.style.transform = "rotateY(180deg)"
        })
        const exactRotateLeftButton = this.create("button/icon", transformationOptions)
        this.render("icon/node/path", "/public/arrow-rotate-right-x.svg", exactRotateLeftButton).then(icon => {
          icon.style.transform = "rotateY(180deg)"
        })

        const editTextTitle = this.render("text/hr", "Anwendungen für die Textverarbeitung", optionsContainer)
        const textManipulationOptions = this.create("div/flex-row", optionsContainer)
        const whiteSpaceNoWrapButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/lines-broken-left.svg", whiteSpaceNoWrapButton)
        const fontFamilyButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/T-sans-serif.svg", fontFamilyButton)
        const fontWeightNormalButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/window-with-N.svg", fontWeightNormalButton)
        const fontWeightButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/B.svg", fontWeightButton)
        const fontStyleButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/I.svg", fontStyleButton)
        const textDecorationButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/underline-U.svg", textDecorationButton)
        const fontSizeButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/T-small-big.svg", fontSizeButton)
        const fontColorButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/underline-A.svg", fontColorButton)
        const backgroundColorButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/window-can-drop.svg", backgroundColorButton)
        const unorderedListButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/dots-3-lines.svg", unorderedListButton)
        const orderedListButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/lines-with-numbers.svg", orderedListButton)
        const lineHeightButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/arrow-top-down-3-lines.svg", lineHeightButton)
        const sourcesButton = this.create("button/icon", textManipulationOptions)
        this.render("icon/node/path", "/public/bubble-quotes.svg", sourcesButton)

        const visibilityTitle = this.render("text/hr", "Anwendungen für die Sichtbarkeit", optionsContainer)
        const visibilityOptions = this.create("div/flex-row", optionsContainer)
        const overflowYButton = this.create("button/icon", visibilityOptions)
        this.render("icon/node/path", "/public/arrow-top-down-with-hand.svg", overflowYButton)
        const overflowXButton = this.create("button/icon", visibilityOptions)
        this.render("icon/node/path", "/public/arrow-left-right-with-hand.svg", overflowXButton)
        const toggleDisplayNoneButton = this.create("button/icon", visibilityOptions)
        this.render("icon/node/path", "/public/row-disappear.svg", toggleDisplayNoneButton)
        const toggleVisibilityHiddenButton = this.create("button/icon", visibilityOptions)
        this.render("icon/node/path", "/public/eye-open.svg", toggleVisibilityHiddenButton)
        const exactOpacityButton = this.create("button/icon", visibilityOptions)
        this.render("icon/node/path", "/public/drop-half-full.svg", exactOpacityButton)

        const spacingTitle = this.render("text/hr", "Anwendungen für die Abstände", optionsContainer)
        const spacingOptions = this.create("div/flex-row", optionsContainer)
        const toggleMarginButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin.svg", toggleMarginButton)
        const toggleMarginTopButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-top.svg", toggleMarginTopButton)
        const toggleMarginRightButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-right.svg", toggleMarginRightButton)
        const toggleMarginBottomButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-bottom.svg", toggleMarginBottomButton)
        const toggleMarginLeftButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-left.svg", toggleMarginLeftButton)
        const exactMarginButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-x.svg", exactMarginButton)
        const exactMarginTopButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-x-top.svg", exactMarginTopButton)
        const exactMarginRightButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-x-right.svg", exactMarginRightButton)
        const exactMarginBottomButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-x-bottom.svg", exactMarginBottomButton)
        const exactMarginLeftButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/margin-x-left.svg", exactMarginLeftButton)
        const togglePaddingButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding.svg", togglePaddingButton)
        const togglePaddingTopButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-top.svg", togglePaddingTopButton)
        const togglePaddingRightButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-right.svg", togglePaddingRightButton)
        const togglePaddingBottomButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-bottom.svg", togglePaddingBottomButton)
        const togglePaddingLeftButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-left.svg", togglePaddingLeftButton)
        const exactPaddingButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-x.svg", exactPaddingButton)
        const exactPaddingTopButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-x-top.svg", exactPaddingTopButton)
        const exactPaddingRightButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-x-right.svg", exactPaddingRightButton)
        const exactPaddingBottomButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-x-bottom.svg", exactPaddingBottomButton)
        const exactPaddingLeftButton = this.create("button/icon", spacingOptions)
        this.render("icon/node/path", "/public/padding-x-left.svg", exactPaddingLeftButton)

        const borderTitle = this.render("text/hr", "Anwendungen für die Grenzlinien", optionsContainer)
        const borderOptions = this.create("div/flex-row", optionsContainer)
        const toggleBorderButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/border.svg", toggleBorderButton)
        const toggleBorderTopButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/border-top.svg", toggleBorderTopButton)
        const toggleBorderRightButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/border-right.svg", toggleBorderRightButton)
        const toggleBorderBottomButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/border-bottom.svg", toggleBorderBottomButton)
        const toggleBorderLeftButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/border-left.svg", toggleBorderLeftButton)
        const exactBorderButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/border-point.svg", exactBorderButton)
        const exactBorderTopButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-line-top.svg", exactBorderTopButton)
        const exactBorderRightButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-line-right.svg", exactBorderRightButton)
        const exactBorderBottomButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-line-bottom.svg", exactBorderBottomButton)
        const exactBorderLeftButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-line-left.svg", exactBorderLeftButton)
        const toggleBorderRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/window-rounded.svg", toggleBorderRadiusButton)
        const toggleBorderTopLeftRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-top-left-rounded.svg", toggleBorderTopLeftRadiusButton)
        const toggleBorderTopRightRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-top-right-rounded.svg", toggleBorderTopRightRadiusButton)
        const toggleBorderBottomRightRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-bottom-right-rounded.svg", toggleBorderBottomRightRadiusButton)
        const toggleBorderBottomLeftRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-bottom-left-rounded.svg", toggleBorderBottomLeftRadiusButton)
        const exactBorderRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/window-rounded-with-point.svg", exactBorderRadiusButton)
        const exactBorderTopLeftRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-top-left-rounded-point.svg", exactBorderTopLeftRadiusButton)
        const exactBorderTopRightRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-top-right-rounded-point.svg", exactBorderTopRightRadiusButton)
        const exactBorderBottomRightRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-bottom-right-rounded-point.svg", exactBorderBottomRightRadiusButton)
        const exactBorderBottomLeftRadiusButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/dots-bottom-left-rounded-point.svg", exactBorderBottomLeftRadiusButton)
        const toggleBorderNoneButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/wall-minus.svg", toggleBorderNoneButton)
        const boxButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/box.svg", boxButton)
        const exactBoxShadowButton = this.create("button/icon", borderOptions)
        this.render("icon/node/path", "/public/lines-shadow.svg", exactBoxShadowButton)

        const mediaQueriesTitle = this.render("text/hr", "Anwendungen für Media Queries", optionsContainer)
        const mediaQueriesOptions = this.create("div/flex-row", optionsContainer)
        const mediaQueriesOverviewButton = this.create("button/icon", mediaQueriesOptions)
        this.render("icon/node/path", "/public/desktop-and-tablet.svg", mediaQueriesOverviewButton)
        const largeDeviceButton = this.create("button/icon", mediaQueriesOptions)
        this.render("icon/node/path", "/public/desktop.svg", largeDeviceButton)
        const middleDeviceButton = this.create("button/icon", mediaQueriesOptions)
        this.render("icon/node/path", "/public/tablet.svg", middleDeviceButton)
        const smallDeviceButton = this.create("button/icon", mediaQueriesOptions)
        this.render("icon/node/path", "/public/mobile.svg", smallDeviceButton)
        const printerDeviceButton = this.create("button/icon", mediaQueriesOptions)
        this.render("icon/node/path", "/public/printer.svg", printerDeviceButton)

        const optimizeWorkTitle = this.render("text/hr", "Anwendungen für schnelle Korrekturen", optionsContainer)
        const optimizeWorkOptions = this.create("div/flex-row", optionsContainer)
        const insertAfterButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/arrow-under-bar.svg", insertAfterButton)
        const insertBeforeButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/arrow-over-bar.svg", insertBeforeButton)
        const insertLeftButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/arrow-before-bar.svg", insertLeftButton)
        const insertRightButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/arrow-after-bar.svg", insertRightButton)
        const cutOuterHtmlButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/scissor.svg", cutOuterHtmlButton)
        const copyOuterHtmlButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/window-behind-window.svg", copyOuterHtmlButton)
        const pasteOuterHtmlButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/window-pencil.svg", pasteOuterHtmlButton)
        const copyStyleButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/brush.svg", copyStyleButton)
        const pasteStyleButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/mobile-swing.svg", pasteStyleButton)
        const removeStyleButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/rubber.svg", removeStyleButton)
        const removeInnerButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/window-x-right.svg", removeInnerButton)
        const removeInnerWithTextButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/underline-T-with-x.svg", removeInnerWithTextButton)
        const removeNodeButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/image-blocked.svg", removeNodeButton)
        const idButton = this.create("button/id", optimizeWorkOptions)
        const addClassButton = this.create("button/class", optimizeWorkOptions)
        const setAttributeButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/flag-plus.svg", setAttributeButton)
        const addScriptButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/doc-plus.svg", addScriptButton)
        const appendStyleButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/doc-css.svg", appendStyleButton)
        const templatesButton = this.create("button/icon", optimizeWorkOptions)
        this.render("icon/node/path", "/public/doc-html-1.svg", templatesButton)

        const converterTitle = this.render("text/hr", "Anwendungen für Konverter", optionsContainer)
        const converterOptions = this.create("div/flex-row", optionsContainer)
        const textConverterButton = this.create("button/icon", converterOptions)
        this.render("icon/node/path", "/public/focus-text.svg", textConverterButton)
        textConverterButton.onclick = () => this.handle("onclick", {onclick: "overlay-text-converter"})

        const forEachChildTitle = this.render("text/hr", "Anwendungen für jedes Kind Element", optionsContainer)
        const forEachChildrenOptions = this.create("div/flex-row", optionsContainer)
        const fontSizeForEachChildButton = this.create("button/icon", forEachChildrenOptions)
        this.render("icon/node/path", "/public/T-small-big.svg", fontSizeForEachChildButton)

        const pickColorTitle = this.render("text/hr", "Anwendungen für Code und Farben wählen", optionsContainer)
        const colorPickerOptions = this.create("div/flex-row", optionsContainer)
        colorPickerOptions.style.height = "144px"
        colorPickerOptions.style.overflow = "auto"
        for (const [key, value] of Object.entries(this.colors)) {
          if (typeof value === "string") {
            if (!this.verifyIs("text/empty", value)) {
              const color = this.create("button/key-value-color", {key, value})
              this.add("outline-hover/node", color)
              color.onclick = () => {
                this.convert("text/clipboard", value).then(() => {
                  window.alert("Der Hex-Code deiner Farbe wurde erfolgreich in die Zwischenablage gespeichert.")
                })
              }
              colorPickerOptions.append(color)
            }
          }
          if (typeof value === "object") {
            this.render("text/hr", key, colorPickerOptions)
            for (const [key, val] of Object.entries(value)) {
              if (typeof val === "string") {
                if (!this.verifyIs("text/empty", val)) {
                  const color = this.create("button/key-value-color", {key, value: val})
                  this.add("outline-hover/node", color)
                  color.onclick = () => {
                    this.convert("text/clipboard", val).then(() => {
                      window.alert("Code wurde erfolgreich in die Zwischenablage gespeichert.")
                    })
                  }
                  colorPickerOptions.append(color)
                }
              }
            }
          }
        }

        const pickSvgTitle = this.render("text/hr", "Anwendungen für SVG einsetzen", optionsContainer)
        const svgPickerOptions = this.create("div/flex-row", optionsContainer)
        svgPickerOptions.style.paddingBottom = "144px"


        const buttons = {templateOptions, inputOptions, widthOptions, heightOptions, displayOptions, gridOptions, flexOptions, layerOptions, transformationOptions, textManipulationOptions, visibilityOptions, spacingOptions, borderOptions, mediaQueriesOptions, optimizeWorkOptions, converterOptions, forEachChildrenOptions, colorPickerOptions, svgPickerOptions, createFlexButton, wrapButton, createGridButton, rowContainerButton, columnContainerButton, imageTextButton, keyValueButton, actionBtnButton, horizontalHrButton, simpleHeaderButton, h1Button, h2Button, h3Button, pButton, imageButton, tableHeaderButton, pdfLinkButton, aLinkButton, spanButton, changeSiButton, addSpaceButton, arrowRightButton, divScrollableButton, packDivButton, textInputButton, numberInputButton, checkboxInputButton, passwordInputButton, selectInputButton, growWidthButton, maxWidthButton, minWidthButton, exactWidthButton, increaseWidthButton, decreaseWidthButton, growHeightButton, maxHeightButton, minHeightButton, exactHeightButton, increaseHeightButton, decreaseHeightButton, exactDisplayButton, displayBlockButton, displayInlineButton, toggleDisplayGridButton, toggleDisplayFlexButton, toggleDisplayTableButton, gridMobileButton, gridFullDisplayButton, gridTwoColumnsButton, gridThreeColumnsButton, gridFixedButton, gridListRowsButton, gridSpanColumnButton, gridSpanRowButton, exactGridGapButton, gridAddColumnButton, gridRemoveColumnButton, gridAddRowButton, gridRemoveRowButton, alignColumnButton, alignLeftButton, alignCenterButton, alignRightButton, alignRowButton, alignTopButton, alignVerticalButton, alignBottomButton, flexButton, spaceBetweenButton, spaceAroundButton, toggleWrapButton, layerButton, positiveLayerButton, negativeLayerButton, exactLayerButton, removeLayerButton, positionAbsoluteButton, positionTopButton, positionRightButton, positionBottomButton, positionLeftButton, transformTranslateButton, transformTranslateXButton, transformTranslateYButton, zIndexButton, scaleButton, rotateRightButton, exactRotateRightButton, rotateLeftButton, exactRotateLeftButton, whiteSpaceNoWrapButton, fontFamilyButton, fontWeightNormalButton, fontWeightButton, fontStyleButton, textDecorationButton, fontSizeButton, fontColorButton, backgroundColorButton, unorderedListButton, orderedListButton, lineHeightButton, sourcesButton, overflowYButton, overflowXButton, toggleDisplayNoneButton, toggleVisibilityHiddenButton, exactOpacityButton, toggleMarginButton, toggleMarginTopButton, toggleMarginRightButton, toggleMarginBottomButton, toggleMarginLeftButton, exactMarginButton, exactMarginTopButton, exactMarginRightButton, exactMarginBottomButton, exactMarginLeftButton, togglePaddingButton, togglePaddingTopButton, togglePaddingRightButton, togglePaddingBottomButton, togglePaddingLeftButton, exactPaddingButton, exactPaddingTopButton, exactPaddingRightButton, exactPaddingBottomButton, exactPaddingLeftButton, toggleBorderButton, toggleBorderTopButton, toggleBorderRightButton, toggleBorderBottomButton, toggleBorderLeftButton, exactBorderButton, exactBorderTopButton, exactBorderRightButton, exactBorderBottomButton, exactBorderLeftButton, toggleBorderRadiusButton, toggleBorderTopLeftRadiusButton, toggleBorderTopRightRadiusButton, toggleBorderBottomRightRadiusButton, toggleBorderBottomLeftRadiusButton, exactBorderRadiusButton, exactBorderTopLeftRadiusButton, exactBorderTopRightRadiusButton, exactBorderBottomRightRadiusButton, exactBorderBottomLeftRadiusButton, toggleBorderNoneButton, boxButton, exactBoxShadowButton, mediaQueriesOverviewButton, largeDeviceButton, middleDeviceButton, smallDeviceButton, printerDeviceButton, insertAfterButton, insertBeforeButton, insertLeftButton, insertRightButton, cutOuterHtmlButton, copyOuterHtmlButton, pasteOuterHtmlButton, copyStyleButton, pasteStyleButton, removeStyleButton, removeInnerButton, removeInnerWithTextButton, removeNodeButton, idButton, addClassButton, setAttributeButton, addScriptButton, appendStyleButton, templatesButton, fontSizeForEachChildButton, textConverterButton}

        Object.entries(buttons).forEach(([key, value]) => {
          this.add("outline-hover/node", value)
        })

        return () => {
          return buttons
        }

      }

      if (input.algo === "incrementStyle") {

        return ({key, node, delta}) => {
          if (node.style[key]) {
            const match = node.style[key].match(/(\d+(\.\d+)?)(\D.*)/)
            if (match) {
              let number = parseFloat(match[1])
              number = number + delta
              const remainingChars = match[3]
              node.style[key] = `${number}${remainingChars}`
            }
          }
        }

      }

      if (input.algo === "insertAfter") {

        if (input.node) {
          if (input.cache.length > 0) {
            const { node } = input.cache.pop()
            input.node.after(node)
          } else {
            this.convert("clipboard/text").then(text => {
              const node = this.convert("text/node", text)
              input.node.after(node)
            })
          }
        }

      }

      if (input.algo === "insertBefore") {

        if (input.node) {
          if (input.cache.length > 0) {
            const { node } = input.cache.pop()
            input.node.before(node)
          } else {
            this.convert("clipboard/text").then(text => {
              const node = this.convert("text/node", text)
              input.node.before(node)
            })
          }
        }

      }

      if (input.algo === "insertLeft") {

        if (input.node) {
          if (input.cache.length > 0) {
            const { node, parent, index } = input.cache.pop()
            if (input.node.firstChild) {
              input.node.insertBefore(node, input.node.firstChild)
            } else {
              input.node.appendChild(node)
            }
          } else {
            this.convert("clipboard/text").then(text => {
              const node = this.convert("text/node", text)
              if (input.node.firstChild) {
                input.node.insertBefore(node, input.node.firstChild)
              } else {
                input.node.appendChild(node)
              }
            })
          }
        }

      }

      if (input.algo === "insertRight") {

        if (input.node) {
          if (input.cache.length > 0) {
            const { node, parent, index } = input.cache.pop()
            input.node.appendChild(node)
          } else {
            this.convert("clipboard/text").then(text => {
              const node = this.convert("text/node", text)
              input.node.appendChild(node)
            })
          }
        }

      }

      if (input.algo === "decrementStyle") {

        return ({key, node, delta}) => {
          if (node.style[key]) {
            const match = node.style[key].match(/(\d+(\.\d+)?)(\D.*)/)
            if (match) {
              let number = parseFloat(match[1])
              number = number - delta
              const remainingChars = match[3]
              node.style[key] = `${number}${remainingChars}`
            }
          }
        }

      }

      if (input.algo === "on-source-click-in-div-creator-sources-self") {

        const updateButton = this.create("button/left-right", input.parent)
        this.add("outline-hover/node", updateButton)
        updateButton.left.innerHTML = ".update"
        updateButton.right.innerHTML = "Quelle aktualisieren"

        const inlineButton = this.create("button/left-right", input.parent)
        this.add("outline-hover/node", inlineButton)
        inlineButton.left.innerHTML = ".inline-cite"
        inlineButton.right.innerHTML = "Füge einen Verweise im Text ein"

        const fullButton = this.create("button/left-right", input.parent)
        this.add("outline-hover/node", fullButton)
        fullButton.left.innerHTML = ".full-cite"
        fullButton.right.innerHTML = "Füge einen Block Verweis ein"

        const removeButton = this.create("button/left-right", input.parent)
        this.add("outline-hover/node", removeButton)
        removeButton.left.innerHTML = ".remove-source"
        removeButton.right.innerHTML = "Quelle entfernen"

        return ({updateSourceButton, inlineCiteButton, fullCiteButton, removeSourceButton}) => {
          updateButton.onclick = updateSourceButton
          inlineButton.onclick = inlineCiteButton
          fullButton.onclick = fullCiteButton
          removeButton.onclick = removeSourceButton
        }

      }

      if (input.algo === "openLayerOverlay") {

        return (layer, node) => {
          this.overlay("popup", async layerOverlay => {
            this.render("text/title", "Wähle einen Layer aus", layerOverlay)
            const buttons = this.create("div/scrollable", layerOverlay)
            const fatherButton = this.create("button/left-right", buttons)
            fatherButton.classList.add("father-button")
            this.add("outline-hover/node", fatherButton)

            let selectedNode
            if (node.classList.contains("layer")) {
              selectedNode = node.parentElement
            } else {
              selectedNode = node
            }

            let fatherZIndex = 0
            if (selectedNode.style.zIndex) fatherZIndex = selectedNode.style.zIndex
            fatherButton.left.innerHTML = "Ebene " + fatherZIndex
            fatherButton.style.backgroundColor = this.colors.light.error
            fatherButton.right.innerHTML = this.convert("node/selector", selectedNode)
            fatherButton.onclick = async () => {
              await this.remove("element/selected-node", selectedNode.parentElement)
              this.add("element/selected-node", selectedNode)
              layerOverlay.remove()
            }

            for (let i = 0; i < selectedNode.querySelectorAll("*").length; i++) {
              const child = selectedNode.querySelectorAll("*")[i]
              if (child.classList.contains("layer")) {
                const button = this.create("button/left-right")
                button.left.innerHTML = "Ebene " + child.style.zIndex
                button.right.innerHTML = this.convert("node/selector", child)
                this.add("outline-hover/node", button)

                button.onclick = async () => {
                  await layer(child)
                  layerOverlay.remove()
                }
                if (child.style.zIndex >= fatherZIndex) {
                  fatherButton.before(button)
                }
                if (child.style.zIndex < fatherZIndex) {
                  buttons.append(button)
                }
              }
            }
          })
        }

      }

      if (input.algo === "openMediaQueriesOverlay") {

        const selectedNode = input.node
        this.overlay("toolbox", queriesOverlay => {
          this.add("button/remove-overlay", queriesOverlay)

          const content = this.create("div/scrollable", queriesOverlay)

          document.head.querySelectorAll("style").forEach((style, i) => {

            if (style.id === "large-device") this.render("text/hr", "Für Bildschirme breiter als 1025 Pixel", content)
            if (style.id === "middle-device") this.render("text/hr", "Für Bildschirme zwischen 601 und 1024 Pixel", content)
            if (style.id === "small-device") this.render("text/hr", "Für Bildschirme kleiner als 600 Pixel", content)
            if (style.id === "printer-device") this.render("text/hr", "Für Drucker", content)

            const queries = style.textContent.split("@")
            for (var i = 0; i < queries.length; i++) {
              const query = queries[i]

              if (query.trim() === "") continue

              const queryButton = this.create("button/left-right", content)
              this.add("outline-hover/node", queryButton)
              queryButton.left.innerHTML = this.convert("query/selector", query)
              queryButton.right.innerHTML = `Media Query ${i}`

              queryButton.onclick = () => {
                this.overlay("toolbox", queryOverlay => {
                  this.add("button/remove-overlay", queryOverlay)

                  const buttons = this.create("div/scrollable", queryOverlay)

                  const currentSelector = this.convert("query/selector", query)
                  const cssSplit = this.convert("query/css", query).split(" ")
                  const currentCss = cssSplit[0] + " " + cssSplit[1]

                  const info = this.create("header/info", queryOverlay)
                  info.innerHTML = currentSelector

                  {
                    const button = this.create("button/left-right", buttons)
                    this.add("outline-hover/node", button)
                    button.left.innerHTML = ".selector"
                    button.right.innerHTML = "Ziel Element ändern"
                    button.onclick = () => {
                      this.overlay("toolbox", selectorOverlay => {
                        this.add("button/remove-overlay", selectorOverlay)

                        const info = this.create("header/info", selectorOverlay)
                        info.innerHTML = `${currentSelector}.selector`

                        const funnel = this.create("div/scrollable", selectorOverlay)

                        const selectorField = this.create("field/textarea", funnel)
                        selectorField.label.innerHTML = "CSS Selektor"
                        selectorField.input.style.fontSize = "13px"
                        selectorField.input.value = currentSelector
                        this.verify("input/value", selectorField.input)

                        const submit = this.create("button/action", funnel)
                        submit.innerHTML = "Selektor jetzt speichern"
                        submit.onclick = () => {

                          try {

                            const newSelector = selectorField.input.value
                            style.textContent = style.textContent.replace(currentSelector, newSelector)
                            window.alert("Selektor erfolgreich gespeichert.")

                            this.remove("overlay", queriesOverlay)
                            this.remove("overlay", queryOverlay)
                            this.remove("overlay", selectorOverlay)

                          } catch (error) {
                            console.error(error)
                            window.alert("Fehler.. Bitte wiederholen.")
                          }

                        }



                      })
                    }
                  }

                  {
                    const button = this.create("button/left-right", buttons)
                    this.add("outline-hover/node", button)
                    button.left.innerHTML = ".css"
                    button.right.innerHTML = "Style anpassen"
                    button.onclick = () => {
                      this.overlay("toolbox", cssOverlay => {
                        this.add("button/remove-overlay", cssOverlay)

                        const info = this.create("header/info", cssOverlay)
                        info.innerHTML = `${currentSelector}.css`

                        const funnel = this.create("div/scrollable", cssOverlay)

                        const cssField = this.create("field/textarea", funnel)
                        cssField.label.innerHTML = "CSS Regel"
                        cssField.input.style.fontSize = "13px"
                        cssField.input.value = currentCss
                        this.verify("input/value", cssField.input)

                        const submit = this.create("button/action", funnel)
                        submit.innerHTML = "CSS jetzt speichern"
                        submit.onclick = () => {

                          try {

                            const newCss = cssField.input.value
                            style.textContent = style.textContent.replace(currentCss, newCss)
                            window.alert("CSS erfolgreich gespeichert.")

                            this.remove("overlay", queriesOverlay)
                            this.remove("overlay", queryOverlay)
                            this.remove("overlay", cssOverlay)

                          } catch (error) {
                            console.error(error)
                            window.alert("Fehler.. Bitte wiederholen.")
                          }

                        }



                      })
                    }
                  }

                  {
                    const button = this.create("button/left-right", buttons)
                    this.add("outline-hover/node", button)
                    button.left.innerHTML = ".remove"
                    button.right.innerHTML = "Media Query entfernen"
                    button.onclick = () => {
                      try {
                        style.textContent = style.textContent.replace(`@${query}`, "")
                        this.remove("overlay", queriesOverlay)
                        this.remove("overlay", queryOverlay)
                        window.alert("Media Query erfolgreich entfernt.")
                      } catch (error) {
                        console.error(error)
                        window.alert("Fehler.. Bitte wiederholen.")
                      }
                    }
                  }

                })

              }

            }

          })

        })



      }

      if (input.algo === "openNodeLayerOverlay") {

        return async ({node}) => {
          const result = await this.verifyIs("class/found", {node: node, class: "layer" })
          if (result === true) {

            this.overlay("popup", async layerOverlay => {
              this.render("text/title", "Wähle einen Layer aus", layerOverlay)

              const layers = this.create("div/scrollable", layerOverlay)

              const fatherButton = this.create("button/left-right", layers)
              this.add("outline-hover/node", fatherButton)
              fatherButton.classList.add("father-button")

              let fatherZIndex = 0
              if (node.style.zIndex) fatherZIndex = node.style.zIndex
              fatherButton.left.innerHTML = "Ebene " + fatherZIndex

              fatherButton.style.backgroundColor = this.colors.light.error

              const fatherSelector = await this.convert("element/selector", node)
              fatherButton.right.innerHTML = fatherSelector

              fatherButton.onclick = async () => {
                await this.remove("element/selected-node", node.parentElement)
                this.add("element/selected-node", node)
                this.remove("overlay", layerOverlay)
              }

              node.querySelectorAll("*").forEach(async(item, i) => {
                if (item.classList.contains("layer")) {

                  const selector = await this.convert("element/selector", item)

                  const button = this.create("button/left-right")
                  this.add("outline-hover/node", button)
                  button.left.innerHTML = "Ebene " + item.style.zIndex
                  button.right.innerHTML = selector
                  button.onclick = async () => {
                    console.log(node);
                    console.log(item);
                    // onclick the cached selectedNode is not changing
                    await this.remove("element/selected-node", node.parentElement)
                    // node = item
                    this.add("selected/node", item)
                    this.convert("node/selected", node)
                    layerOverlay.remove()
                  }

                  if (item.style.zIndex >= fatherZIndex) {
                    fatherButton.before(button)
                  }

                  if (item.style.zIndex < fatherZIndex) {
                    layers.append(button)
                  }

                }
              })

            })

          }
          if (result === false) {
            window.alert("In diesem Element sind keine Layer enthalten.")
          }

        }
      }

      if (input.algo === "openScriptsOverlay") {

        this.overlay("popup", async overlay => {
          overlay.info.innerHTML = `.scripts`

          const create = this.create("button/left-right", overlay)
          create.left.innerHTML = ".create"
          create.right.innerHTML = "Neues Skript hochladen"
          create.addEventListener("click", () => {

            this.overlay("toolbox", overlay => {
              this.add("button/remove-overlay", overlay)
              const info = this.create("header/info", overlay)
              info.append(this.convert("text/span", ".script"))

              const funnel = this.create("div/scrollable", overlay)

              const nameField = this.create("field/tag", funnel)
              nameField.label.innerHTML = "Skript Identifikation (text/tag)"
              nameField.input.placeholder = "mein-skript"
              this.verify("input/value", nameField.input)
              nameField.input.addEventListener("input", () => this.verify("input/value", nameField.input))

              const scriptField = this.create("field/script", funnel)
              scriptField.input.style.height = "100vh"
              this.verify("input/value", scriptField.input)
              scriptField.input.addEventListener("input", () => this.verify("input/value", scriptField.input))

              const button = this.create("button/action", funnel)
              button.innerHTML = "Skript jetzt speichern"
              button.addEventListener("click", async () => {

                await this.verify("field-funnel", funnel)

                const map = {}
                map.script = scriptField.input.value
                map.name = nameField.input.value

                this.overlay("security", async securityOverlay => {

                  const res = await this.register("script/closed", map)

                  if (res.status === 200) {

                    this.convert("parent/loading", content)
                    await this.add("scripts/update-buttons", content)

                    this.remove("overlay", securityOverlay)
                    this.remove("overlay", overlay)

                  }

                  if (res.status !== 200) {
                    window.alert("Fehler.. Bitte wiederholen.")
                    this.remove("overlay", securityOverlay)
                  }

                })

              })

            })

          })

          this.render("text/hr", "Meine Skripte", overlay)

          const content = this.create("info/loading", overlay)

          await this.add("scripts/update-buttons", content)


        })
      }

      if (input.algo === "openSourcesOverlay") {

        const selectedNode = input.node
        this.overlay("popup", async sourcesOverlay => {

          this.create("header/info", sourcesOverlay).innerHTML = ".sources"

          const create = this.create("button/left-right", sourcesOverlay)
          this.add("outline-hover/node", create)
          create.left.innerHTML = ".create"
          create.right.innerHTML = "Neue Quelle definieren"
          create.addEventListener("click", () => {

            this.overlay("popup", async overlay => {

              const info = this.create("header/info", overlay).innerHTML = ".source.create"

              const searchField = this.create("field/text", overlay)
              searchField.label.innerHTML = "Suche nach dem Titel deiner Quelle"
              searchField.input.placeholder = "Mein Lieblingsbuch, .."
              this.verify("input/value", searchField.input)
              searchField.input.onkeypress = (ev) => {
                if (ev.keyCode === 13 || ev.key === 'Enter') {

                  this.overlay("popup", async overlay => {
                    overlay.info.innerHTML = ".sources"

                    const h1 = this.render("text/h1", `Quellen werden gesucht..`, overlay)

                    const filterTitleField = this.create("field/text", overlay)
                    filterTitleField.label.innerHTML = "Filter genauer nach Titel"
                    filterTitleField.input.placeholder = "Titel"
                    filterTitleField.style.margin = "0 34px"
                    this.verify("input/value", filterTitleField.input)
                    this.add("outline-hover/node", filterTitleField.input)

                    const buttons = this.create("info/loading", overlay)

                    this.convert("text/sources", ev.target.value).then(sources => {

                      if (sources.length === 0) {
                        window.alert("Es wurden keine Quellen gefunden.")
                        this.add("style/node/not-valid", searchField.input)
                        overlay.remove()
                      } else if (sources.length === 1) {
                        h1.innerHTML = `Es wurde ${sources.length} Quelle gefunden`
                      } else {
                        h1.innerHTML = `Es wurden ${sources.length} Quellen gefunden`
                      }

                      filterTitleField.input.oninput = (ev) => {
                        const filtered = sources.filter(it => it.title.toLowerCase().includes(ev.target.value.toLowerCase()))
                        const highlighted = filtered.map(it => {
                          const highlightedTitle = it.title.replace(new RegExp(ev.target.value, 'i'), `<mark>${ev.target.value}</mark>`)
                          return { ...it, title: highlightedTitle }
                        })

                        this.convert("parent/scrollable", buttons)
                        for (let i = 0; i < highlighted.length; i++) {
                          const source = highlighted[i]
                          const button = this.render("button/node/pick-source", source, buttons)
                          button.onclick = () => {
                            this.render("source/field-funnel", source, funnel)
                            this.verify("field-funnel", funnel)
                            overlay.remove()
                          }
                        }

                      }

                      this.convert("parent/scrollable", buttons)
                      for (let i = 0; i < sources.length; i++) {
                        const source = sources[i]
                        const button = this.render("button/node/pick-source", source, buttons)
                        button.onclick = () => {
                          this.render("source/field-funnel", source, funnel)
                          this.verify("field-funnel", funnel)
                          overlay.remove()
                        }
                      }

                    })

                  })

                }
              }

              this.render("text/hr", "Neue Quelle anlegen", overlay)

              const funnel = this.create("field-funnel/source", overlay)
              funnel.submit.onclick = async () => {

                await this.verify("field-funnel", funnel)

                const map = await this.convert("field-funnel/map", funnel)

                this.overlay("security", async securityOverlay => {

                  const res = await this.register("source/user/self", map)
                  if (res.status === 200) {
                    window.alert("Daten erfolgreich gespeichert.")

                    await renderSourceOptionButtons(sourceList)

                    securityOverlay.remove()
                  }
                  if (res.status !== 200) {
                    window.alert("Fehler.. Bitte wiederholen.")
                    securityOverlay.remove()
                  }

                })

              }

            })

          })

          this.render("text/hr", "Meine Quellen", sourcesOverlay)

          const sourceList = this.create("info/loading", sourcesOverlay)

          async function renderSourceOptionButtons(parent) {
            parent.innerHTML = ""

            const res = await Helper.get("sources/user/self")
            if (res.status === 200) {
              const sources = JSON.parse(res.response)
              Helper.convert("parent/scrollable", parent)
              for (let i = 0; i < sources.length; i++) {
                const source = sources[i]
                const button = Helper.render("button/node/pick-source", source, parent)
                button.onclick = () => {
                  Helper.overlay("popup", overlay => {

                    overlay.info.innerHTML = source.title
                    Helper.convert("node-text/slice-width", {node: overlay.info, text: source.title, width: 89})

                    const buttons = Helper.create("div/scrollable", overlay)
                    Helper.create("fn/algo", {algo: "on-source-click-in-div-creator-sources-self", parent: buttons})({
                      updateSourceButton: () => Helper.handle("onclick", {onclick: "update-source-self", source}),
                      inlineCiteButton: () => {
                        Helper.render("inline-cite/node/mla", source, selectedNode)
                        overlay.remove()
                        sourcesOverlay.remove()
                      },
                      fullCiteButton: () => {
                        Helper.render("full-cite/node/mla", source, selectedNode)
                        overlay.remove()
                        sourcesOverlay.remove()
                      },
                      removeSourceButton: async () => {
                        await Helper.handle("onclick", {onclick: "delete-source-self", source})
                        button.remove()
                        overlay.remove()
                      },
                    })

                  })
                }
              }
            } else {
              Helper.convert("parent/info", parent)
              parent.innerHTML = `Keine Quellen gefunden`
            }
          }
          renderSourceOptionButtons(sourceList)


        })

      }

      if (input.algo === "openTemplatesOverlay") {

        const selectedNode = input.node
        this.overlay("popup", async overlay => {

          const searchField = this.create("field/text", overlay)
          searchField.label.innerHTML = "Suche nach Text in deinem Template"
          searchField.input.placeholder = "Mein Button"
          searchField.style.margin = "21px 34px"
          this.verify("input/value", searchField.input)
          this.add("outline-hover/node", searchField.input)

          if (selectedNode) {
            const registerTemplateButton = this.create("button/app", overlay)
            this.render("icon/node/path", "/public/add.svg", registerTemplateButton)
            registerTemplateButton.onclick = async () => {

              if (selectedNode.hasAttribute("contenteditable")) {
                selectedNode.removeAttribute("contenteditable")
              }
              if (selectedNode.hasAttribute("id")) {
                selectedNode.removeAttribute("id")
              }
              await this.remove("element/selected-node", selectedNode)

              const confirm = window.confirm("Möchtest du das ausgewählte Element als Template speichern?")
              if (confirm === true) {
                this.overlay("security", async securityOverlay => {
                  const res = await this.register("html/templates/self", selectedNode.outerHTML)
                  if (res.status === 200) {
                    window.alert("Template erfolgreich gespeichert.")
                    securityOverlay.remove()
                    overlay.remove()
                  } else {
                    window.alert("Fehler.. Bitte wiederholen.")
                    securityOverlay.remove()
                  }
                })
              }

            }
          }

          const content = this.create("info/loading", overlay)

          const res = await this.get("templates/getyour/self")
          if (res.status === 200) {
            const templates = JSON.parse(res.response)

            let filtered
            searchField.input.oninput = (ev) => {
              filtered = templates.filter(it => it.html.toLowerCase().includes(ev.target.value.toLowerCase()))
              const highlighted = filtered.map(it => {
                const highlightedHtml = it.html.replace(new RegExp(ev.target.value, 'i'), `<mark>${ev.target.value}</mark>`)
                return { ...it, html: highlightedHtml }
              })
              this.render("templates/node/selected-node", {templates: highlighted, selectedNode}, content)
            }

            this.render("templates/node/selected-node", {templates, selectedNode}, content)
          }

          if (res.status !== 200) {
            this.convert("parent/info", content)
            content.innerHTML = "Keine Templates gefunden"
          }

        })
      }

      if (input.algo === "replaceInnerHtmlWithPrompt") {

        const prompt = window.prompt("Ersetze den Inhalt deines Elements mit folgendem Text: (z.B., Hallo HTML)")
        input.node.innerHTML = prompt

      }

      if (input.algo === "scaleWithPrompt") {

        return ({node, message}) => {
          const prompt = window.prompt(message)
          if (!this.verifyIs("text/empty", prompt)) {
            node.style.transform = `scale(${prompt})`
          }
        }

      }

      if (input.algo === "setAttributeWithPrompt") {

        const prompt = window.prompt("Markiere dein Element mit einem Attribut: (z.B., id=neue-id)")
        if (!this.verifyIs("text/empty", prompt)) {
          try {
            const promptSplit = prompt.split("=")
            if (promptSplit.length === 2) {
              input.node.setAttribute(promptSplit[0], promptSplit[1])
            }
          } catch (error) {
            window.alert("Du musst ein 'Gleichheitszeichen =' nutzen, um dein Attribut vom Wert zu trennen.")
          }
        }

      }

      if (input.algo === "setChildrenStyleWithPrompt") {

        return (key, node, message) => {
          const prompt = window.prompt(message)
          for (var i = 0; i < node.children.length; i++) {
            const child = node.children[i]
            child.style[key] = prompt
          }
        }

      }

      if (input.algo === "setClassWithPrompt") {

        const prompt = window.prompt("Füge deinem Element einen Klassen Namen hinzu:")
        if (!this.verifyIs("text/empty", prompt)) {
          input.node.classList.add(prompt)
          window.alert("Klasse wurde erfolgreich angehängt.")
        }

      }

      if (input.algo === "setIdWithPrompt") {

        const prompt = window.prompt("Gebe deinem Element einen eindeutige Id: (z.B., mein-html)")
        if (!this.verifyIs("text/empty", prompt)) {
          const found = document.getElementById(prompt)
          if (found === null) {
            input.node.setAttribute("id", prompt)
            window.alert("Id wurde erfolgreich gesetzt.")
          } else {
            window.alert("Diese Id existiert bereits.")
          }
        }

      }

      if (input.algo === "setStyleWithPrompt") {

        return ({key, node, message}) => {
          const prompt = window.prompt(message)
          node.style[key] = prompt
        }

      }

      if (input.algo === "toggleAttribute") {

        let cache
        return (attribute, node) => {
          if (!node.hasAttribute(attribute)) {
            if (cache) {
              node.setAttribute(attribute, cache)
            } else {
              node.removeAttribute(attribute)
            }
          } else {
            cache = node.getAttribute(attribute)
            node.removeAttribute(attribute)
          }
        }

      }

      if (input.algo === "toggleInnerHtml") {

        let cache
        return (node) => {
          if (this.verifyIs("text/empty", node.innerHTML)) {
            if (cache) {
              node.innerHTML = cache
            } else {
              node.innerHTML = ""
            }
          } else {
            cache = node.innerHTML
            node.innerHTML = ""
          }
        }

      }

      if (input.algo === "toggleNodeAndChildrenStyles") {

        let originalNodeStyle
        let originalChildrenStyles = []
        return ({nodeStyle, childrenStyle, node}) => {
          if (originalNodeStyle) {
            node.setAttribute("style", originalNodeStyle)
            originalNodeStyle = null
          } else {
            originalNodeStyle = node.getAttribute("style")
            for (const [key, value] of Object.entries(nodeStyle)) {
              node.style[key] = value
            }
          }
          for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i]
            if (originalChildrenStyles[i]) {
              child.setAttribute("style", originalChildrenStyles[i])
              originalChildrenStyles[i] = null
            } else {
              originalChildrenStyles[i] = child.getAttribute("style")
              for (const [key, value] of Object.entries(childrenStyle)) {
                child.style[key] = value
              }
            }
          }
        }

      }

      if (input.algo === "translateWithPrompt") {

        return ({node, message}) => {
          const prompt = window.prompt(message)
          if (!this.verifyIs("text/empty", prompt)) {
            node.style.transform = `translate(${prompt})`
          } else {
            node.style.transform = null
          }
        }

      }

      if (input.algo === "translateXWithPrompt") {

        return ({node, message}) => {
          const prompt = window.prompt(message)
          if (!this.verifyIs("text/empty", prompt)) {
            node.style.transform = `translateX(${prompt})`
          } else {
            node.style.transform = null
          }
        }

      }

      if (input.algo === "translateYWithPrompt") {

        return ({node, message}) => {
          const prompt = window.prompt(message)
          if (!this.verifyIs("text/empty", prompt)) {
            node.style.transform = `translateY(${prompt})`
          } else {
            node.style.transform = null
          }
        }

      }

      if (input.algo === "fixedGridPrompt") {

        let originalGridFixedStyle
        let originalGridFixedChildrenStyle = []
        return ({node}) => {
          if (originalGridFixedStyle) {
            node.setAttribute("style", originalGridFixedStyle)
            originalGridFixedStyle = null
            for (var i = 0; i < node.children.length; i++) {
              const child = node.children[i]
              const style = originalGridFixedChildrenStyle.shift()
              if (style) {
                child.setAttribute("style", style)
              } else {
                child.removeAttribute("style")
              }
            }
          } else {
            const prompt = window.prompt("Gebe die exakte Dimension deiner Grid Elemente ein: (z.B., 144px)")
            originalGridFixedStyle = node.getAttribute("style")
            node.style.display = "grid"
            node.style.gridTemplateColumns = `repeat(auto-fit, minmax(${prompt}, 1fr))`
            node.style.gridTemplateRows = `repeat(auto-fit, minmax(0, ${prompt}))`
            node.style.gridGap = "21px"
            for (var i = 0; i < node.children.length; i++) {
              const child = node.children[i]
              originalGridFixedChildrenStyle.push(child.getAttribute("style"))
              child.style.height = prompt
            }
          }
        }

      }

      if (input.algo === "removeAllLayer") {

        return ({node}) => {
          node.querySelectorAll("*").forEach((item, i) => {
            if (item.classList.contains("layer")) {
              item.remove()
            }
          })
          window.alert("Alle Layer wurden erfolgreich entfernt.")
        }

      }

      if (input.algo === "removeGridColumn") {

        return ({node}) => {
          const templateColumns = node.style.gridTemplateColumns.split(" ")
          templateColumns.pop()
          node.style.gridTemplateColumns = templateColumns.join(" ")
          if (node.lastElementChild) {
            node.lastElementChild.remove()
          }
        }

      }

      if (input.algo === "removeGridRow") {

        return ({node}) => {
          const templateRows = node.style.gridTemplateRows.split(" ")
          templateRows.pop()
          node.style.gridTemplateRows = templateRows.join(" ")
          if (node.lastElementChild) {
            node.lastElementChild.remove()
          }
        }

      }

      if (input.algo === "rotateNode") {

        let rotationDegree = 0
        return ({degree, node}) => {
          rotationDegree += degree
          if (rotationDegree === 360) rotationDegree = 0
          node.style.transform = `rotate(${rotationDegree}deg)`
        }

      }

      if (input.algo === "rotateNodeLeftWithPrompt") {

        return ({message, node}) => {
          const prompt = window.prompt(message)
          if (this.verifyIs("text/+int", prompt)) {
            let degree = parseInt(prompt)
            if (degree >= 0) {
              if (degree === 360) degree = 0
              if (degree > 360) degree = degree - 360
              node.style.transform = `rotate(-${degree}deg)`
            }
          } else {
            node.style.transform = null
          }
        }

      }

      if (input.algo === "rotateNodeRightWithPrompt") {

        return ({message, node}) => {
          const prompt = window.prompt(message)
          if (this.verifyIs("text/+int", prompt)) {
            let degree = parseInt(prompt)
            if (degree >= 0) {
              if (degree === 360) degree = 0
              if (degree > 360) degree = degree - 360
              node.style.transform = `rotate(${degree}deg)`
            }
          } else {
            node.style.transform = null
          }
        }

      }

      if (input.algo === "toggleNode") {

        let originalRemoveNode
        let originalParentNode
        let originalIndex
        return (node) => {
          if (originalRemoveNode) {
            if (originalParentNode) {
              originalParentNode.insertBefore(originalRemoveNode, originalParentNode.childNodes[originalIndex])
            }
            node = originalRemoveNode
            originalRemoveNode = null
            originalParentNode = null
            originalIndex = null
          } else {
            originalParentNode = node.parentElement
            originalIndex = Array.from(originalParentNode.childNodes).indexOf(node)
            originalRemoveNode = node.cloneNode(true)
            node.remove()
          }
        }

      }

      if (input.algo === "toggleStyle") {

        let cache
        return ({key, value, node}) => {
          if (node.style[key] === value) {
            if (cache) {
              node.style[key] = cache
            } else {
              node.style[key] = null
            }
          } else {
            cache = node.style[key]
            node.style[key] = value
          }
        }

      }

      if (input.algo === "toggleStyles") {

        let cache
        return ({styles, node}) => {
          if (cache) {
            node.setAttribute("style", cache)
            cache = undefined
          } else {
            cache = node.getAttribute("style");
            for (const [key, value] of Object.entries(styles)) {
              node.style[key] = value
            }
          }
        }

      }

    }

    if (event === "header/sticky-nav") {

      const header = document.createElement("header")
      header.style.display = "flex"
      header.style.flexDirection = "column"
      header.style.justifyContent = "space-between"

      const headerLogo = document.createElement("img")
      headerLogo.src = "/public/image-placeholder.svg"
      // headerLogo.alt = "SHS Express Logo"
      headerLogo.style.margin = "8px 34px"
      headerLogo.style.width = "144px"
      headerLogo.style.cursor = "pointer"
      // headerLogo.addEventListener("click", () => window.history.back())
      header.append(headerLogo)


      const navContainer = document.createElement("div")
      navContainer.style.display = "flex"
      navContainer.style.justifyContent = "space-evenly"
      navContainer.style.boxShadow = "0 3px 5px rgba(0, 0, 0, 0.13)"

      const button1 = document.createElement("div")
      button1.classList.add("button-1")
      button1.style.display = "flex"
      button1.style.flexDirection = "column"
      button1.style.alignItems = "center"
      button1.style.justifyContent = "center"
      button1.style.width = "89px"
      button1.style.margin = "13px"
      button1.style.cursor = "pointer"
      // button1.addEventListener("click", async() => await checkAndProceed("/felix/shs/abfrage-haus/"))

      const title1 = document.createElement("div")
      title1.innerHTML = "Haus"
      button1.append(title1)

      const index1 = document.createElement("div")
      index1.innerHTML = "1"
      index1.style.color = "white"

      const state1 = document.createElement("div")
      state1.style.display = "flex"
      state1.style.justifyContent = "center"
      state1.style.alignItems = "center"
      state1.style.width = "55px"
      state1.style.height = "34px"
      state1.style.margin = "13px 0"
      state1.style.backgroundColor = "#11841e"
      button1.append(state1)

      state1.append(index1)

      navContainer.append(button1)


      const button2 = document.createElement("div")
      button2.classList.add("button-1")
      button2.style.display = "flex"
      button2.style.flexDirection = "column"
      button2.style.justifyContent = "center"
      button2.style.alignItems = "center"
      button2.style.width = "89px"
      button2.style.margin = "13px"
      button2.style.cursor = "pointer"
      // button2.addEventListener("click", async() => await checkAndProceed("/felix/shs/abfrage-heizung/"))

      const title2 = document.createElement("div")
      title2.innerHTML = "Heizung"
      button2.append(title2)

      const index2 = document.createElement("div")
      index2.innerHTML = "2"
      index2.style.color = "white"

      const state2 = document.createElement("div")
      state2.style.display = "flex"
      state2.style.justifyContent = "center"
      state2.style.alignItems = "center"
      state2.style.width = "55px"
      state2.style.height = "34px"
      state2.style.margin = "13px 0"
      state2.style.backgroundColor = "#11841e"
      button2.append(state2)

      state2.append(index2)

      navContainer.append(button2)



      const button3 = document.createElement("div")
      button3.classList.add("button-1")
      button3.style.display = "flex"
      button3.style.flexDirection = "column"
      button3.style.justifyContent = "center"
      button3.style.alignItems = "center"
      button3.style.width = "89px"
      button3.style.margin = "13px"
      button3.style.cursor = "pointer"
      // button3.addEventListener("click", async() => await checkAndProceed("/felix/shs/abfrage-strom/"))

      const title3 = document.createElement("div")
      title3.innerHTML = "Strom"
      button3.append(title3)

      const index3 = document.createElement("div")
      index3.innerHTML = "3"
      index3.style.color = "white"

      const state3 = document.createElement("div")
      state3.style.display = "flex"
      state3.style.justifyContent = "center"
      state3.style.alignItems = "center"
      state3.style.width = "55px"
      state3.style.height = "34px"
      state3.style.margin = "13px 0"
      state3.style.backgroundColor = "#11841e"
      button3.append(state3)

      state3.append(index3)

      navContainer.append(button3)



      const button4 = document.createElement("div")
      button4.classList.add("button-1")
      button4.style.display = "flex"
      button4.style.flexDirection = "column"
      button4.style.justifyContent = "center"
      button4.style.alignItems = "center"
      button4.style.width = "89px"
      button4.style.margin = "13px"
      button4.style.cursor = "pointer"
      // button4.addEventListener("click", async() => await checkAndProceed("/felix/shs/abfrage-technisches/"))

      const title4 = document.createElement("div")
      title4.innerHTML = "Technisches"
      button4.append(title4)

      const index4 = document.createElement("div")
      index4.innerHTML = "4"
      index4.style.color = "white"

      const state4 = document.createElement("div")
      state4.style.display = "flex"
      state4.style.justifyContent = "center"
      state4.style.alignItems = "center"
      state4.style.width = "55px"
      state4.style.height = "34px"
      state4.style.margin = "13px 0"
      state4.style.backgroundColor = "#11841e"
      button4.append(state4)

      state4.append(index4)

      navContainer.append(button4)


      header.append(navContainer)

      let observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting === false) {
            navContainer.style.position = "fixed"
            navContainer.style.top = "0"
            navContainer.style.left = "0"
            navContainer.style.zIndex = "1"
            navContainer.style.backgroundColor = "white"
            navContainer.style.width = "100%"
          }

          if (entry.isIntersecting === true) {
            navContainer.style.position = "static"
          }

        })
      }, {threshold: 0})
      observer.observe(headerLogo)


      input?.append(header)
      return header

    }

    if (event === "header/info") {

      const header = document.createElement("div")
      header.style.fontFamily = "monospace"
      header.style.fontSize = "13px"
      header.style.position = "fixed"
      header.style.left = "0"
      header.style.bottom = "0"
      header.style.zIndex = "1"
      header.style.maxWidth = "100%"
      header.style.maxHeight = "21px"
      header.style.overflow = "auto"
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        header.style.boxShadow = this.colors.dark.boxShadow
        header.style.border = this.colors.dark.border
        header.style.backgroundColor = this.colors.dark.foreground
        header.style.color = this.colors.dark.text
      } else {
        header.style.boxShadow = this.colors.light.boxShadow
        header.style.border = this.colors.light.border
        header.style.backgroundColor = this.colors.light.foreground
        header.style.color = this.colors.light.text
      }
      input?.append(header)
      return header

    }

    if (event === "header/nav") {

      const header = document.createElement("div")
      header.style.display = "flex"
      header.style.justifyContent = "space-around"
      header.style.alignItems = "center"
      header.style.boxShadow = "0 3px 5px rgba(0, 0, 0, 0.13)"

      header.nav = document.createElement("div")
      header.nav.style.display = "flex"
      header.nav.style.flexDirection = "column"
      header.nav.style.alignItems = "center"
      header.nav.style.width = "89px"
      header.nav.style.cursor = "pointer"
      header.append(header.nav)

      header.nav.text = document.createElement("div")
      header.nav.text.innerHTML = "Mein Link"
      header.nav.append(header.nav.text)

      header.nav.state = document.createElement("div")
      header.nav.state.style.display = "flex"
      header.nav.state.style.justifyContent = "center"
      header.nav.state.style.alignItems = "center"
      header.nav.state.style.width = "55px"
      header.nav.state.style.height = "34px"
      header.nav.state.style.margin = "13px 0"
      header.nav.state.style.backgroundColor = "#cfd4e2"
      header.nav.append(header.nav.state)

      header.nav.state.index = document.createElement("div")
      header.nav.state.index.innerHTML = "1"
      header.nav.state.index.style.color = "white"
      header.nav.state.append(header.nav.state.index)

      if (input !== undefined) input.append(header)
      return header
    }

    if (event === "header/left-right") {

      const header = document.createElement("div")
      header.style.display = "flex"
      header.style.justifyContent = "space-between"
      header.style.alignItems = "center"
      // header.style.boxShadow = "0 3px 5px rgba(0, 0, 0, 0.13)"

      header.left = document.createElement("div")
      header.left.classList.add("left")
      header.left.style.margin = "21px 34px"
      header.left.style.width = "55px"
      header.append(header.left)

      header.left.image = document.createElement("img")
      header.left.image.src = "https://bafybeiefo3y5hr4yb7gad55si2x6ovvoqteqlbxaoqyvlc37bm2ktrruu4.ipfs.nftstorage.link"
      header.left.image.alt = "Mein Logo"
      header.left.image.style.width = "100%"
      header.left.append(header.left.image)

      header.right = document.createElement("div")
      header.right.classList.add("right")
      header.right.style.margin = "21px 34px"
      header.right.innerHTML = "Login"
      header.append(header.right)

      if (input !== undefined) input.append(header)
      return header
    }

    if (event === "header/right") {

      const header = document.createElement("div")
      header.classList.add("header")
      header.style.display = "flex"
      header.style.justifyContent = "flex-end"

      header.right = document.createElement("div")
      header.right.classList.add("right")
      header.right.style.margin = "21px 34px"
      header.right.innerHTML = "Login"
      header.append(header.right)

      if (input !== undefined) input.append(header)
      return header
    }

    if (event === "header/left") {

      const header = document.createElement("header")
      header.style.display = "flex"
      header.style.boxShadow = "0 3px 5px rgba(0, 0, 0, 0.13)"
      header.left = document.createElement("div")
      header.left.classList.add("left")
      header.left.style.margin = "21px 34px"
      header.left.style.width = "55px"
      header.append(header.left)
      header.left.image = document.createElement("img")
      header.left.image.classList.add("logo")
      header.left.image.src = "/public/image.svg"
      header.left.image.alt = "Mein Logo"
      header.left.image.style.width = "100%"
      header.left.append(header.left.image)
      input?.append(header)
      return header

    }

    if (event === "div/timer") {

      var timer = duration, minutes, seconds
      const timerDiv = document.createElement("div")
      const interval = setInterval(function () {
        minutes = parseInt(timer / 60, 10)
        seconds = parseInt(timer % 60, 10)

        minutes = minutes < 10 ? "0" + minutes : minutes
        seconds = seconds < 10 ? "0" + seconds : seconds

        timerDiv.textContent = minutes + ":" + seconds

        if (--timer < 0) {
          timerDiv.textContent = "pin abgelaufen"
          clearInterval(interval)
        }
      }, 1000)

      return interval
    }

    if (event === "div/item-template") {

      const item = document.createElement("div")
      item.classList.add("checklist-item")
      item.style.margin = "34px"

      const itemHeader = document.createElement("div")
      itemHeader.classList.add("item-header")
      itemHeader.style.display = "flex"
      itemHeader.style.borderTopRightRadius = "21px"
      itemHeader.style.borderTopLeftRadius = "21px"
      itemHeader.style.borderBottomLeftRadius = "21px"
      itemHeader.style.backgroundColor = "#d1d0d0"
      itemHeader.style.cursor = "pointer"

      const itemState = document.createElement("div")
      itemState.classList.add("item-state")
      itemState.style.display = "flex"
      itemState.style.justifyContent = "center"
      itemState.style.alignItems = "center"
      itemState.style.width = "89px"
      itemState.style.height = "89px"
      itemState.style.backgroundColor = "#c6c6c6"
      itemState.style.fontSize = "34px"

      itemState.style.borderTopLeftRadius = "21px"
      itemState.style.borderBottomLeftRadius = "21px"

      const itemIndex = document.createElement("div")
      itemIndex.classList.add("item-index")
      itemIndex.innerHTML = "client.reputation"
      itemIndex.style.fontSize = "21px"

      itemState.append(itemIndex)


      const itemTitle = document.createElement("div")
      itemTitle.classList.add("item-title")
      itemTitle.style.alignSelf = "center"
      itemTitle.style.marginLeft = "13px"
      itemTitle.innerHTML = "`${client.firstname} ${client.lastname}`"
      itemTitle.style.fontSize = "21px"

      itemHeader.append(itemState, itemTitle)
      item.append(itemHeader)


      const itemBody = document.createElement("div")
      itemBody.classList.add("item-body")
      itemBody.style.marginLeft = "8%"
      itemBody.style.backgroundColor = "#dbdbdb"
      itemBody.style.borderBottomRightRadius = "21px"
      itemBody.style.borderBottomLeftRadius = "21px"
      itemBody.style.padding = "21px"
      itemBody.style.display = "flex"
      itemBody.style.flexDirection = "column"
      itemBody.style.boxShadow = "0 3px 5px rgba(0, 0, 0, 0.13)"

      const buttons = document.createElement("div")
      buttons.style.display = "flex"
      buttons.style.alignItems = "center"

      {
        const button = document.createElement("img")
        button.src = "/public/phone-out.svg"
        button.alt = "Anrufen"
        button.style.width = "55px"
        button.style.padding = "13px"
        button.style.cursor = "pointer"
        buttons.append(button)
      }

      {
        const button = document.createElement("img")
        button.src = "/public/mailto.svg"
        button.alt = "E-Mail schreiben"
        button.style.width = "55px"
        button.style.padding = "13px"
        button.style.cursor = "pointer"
        buttons.append(button)
      }

      {
        const button = document.createElement("img")
        button.src = "/public/maps.svg"
        button.alt = "Navigieren"
        button.style.width = "55px"
        button.style.padding = "13px"
        button.style.cursor = "pointer"
        buttons.append(button)
      }

      itemBody.append(buttons)
      item.append(itemBody)

      input?.append(item)
      return item


    }

    if (event === "div/offer-template") {

      const div = this.create("div/scrollable")
      console.log(div);

      const offer = document.createElement("div")
      offer.style.backgroundColor = "white"
      offer.style.borderRadius = "13px"
      offer.style.margin = "34px"
      offer.style.padding = "34px"
      offer.style.boxShadow = "0 3px 6px rgba(0, 0, 0, 0.16)"

      const alignLogo = document.createElement("div")
      alignLogo.style.display = "flex"
      alignLogo.style.justifyContent = "flex-end"

      const logo = document.createElement("img")
      logo.src = "/public/image-placeholder.svg"
      logo.alt = "Bestprime Logo"
      logo.style.width = "55vw"
      logo.style.maxWidth = "377px"

      alignLogo.append(logo)

      offer.append(alignLogo)

      const company = document.createElement("div")
      company.innerHTML = "offers[i].producer.company"
      company.style.margin = "21px 0"
      company.style.fontSize = "21px"

      offer.append(company)

      const website = document.createElement("div")
      website.style.display = "flex"
      website.style.alignItems = "center"

      const websiteIcon = document.createElement("img")
      websiteIcon.src = "/felix/shs/public/website-icon.svg"
      websiteIcon.alt = "Website Icon"

      const websiteText = document.createElement("a")
      websiteText.innerHTML = "Website"
      websiteText.href = "offers[i].producer.website"
      websiteText.target = "_blank"
      websiteText.style.textDecoration = "underline"
      websiteText.style.margin = "8px"
      websiteText.style.cursor = "pointer"

      website.append(websiteIcon, websiteText)

      offer.append(website)


      const product = document.createElement("div")
      product.innerHTML = "offers[i].producer.product"
      product.style.marginTop = "34px"
      product.style.fontSize = "21px"


      offer.append(product)


      const description = document.createElement("div")
      description.innerHTML = "offers[i].producer.description"
      description.style.marginTop = "13px"

      offer.append(description)


      const alignContainer = document.createElement("div")
      alignContainer.style.display = "flex"
      alignContainer.style.justifyContent = "flex-end"

      const priceContainer = document.createElement("div")
      priceContainer.style.width = "300px"
      priceContainer.style.marginTop = "21px"

      const priceTitle = document.createElement("div")
      priceTitle.innerHTML = "Preisübersicht"
      priceTitle.style.fontSize = "21px"
      priceTitle.style.margin = "21px 0"


      priceContainer.append(priceTitle)

      const netContainer = document.createElement("div")
      netContainer.style.display = "flex"
      netContainer.style.justifyContent = "space-between"
      netContainer.style.margin = "13px 0"

      const priceNetTitle = document.createElement("div")
      priceNetTitle.innerHTML = "Nettobetrag"

      const priceNetAmount = document.createElement("div")
      priceNetAmount.innerHTML = "netto price"// `${offers[i].grossAmount.toFixed(2).replace(".", ",")} €`

      netContainer.append(priceNetTitle, priceNetAmount)

      priceContainer.append(netContainer)



      const vatContainer = document.createElement("div")
      vatContainer.style.display = "flex"
      vatContainer.style.justifyContent = "space-between"
      vatContainer.style.margin = "13px 0"


      const priceVatTitle = document.createElement("div")
      priceVatTitle.innerHTML = "vat price" // `USt. ${(offers[i].vat * 100).toFixed(2).replace(".", ",")} %`

      const priceVatAmount = document.createElement("div")
      priceVatAmount.innerHTML = "vat price amount" // `${(offers[i].grossAmount * 0.19).toFixed(2).replace(".", ",")} €`

      vatContainer.append(priceVatTitle, priceVatAmount)

      priceContainer.append(vatContainer)

      const line = document.createElement("hr")

      priceContainer.append(line)


      const grossContainer = document.createElement("div")
      grossContainer.style.display = "flex"
      grossContainer.style.justifyContent = "space-between"
      grossContainer.style.margin = "21px 0"

      const priceGrossTitle = document.createElement("div")
      priceGrossTitle.innerHTML = "Gesamt"

      const priceGrossAmount = document.createElement("div")
      priceGrossAmount.innerHTML = "gross amount" // `${(offers[i].grossAmount * 1.19).toFixed(2).replace(".", ",")} €`

      grossContainer.append(priceGrossTitle, priceGrossAmount)

      priceContainer.append(grossContainer)


      const button = document.createElement("div")
      button.innerHTML = "Weiter zum Angebot"
      button.style.marginTop = "34px"
      button.style.height = "55px"
      button.style.backgroundColor = "#f7aa20"
      button.style.borderRadius = "13px"
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.cursor = "pointer"
      button.addEventListener("mouseover", () => button.style.backgroundColor = "#f19d08")
      button.addEventListener("mouseout", () => button.style.backgroundColor = "#f7aa20")

      // button.addEventListener("click", () => {
      //
      //   for (let i = 0; i < offers.length; i++) {
      //     offers[i].selected = false
      //   }
      //
      //   offers[i].selected = true
      //   window.localStorage.setItem("offers", JSON.stringify(offers))
      //   window.location.assign("/felix/shs/abfrage-persoenliches/")
      // })

      priceContainer.append(button)
      alignContainer.append(priceContainer)
      offer.append(alignContainer)
      div.append(offer)

      input?.append(div)
      return div

    }

    if (event === "div/bottom-left") {

      const div = document.createElement("div")
      div.style.fontFamily = "monospace"
      div.style.fontSize = "13px"
      div.style.position = "fixed"
      div.style.left = "0"
      div.style.bottom = "0"
      div.style.zIndex = "1"
      div.style.maxWidth = "100%"
      div.style.maxHeight = "21px"
      div.style.overflow = "auto"

      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        div.style.boxShadow = this.colors.dark.boxShadow
        div.style.border = this.colors.dark.border
        div.style.backgroundColor = this.colors.dark.foreground
        div.style.color = this.colors.dark.text
      } else {
        div.style.boxShadow = this.colors.light.boxShadow
        div.style.border = this.colors.light.border
        div.style.backgroundColor = this.colors.light.foreground
        div.style.color = this.colors.light.text
      }

      if (input !== undefined) input.append(div)
      return div
    }

    if (event === "div/progress-bar") {

      const progress = document.createElement("div")
      progress.classList.add("progress-container")
      progress.style.display = "flex"
      progress.style.height = "21px"
      progress.style.margin = "21px"
      progress.style.position = "relative"
      input?.append(progress)

      progress.bar = document.createElement("div")
      progress.bar.classList.add("progress-bar")
      progress.bar.style.height = "21px"
      progress.bar.style.backgroundColor = "#4CAF50"
      progress.bar.style.width = "0%"
      progress.bar.style.position = "absolute"
      progress.bar.style.transition = "width 0.3s ease"
      progress.append(progress.bar)

      return progress

    }

    if (event === "div/top-bottom") {

      const field = document.createElement("div")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.top = document.createElement("div")
      field.top.classList.add("top")
      field.top.style.display = "flex"
      field.top.style.alignItems = "center"
      field.top.style.margin = "21px 89px 0 34px"
      field.append(field.top)

      field.bottom = document.createElement("div")
      field.bottom.classList.add("bottom")
      field.bottom.type = "text"
      field.bottom.style.margin = "21px 89px 21px 34px"
      field.bottom.style.fontSize = "21px"
      field.append(field.bottom)

      field.style.backgroundColor = this.colors.light.foreground
      field.style.border = this.colors.light.border
      field.style.boxShadow = this.colors.light.boxShadow
      field.style.color = this.colors.light.text
      field.bottom.style.backgroundColor = this.colors.light.background
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        field.style.backgroundColor = this.colors.dark.foreground
        field.style.border = this.colors.dark.border
        field.style.boxShadow = this.colors.dark.boxShadow
        field.style.color = this.colors.dark.text
        field.bottom.style.backgroundColor = this.colors.dark.background
      }

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "div/match-maker-list") {

      return new Promise(async(resolve, reject) => {
        try {

          const sorted = input.list
          sorted.sort((a, b) => {
            return b.reputation - a.reputation // Descending order, for ascending use: a.reputation - b.reputation
          })

          const userList = this.create("div/scrollable")
          userList.setAttribute("id", `match-maker-list-${input.name}`)

          const matchMaker = document.querySelector(`[match-maker="${input.name}"]`)

          if (matchMaker !== null) {

            const tags = []
            matchMaker.querySelectorAll("*").forEach(element => {
              if (element.hasAttribute("user-data")) {
                tags.push(element.getAttribute("user-data"))
              }
            })

            const ids = []
            for (let i = 0; i < sorted.length; i++) {
              const map = sorted[i]

              const clone = document.createElement("div")
              clone.innerHTML = matchMaker.innerHTML
              clone.setAttribute("id", map.id)
              clone.setAttribute("style", this.convert("styles/text", matchMaker))

              ids.push(map.id)

              Object.entries(map.funnel).forEach(([key, value]) => {
                clone.querySelectorAll(`.${key}`).forEach(element => {

                  if (element.tagName === "IMG") {
                    element.src = value
                  } else {
                    element.innerHTML = value
                  }

                })

              })

              userList.append(clone)

            }

            const res = await this.get("user-tags/location-list/closed", {tags, ids})

            if (res.status === 200) {
              const data = JSON.parse(res.response)

              for (let i = 0; i < userList.children.length; i++) {
                const child = userList.children[i]


                Object.entries(data).forEach(([key, value]) => {

                  if (child.id === key) {

                    Object.entries(value).forEach(([key, value]) => {

                      child.querySelectorAll("[user-data]").forEach(element => {
                        if (element.getAttribute("user-data") === key) {

                          if (element.tagName === "IMG") {
                            element.src = value
                          } else {
                            element.innerHTML = value
                          }

                        }
                      })

                    })

                  }

                })

              }

            }

            const userLists = document.querySelectorAll(`#match-maker-list-${input.name}`)

            if (userLists.length === 0) {
              matchMaker.before(userList)
              matchMaker.style.display = "none"
            }

            if (userList.children.length === 0) {
              this.convert("parent/info", userList)
              userList.innerHTML = "Keine Daten gefunden."
              throw new Error("list is empty")
            }

            resolve(userList)

          }

          if (matchMaker === null) {
            // todo default design
          }


        } catch (error) {
          reject(error)
        }
      })


    }

    if (event === "div/key-value") {

      const div = document.createElement("div")
      div.classList.add("key-value")
      div.style.display = "flex"
      div.style.justifyContent = "space-between"
      div.style.width = "144px"
      div.key = document.createElement("div")
      div.key.classList.add("key")
      div.key.textContent = "Schlüssel:"
      div.key.style.fontFamily = "sans-serif"
      div.append(div.key)
      div.value = document.createElement("div")
      div.value.classList.add("value")
      div.value.textContent = "Wert"
      div.value.style.fontFamily = "sans-serif"
      div.value.style.fontWeight = "bold"
      div.append(div.value)
      input?.appendChild(div)
      return div

    }

    if (event === "div/image") {
      const div = document.createElement("div")
      div.className = "image"
      div.style.width = "144px"
      div.image = document.createElement("img")
      div.image.src = input
      div.image.style.width = "100%"
      div.appendChild(div.image)
      return div
    }

    if (event === "div/image-text") {
      const div = document.createElement("div")
      div.classList.add("image-text")
      div.style.display = "flex"
      div.style.flexDirection = "column"
      div.style.alignItems = "center"
      div.image = document.createElement("img")
      div.image.src = "/public/image.svg"
      div.image.style.width = "144px"
      div.appendChild(div.image)
      div.text = document.createElement("p")
      div.text.textContent = "Titel"
      div.text.style.fontFamily = "sans-serif"
      div.text.style.fontWeight = "bold"
      div.appendChild(div.text)
      input?.appendChild(div)
      return div
    }

    if (event === "div/flex-row") {
      const div = document.createElement("div")
      div.style.display = "flex"
      div.style.justifyContent = "space-around"
      div.style.flexWrap = "wrap"
      div.style.margin = "21px 34px"

      if (input !== undefined) input.append(div)

      return div
    }

    if (event === "div/box-overview") {

      const offer = document.createElement("div")
      offer.classList.add("box")
      offer.style.backgroundColor = "white"
      offer.style.borderRadius = "13px"
      offer.style.margin = "34px"
      offer.style.padding = "34px"
      offer.style.boxShadow = "0 3px 6px rgba(0, 0, 0, 0.16)"

      const alignLogo = document.createElement("div")
      alignLogo.classList.add("image-container")
      alignLogo.style.display = "flex"
      alignLogo.style.justifyContent = "flex-end"

      const logo = document.createElement("img")
      logo.classList.add("image")
      logo.src = "meine-quell-url.de"
      logo.alt = "Mein Logo Image"
      logo.style.width = "55vw"
      logo.style.maxWidth = "377px"

      alignLogo.append(logo)

      offer.append(alignLogo)

      const company = document.createElement("div")
      company.classList.add("company")
      company.innerHTML = "Meine Firma"
      company.style.margin = "21px 0"
      company.style.fontSize = "21px"

      offer.append(company)

      const website = document.createElement("div")
      website.style.display = "flex"
      website.style.alignItems = "center"

      const websiteIcon = document.createElement("img")
      websiteIcon.src = "mein-icon-url.de"
      websiteIcon.alt = "Website Icon"

      const websiteText = document.createElement("a")
      websiteText.innerHTML = "Website"
      websiteText.href = "www.website.de"
      websiteText.target = "_blank"
      websiteText.style.textDecoration = "underline"
      websiteText.style.margin = "8px"
      websiteText.style.cursor = "pointer"

      website.append(websiteIcon, websiteText)

      offer.append(website)


      const product = document.createElement("div")
      product.innerHTML = "Produkt Titel"
      product.style.marginTop = "34px"
      product.style.fontSize = "21px"


      offer.append(product)


      const description = document.createElement("div")
      description.innerHTML = "Produktbeschreibung"
      description.style.marginTop = "13px"

      offer.append(description)


      const alignContainer = document.createElement("div")
      alignContainer.style.display = "flex"
      alignContainer.style.justifyContent = "flex-end"

      const priceContainer = document.createElement("div")
      priceContainer.style.width = "300px"
      priceContainer.style.marginTop = "21px"

      const priceTitle = document.createElement("div")
      priceTitle.innerHTML = "Preisübersicht"
      priceTitle.style.fontSize = "21px"
      priceTitle.style.margin = "21px 0"


      priceContainer.append(priceTitle)

      const netContainer = document.createElement("div")
      netContainer.style.display = "flex"
      netContainer.style.justifyContent = "space-between"
      netContainer.style.margin = "13px 0"

      const priceNetTitle = document.createElement("div")
      priceNetTitle.innerHTML = "Nettobetrag"

      const priceNetAmount = document.createElement("div")
      priceNetAmount.innerHTML = `100 €`

      netContainer.append(priceNetTitle, priceNetAmount)

      priceContainer.append(netContainer)



      const vatContainer = document.createElement("div")
      vatContainer.style.display = "flex"
      vatContainer.style.justifyContent = "space-between"
      vatContainer.style.margin = "13px 0"


      const priceVatTitle = document.createElement("div")
      priceVatTitle.innerHTML = `USt. 19 %`

      const priceVatAmount = document.createElement("div")
      priceVatAmount.innerHTML = `10 €`

      vatContainer.append(priceVatTitle, priceVatAmount)

      priceContainer.append(vatContainer)

      const line = document.createElement("hr")

      priceContainer.append(line)


      const grossContainer = document.createElement("div")
      grossContainer.style.display = "flex"
      grossContainer.style.justifyContent = "space-between"
      grossContainer.style.margin = "21px 0"

      const priceGrossTitle = document.createElement("div")
      priceGrossTitle.innerHTML = "Gesamt"

      const priceGrossAmount = document.createElement("div")
      priceGrossAmount.classList.add("price")
      priceGrossAmount.innerHTML = `10€`

      grossContainer.append(priceGrossTitle, priceGrossAmount)

      priceContainer.append(grossContainer)


      const button = document.createElement("div")
      button.classList.add("submit")
      button.innerHTML = "Weiter zum Angebot"
      button.style.marginTop = "34px"
      button.style.height = "55px"
      button.style.backgroundColor = "#f7aa20"
      button.style.borderRadius = "13px"
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.cursor = "pointer"
      button.addEventListener("mouseover", () => button.style.backgroundColor = "#f19d08")
      button.addEventListener("mouseout", () => button.style.backgroundColor = "#f7aa20")

      priceContainer.append(button)
      alignContainer.append(priceContainer)
      offer.append(alignContainer)
      //div.append(offer)

      if (input !== undefined) input.append(offer)

      return offer



    }

    if (event === "div/user-list") {

      return new Promise(async(resolve, reject) => {
        try {

          const userList = document.createElement("div")
          userList.classList.add("user-list")
          document.querySelectorAll(`[match-maker="${parent}"]`).forEach(matchMaker => {

            for (let i = 0; i < input.length; i++) {
              const mirror = input[i]

              const clone = document.createElement("div")
              clone.innerHTML = matchMaker.innerHTML
              clone.classList.add(`user-${i + 1}`)

              for (let i = 0; i < mirror.treeValues.length; i++) {
                const treeValuePair = mirror.treeValues[i]
                clone.querySelectorAll(`#${treeValuePair.tree}`).forEach(container => {
                  container.innerHTML = treeValuePair.value
                })
              }

              userList.append(clone.cloneNode())

            }

          })
          console.log("inside promise", userList);

          // resolve(userList)

        } catch (error) {
          reject(error)
        }
      })


    }

    if (event === "div/action") {
      const div = document.createElement("div")

      div.style.backgroundColor = this.colors.matte.sunflower
      div.style.color = this.colors.matte.black
      div.style.boxShadow = this.colors.light.boxShadow
      div.style.cursor = "pointer"
      div.style.fontSize = "21px"
      div.style.fontFamily = "sans-serif"
      div.style.borderRadius = "13px"
      div.style.margin = "21px 34px"
      div.style.display = "flex"
      div.style.justifyContent = "center"
      div.style.alignItems = "center"
      div.style.height = "55px"
      div.style.width = "89px"

      if (input !== undefined) input.append(div)
      return div
    }

    if (event === "div") {
      const div = document.createElement("div")

      if (input !== undefined) input.append(div)
      return div
    }

    if (event === "div/overlay") {
      const div = document.createElement("div")
      div.classList.add("overlay")
      div.style.display = "flex"
      div.style.flexDirection = "column"
      div.style.height = "100%"
      div.style.width = "100%"
      div.style.zIndex = Number.MAX_SAFE_INTEGER.toString()
      div.style.overscrollBehavior = "none"
      div.style.position = "fixed"
      div.style.top = "0"
      div.style.left = "0"
      div.style.background = this.colors.light.background
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        div.style.background = this.colors.dark.background
      }
      input?.append(div)
      return div
    }

    if (event === "div/scrollable") {
      const div = document.createElement("div")
      div.style.overflowY = "auto"
      div.style.overscrollBehavior = "none"
      div.style.paddingBottom = "144px"

      if (input !== undefined) input.append(div)

      return div
    }

    if (event === "div/service-box") {

      const div = document.createElement("div")
      div.className = "service-box"
      div.style.display = "flex"
      div.style.flexWrap = "wrap"
      div.style.margin = "21px 34px"
      div.style.padding = "8px"
      div.style.borderRadius = "3px"
      div.style.boxShadow = "rgba(0, 0, 0, 0.16) 0px 1px 4px"

      const checkboxWrapper = document.createElement("div")
      checkboxWrapper.className = "checkbox-wrapper"
      checkboxWrapper.style.width = "89px"
      checkboxWrapper.style.display = "flex"
      checkboxWrapper.style.justifyContent = "center"
      checkboxWrapper.style.alignItems = "center"
      div.checkbox = document.createElement("input")
      div.checkbox.type = "checkbox"
      div.checkbox.style.transform = "scale(2)"
      checkboxWrapper.append(div.checkbox)
      div.append(checkboxWrapper)

      div.service = document.createElement("div")
      div.service.className = "service"
      div.service.style.minWidth = "233px"
      div.service.style.display = "flex"
      div.service.style.flexDirection = "column"
      div.service.style.margin = "21px 34px"
      div.service.style.fontSize = "21px"
      div.service.style.fontFamily = "sans-serif"
      div.service.style.flex = "1 1 0px"
      div.appendChild(div.service)

      div.quantity = document.createElement("div")
      div.quantity.className = "quantity"
      div.quantity.style.fontFamily = "sans-serif"
      div.quantity.style.fontSize = "34px"
      div.quantity.style.display = "flex"
      div.quantity.style.alignItems = "center"
      div.quantity.style.justifyContent = "flex-end"
      div.quantity.style.margin = "21px 34px"
      div.appendChild(div.quantity)

      div.singlePrice = document.createElement("div")
      div.singlePrice.className = "single-price"
      div.singlePrice.style.width = "233px"
      div.singlePrice.style.fontFamily = "sans-serif"
      div.singlePrice.style.fontSize = "34px"
      div.singlePrice.style.display = "flex"
      div.singlePrice.style.alignItems = "center"
      div.singlePrice.style.justifyContent = "flex-end"
      div.singlePrice.style.margin = "21px 34px"
      div.appendChild(div.singlePrice)

      div.totalPrice = document.createElement("div")
      div.totalPrice.className = "total-price"
      div.totalPrice.style.width = "233px"
      div.totalPrice.style.fontFamily = "sans-serif"
      div.totalPrice.style.fontSize = "34px"
      div.totalPrice.style.display = "flex"
      div.totalPrice.style.alignItems = "center"
      div.totalPrice.style.justifyContent = "flex-end"
      div.totalPrice.style.margin = "21px 34px"
      div.appendChild(div.totalPrice)

      input?.append(div)
      return div
    }

    if (event === "button/key-value-color") {

      const button = this.create("div")
      button.classList.add("color")
      button.style.display = "flex"
      button.style.flexDirection = "column"
      button.style.justifyContent = "space-between"
      button.style.fontFamily = "sans-serif"
      button.style.width = "89px"
      button.style.height = "55px"
      button.style.margin = "3px"
      button.style.overflow = "auto"
      button.style.padding = "5px"
      button.style.cursor = "pointer"
      button.style.borderRadius = "3px"
      button.style.backgroundColor = input.value

      button.key = this.create("div", button)
      button.key.classList.add("key")
      button.key.style.color = this.colors.light.text
      button.key.innerHTML = input.key

      button.value = this.create("div", button)
      button.value.classList.add("value")
      button.value.style.fontFamily = "monospace"
      button.value.style.color = this.colors.dark.text
      button.value.innerHTML = input.value

      return button
    }

    if (event === "button/thumb-down") {

      const button = document.createElement("div")
      button.innerHTML = "👎"
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.width = "89px"
      button.style.height = "55px"
      button.style.background = "rgb(204,50,50)"
      button.style.borderRadius = "8px"
      button.style.fontSize = "21px"

      input?.append(button)
      return button
    }

    if (event === "button/thumb-up") {

      const button = document.createElement("div")
      button.innerHTML = "👍"
      button.style.background = "rgb(45,201,55)"
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.height = "55px"
      button.style.width = "89px"
      button.style.color = "white"
      button.style.borderRadius = "8px"
      button.style.fontSize = "21px"

      input?.append(button)
      return button
    }

    if (event === "button/class") {

      const button = this.create("button/icon")
      button.icon = this.create("div")
      button.icon.classList.add("icon")
      button.icon.style.width = "100%"
      button.icon.style.display = "flex"
      button.icon.style.justifyContent = "center"
      button.icon.style.alignItems = "center"
      button.icon.style.fontFamily = "monospace"
      button.icon.style.fontSize = "34px"
      button.icon.innerHTML = "cl"
      button.append(button.icon)
      button.icon.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.icon.style.color = this.colors.dark.text
      }
      input?.append(button)
      return button

    }

    if (event === "button/id") {

      const button = this.create("button/icon")
      button.icon = this.create("div")
      button.icon.classList.add("icon")
      button.icon.style.width = "100%"
      button.icon.style.display = "flex"
      button.icon.style.justifyContent = "center"
      button.icon.style.alignItems = "center"
      button.icon.style.fontFamily = "monospace"
      button.icon.style.fontSize = "34px"
      button.icon.innerHTML = "id"
      button.append(button.icon)
      button.icon.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.icon.style.color = this.colors.dark.text
      }
      input?.append(button)
      return button

    }

    if (event === "button/save") {

      const button = document.createElement("div")
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.position = "fixed"
      button.style.bottom = "0"
      button.style.right = "0"
      this.render("icon/node/path", "/public/disk-floppy.svg", button).then(icon => {
        icon.style.width = "34px"
      })
      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.boxShadow = this.colors.dark.boxShadow
        button.style.border = this.colors.dark.border
        button.style.backgroundColor = this.colors.dark.foreground
      }
      button.style.borderRadius = "50%"
      button.style.margin = "34px"
      button.style.padding = "21px"
      button.style.zIndex = "1"
      button.style.cursor = "pointer"
      input?.append(button)
      return button

    }

    if (event === "button/app") {
      const button = document.createElement("div")
      button.className = "button"
      button.style.position = "fixed"
      button.style.bottom = "0"
      button.style.right = "0"
      button.style.width = "34px"
      button.style.height = "34px"
      button.style.borderRadius = "50%"
      button.style.margin = "34px"
      button.style.padding = "21px"
      button.style.zIndex = "1"
      button.style.cursor = "pointer"
      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.boxShadow = this.colors.dark.boxShadow
        button.style.border = this.colors.dark.border
        button.style.backgroundColor = this.colors.dark.foreground
      }

      input?.append(button)
      return button
    }

    if (event === "button/bottom-left") {

      const button = document.createElement("div")
      button.className = "button"
      button.style.position = "fixed"
      button.style.bottom = "0"
      button.style.left = "0"
      button.style.width = "34px"
      button.style.height = "34px"
      button.style.borderRadius = "50%"
      button.style.margin = "34px"
      button.style.padding = "21px"
      button.style.zIndex = "1"
      button.style.cursor = "pointer"
      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.boxShadow = this.colors.dark.boxShadow
        button.style.border = this.colors.dark.border
        button.style.backgroundColor = this.colors.dark.foreground
      }
      input?.append(button)
      return button

    }

    if (event === "button/bottom-right") {

      const button = document.createElement("div")
      button.className = "button"
      button.style.position = "fixed"
      button.style.bottom = "0"
      button.style.right = "0"
      button.style.width = "34px"
      button.style.height = "34px"
      button.style.borderRadius = "50%"
      button.style.margin = "34px"
      button.style.padding = "21px"
      button.style.zIndex = "1"
      button.style.cursor = "pointer"
      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.boxShadow = this.colors.dark.boxShadow
        button.style.border = this.colors.dark.border
        button.style.backgroundColor = this.colors.dark.foreground
      }
      input?.append(button)
      return button

    }

    if (event === "button/icon") {

      const button = this.create("div")
      button.classList.add("button")
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.width = "55px"
      button.style.height = "55px"
      button.style.margin = "21px"
      button.style.padding = "13px"
      button.style.cursor = "pointer"
      button.style.borderRadius = "13px"
      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.boxShadow = this.colors.dark.boxShadow
        button.style.border = this.colors.dark.border
        button.style.backgroundColor = this.colors.dark.foreground
      }
      input?.append(button)
      return button

    }

    if (event === "button/icon-text") {

      const button = document.createElement("div")
      button.style.display = "flex"
      button.style.flexDirection = "column"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.cursor = "pointer"
      button.style.borderRadius = "50%"
      button.style.width = "144px"
      button.style.height = "144px"
      button.style.background = this.colors.light.foreground
      button.style.border = this.colors.light.border
      button.style.boxShadow = this.colors.light.boxShadow
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.background = this.colors.dark.foreground
        button.style.border = this.colors.dark.border
        button.style.boxShadow = this.colors.dark.boxShadow
      }
      button.icon = document.createElement("div")
      button.icon.classList.add("icon")
      button.icon.style.width = "55px"
      button.append(button.icon)
      button.text = document.createElement("div")
      button.text.classList.add("text")
      button.text.style.fontFamily = "sans-serif"
      button.text.style.fontSize = "21px"
      button.text.style.margin = "13px"
      button.text.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.text.style.color = this.colors.dark.text
      }
      button.append(button.text)
      input?.append(button)
      return button

    }

    if (event === "button/image-box") {

      const button = this.create("button/top-bottom")
      button.style.justifyContent = "center"
      button.style.alignItems = "center"

      button.image = document.createElement("img")
      button.image.src = "https://bafybeiefo3y5hr4yb7gad55si2x6ovvoqteqlbxaoqyvlc37bm2ktrruu4.ipfs.nftstorage.link"
      button.top.append(button.image)
      button.top.classList.add("image")
      button.top.style.width = "55px"
      button.top.style.margin = "21px 34px"

      button.bottom.innerHTML = "Mein Button"
      button.bottom.classList.add("info")
      button.bottom.style.margin = "21px 34px"
      button.bottom.style.textAlign = "center"
      button.bottom.style.fontSize = "21px"
      button.bottom.style.fontFamily = "sans-serif"

      input?.append(button)
      return button
    }

    if (event === "button/getyour") {

      const button = this.create("button/bottom-right")
      this.render("icon/node/path", "/public/logo-getyour-red.svg", button)
      input?.append(button)
      return button

    }

    if (event === "button/add") {

      const button = this.create("button/bottom-right")
      button.classList.add("add")
      this.render("icon/node/path", "/public/add.svg", button)
      input?.append(button)
      return button

    }

    if (event === "button/back") {

      const button = this.create("button/bottom-left")
      button.classList.add("back")
      this.render("icon/node/path", "/public/arrow-back.svg", button)
      button.setAttribute("onclick", "window.history.back()")
      input?.append(button)
      return button

    }

    if (event === "button/action") {
      const div = document.createElement("div")

      div.style.backgroundColor = this.colors.matte.sunflower
      div.style.color = this.colors.matte.black
      div.style.boxShadow = this.colors.light.boxShadow
      div.style.cursor = "pointer"
      div.style.fontSize = "21px"
      div.style.fontFamily = "sans-serif"
      div.style.borderRadius = "13px"
      div.style.margin = "21px 34px"
      div.style.display = "flex"
      div.style.justifyContent = "center"
      div.style.alignItems = "center"
      div.style.height = "89px"

      if (input !== undefined) input.append(div)
      return div
    }

    if (event === "button/top-bottom") {

      const button = document.createElement("div")
      button.classList.add("button")
      button.style.display = "flex"
      button.style.flexDirection = "column"
      button.style.margin = "21px 34px"
      button.style.borderRadius = "13px"
      button.style.overflow = "hidden"
      button.style.cursor = "pointer"

      button.top = document.createElement("div")
      button.top.classList.add("top")
      button.append(button.top)

      button.bottom = document.createElement("div")
      button.bottom.classList.add("bottom")
      button.append(button.bottom)

      button.style.backgroundColor = this.colors.gray[0]
      button.style.border = this.colors.light.border
      button.style.color = this.colors.light.text
      button.style.boxShadow = this.colors.light.boxShadow
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.backgroundColor = this.colors.matte.black
        button.style.border = this.colors.dark.border
        button.style.boxShadow = this.colors.dark.boxShadow
        button.style.color = this.colors.dark.text
      }

      if (input !== undefined) input.append(button)
      return button
    }

    if (event === "button/left-right") {

      const button = document.createElement("div")
      button.classList.add("button")
      button.style.display = "flex"
      button.style.flexWrap = "wrap"
      button.style.justifyContent = "space-between"
      button.style.alignItems = "center"
      button.style.margin = "21px 34px"
      button.style.borderRadius = "13px"
      button.style.cursor = "pointer"

      button.left = document.createElement("div")
      button.left.classList.add("left")
      button.left.style.margin = "21px 34px"
      button.left.style.fontSize = "21px"
      button.left.style.fontFamily = "sans-serif"
      button.left.style.overflow = "auto"
      button.append(button.left)

      button.right = document.createElement("div")
      button.right.classList.add("right")
      button.right.style.margin = "21px 34px"
      button.right.style.fontSize = "13px"
      button.right.style.fontFamily = "sans-serif"
      button.append(button.right)

      button.style.backgroundColor = this.colors.gray[0]
      button.style.border = this.colors.light.border
      button.style.color = this.colors.light.text
      button.style.boxShadow = this.colors.light.boxShadow
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.backgroundColor = this.colors.matte.black
        button.style.border = this.colors.dark.border
        button.style.boxShadow = this.colors.dark.boxShadow
        button.style.color = this.colors.dark.text
      }

      if (input !== undefined) input.append(button)

      return button
    }

    if (event === "button/remove-overlay") {

      const button = document.createElement("div")
      this.render("icon/node/path", "/public/arrow-back.svg", button)
      button.style.width = "34px"
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.position = "fixed"
      button.style.bottom = "0"
      button.style.left = "0"
      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.boxShadow = this.colors.dark.boxShadow
        button.style.border = this.colors.dark.border
        button.style.backgroundColor = this.colors.dark.foreground
      }
      button.style.borderRadius = "50%"
      button.style.margin = "34px"
      button.style.padding = "21px"
      button.style.zIndex = "1"
      button.style.cursor = "pointer"
      input?.append(button)
      return button
    }

    if (event === "button/branch") {

      const button = document.createElement("div")
      button.style.cursor = "pointer"
      button.style.position = "relative"
      this.render("icon/node/path", "/public/branch.svg", button).then(icon => {
        icon.style.width = "55px"
      })
      button.counter = document.createElement("div")
      button.counter.style.position = "absolute"
      button.counter.style.top = "0"
      button.counter.style.right = "0"
      button.counter.style.fontFamily = "monospace"
      button.counter.style.fontSize = "13px"
      button.counter.style.borderRadius = "50%"
      button.counter.style.padding = "3px 5px"
      button.counter.innerHTML = "0"
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.counter.style.color = this.colors.dark.text
        button.counter.style.background = this.colors.dark.foreground
      } else {
        button.counter.style.color = this.colors.light.text
        button.counter.style.background = this.colors.light.foreground
      }
      button.append(button.counter)
      input?.append(button)
      return button

    }

    if (event === "button/html-feedback") {

      const button = this.create("button/branch")
      button.classList.add("html-feedback-button")
      button.counter.classList.add("feedback-counter")

      button.style.position = "fixed"
      button.style.bottom = "0"
      button.style.right = "0"
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"

      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.backgroundColor = this.colors.dark.foreground
        button.style.border = this.colors.dark.border
        button.style.boxShadow = this.colors.dark.boxShadow
      }

      button.style.borderRadius = "50%"
      button.style.margin = "34px"
      button.style.padding = "8px"
      button.style.zIndex = "1"
      button.style.cursor = "pointer"

      input?.append(button)
      return button

    }

    if (event === "button/tools") {

      const button = document.createElement("div")
      this.render("icon/node/path", "/public/pencil-ruler.svg", button).then(icon => {
        icon.style.width = "34px"
      })
      button.style.position = "fixed"
      button.style.bottom = "0"
      button.style.right = "0"
      button.style.display = "flex"
      button.style.justifyContent = "center"
      button.style.alignItems = "center"
      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        button.style.backgroundColor = this.colors.dark.foreground
        button.style.border = this.colors.dark.border
        button.style.boxShadow = this.colors.dark.boxShadow
      }
      button.style.borderRadius = "50%"
      button.style.margin = "34px"
      button.style.padding = "21px"
      button.style.zIndex = "1"
      button.style.cursor = "pointer"
      input?.append(button)
      return button

    }

    if (event === "button/role-apps") {


      const button = document.createElement("div")
      button.classList.add("role-apps-button")
      button.style.position = "fixed"
      button.style.bottom = "0"
      button.style.right = "0"
      button.style.boxShadow = this.colors.light.boxShadow
      button.style.border = this.colors.light.border
      button.style.backgroundColor = this.colors.light.foreground
      button.style.width = "34px"
      button.style.height = "34px"
      button.style.borderRadius = "50%"
      button.style.margin = "34px"
      button.style.padding = "21px"
      button.style.cursor = "pointer"

      if (input !== undefined) {
        if (document.querySelector(".role-apps-button") === null) {
          input.append(button)
        }
      }

      return button
    }

    if (event === "nav/open") {

      const content = this.create("div/scrollable")

      this.add("button/start", content)

      {
        const button = this.create("button/left-right", content)
        button.left.innerHTML = ".login"
        button.right.innerHTML = "Dein Zugang zur personalisierten Erfahrung"
        button.addEventListener("click", () => window.location.assign("/login/"))
      }

      {
        const button = this.create("button/left-right", content)
        button.left.innerHTML = ".user-agreement"
        button.right.innerHTML = "Für Klarheit und Fairness im Umgang miteinander"
        button.addEventListener("click", () => window.location.assign("/nutzervereinbarung/"))
      }

      {
        const button = this.create("button/left-right", content)
        button.left.innerHTML = ".data-protection"
        button.right.innerHTML = "Fördert Vertrauen in digitale Interaktionen"
        button.addEventListener("click", () => window.location.assign("/datenschutz/"))
      }

      if (input !== undefined) input.append(content)


      return content

    }

    if (event === "login") {

      this.create("field/email", input)

      this.create("field/dsgvo", input)

      const loginbutton = this.create("button/action", input)
      loginbutton.style.fontSize = "34px"
      loginbutton.classList.add("start-login-event")
      loginbutton.innerHTML = "Jetzt anmelden"

    }

    if (event === "script/contact-location-expert") {

      const text = `
        <script id="contact-location-expert" type="module">
import {Helper} from "/js/Helper.js"
Helper.add("onclick/selector/contact-location-expert", ".contact-location-expert")
        </script>
      `
      const script = this.convert("text/script", text)
      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML
      input?.append(create)
      return create

    }

    if (event === "script/dark-light-aware") {

      return new Promise(async(resolve, reject) => {
        try {
          const selector = await this.convert("element/selector", input)
          const text = `
          <script class="dark-light-aware" type="module">
import {Helper} from "/js/Helper.js"
Helper.convert("selector/dark-light", "${selector}")
          </script>
          `
          const script = this.convert("text/script", text)
          const create = document.createElement("script")
          create.className = script.className
          create.type = script.type
          create.innerHTML = script.innerHTML
          resolve(create)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "script/dark-light-body") {

      const text = `
        <script id="dark-light-body" type="module">
import {Helper} from "/js/Helper.js"
Helper.convert("node/dark-light", document.body)
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      input?.append(create)
      return create

    }

    if (event === "script/trees-id") {

      const text = `
        <script id="${input.id}" type="module">
import {Helper} from "/js/Helper.js"
const res = await Helper.get("trees/users/open", ${JSON.stringify(input.trees)})
if (res.status === 200) {
  const users = JSON.parse(res.response)
  for (let i = 0; i < users.length; i++) {
    const user = users[i]
    Helper.render("user/selector/all", user, ".${input.id}")
  }
}
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      // input?.append(create)
      return create

    }

    if (event === "script/html-creator") {

      const text = `
        <script id="html-creator" type="module">
import {Helper} from "/js/Helper.js"

Helper.add("event/html-creator")
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create

    }

    if (event === "script/html-feedback") {

      const text = `
        <script id="html-feedback" type="module">
import {Helper} from "/js/Helper.js"

Helper.add("event/html-feedback")
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create

    }

    if (event === "script/back-button") {

      const text = `
        <script id="back-button" type="module">
import {Helper} from "/js/Helper.js"

Helper.add("event/back-button")
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create

    }

    if (event === "script/soundbox") {

      const text = /*html*/`
        <script id="soundbox" type="module">
import {Helper} from "/js/Helper.js"

await Helper.add("event/soundbox")
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      if (input !== undefined) input.append(create)
      return create

    }

    if (event === "script/open-login") {

      const text = /*html*/`
        <script id="open-login-event" type="module">
          import {Helper} from "/js/Helper.js"

          const submit = document.querySelector(".start-login-event")
          const emailInput = document.querySelector(".email-input")
          const dsgvoInput = document.querySelector(".dsgvo-input")

          Helper.verify("input/value", emailInput)
          Helper.verify("input/value", dsgvoInput)

          Helper.add("oninput/verify-input", emailInput)
          Helper.add("oninput/verify-input", dsgvoInput)

          Helper.add("input/value", emailInput)
          Helper.add("onclick/open-login", submit)
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/open-popup-list-mirror-event") {

      const scriptText = `
        <script id="${input.tag}-list-mirror-event" type="module">
import {Helper} from "/js/Helper.js"

const map = {}
map.tag = '${input.tag}'
map.path = \`${input.path}\`

await Helper.add("event/location-list-funnel", map)
        </script>
      `

      const script = this.convert("text/script", scriptText)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/empty-helper") {

      const text = /*html*/`
        <script id="${input.id}" type="module">
import {Helper} from "/js/Helper.js"

${input.js}

        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/match-maker-onload") {

      const conditionsString = JSON.stringify(input.conditions)

      const text = /*html*/`
        <script id="match-maker-onload-${input.name}" type="module">
          import {Helper} from "/js/Helper.js"

          const res = await Helper.verify("match-maker-conditions/closed", ${conditionsString})

          if (res.status === 200) {

            ${input.js}

          }

        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/match-maker-onclick") {

      const conditionsString = JSON.stringify(input.conditions)

      const text = /*html*/`
        <script id="match-maker-onclick-${input.name}" type="module">
          import {Helper} from "/js/Helper.js"

          const elements = document.querySelectorAll("[match-maker='${input.name}']")

          if (elements.length === 0) throw new Error("no match maker elements found")

          const res = await Helper.verify("match-maker-conditions/closed", ${conditionsString})

          if (res.status === 200) {

            elements.forEach(matchMaker => {
              matchMaker.onclick = async (event) => {
                ${input.js}
              }
            })

          }

        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/match-maker-show") {

      const conditionsString = JSON.stringify(input.conditions)

      const text = /*html*/`
        <script id="match-maker-show-${input.name}" type="module">
          import {Helper} from "/js/Helper.js"

          const elements = document.querySelectorAll("[match-maker='${input.name}']")

          if (elements.length === 0) throw new Error("no match maker elements found")

          elements.forEach(element => element.style.display = "none")

          const res = await Helper.verify("match-maker-conditions/closed", ${conditionsString})

          if (res.status === 200) {

            elements.forEach(matchMaker => {
              matchMaker.style.display = null
            })

          }

        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/match-maker-get-list") {

      const conditionsString = JSON.stringify(input.conditions)

      const text = /*html*/`
        <script id="match-maker-get-list-${input.name}" type="module">
          import {Helper} from "/js/Helper.js"

          const elements = document.querySelectorAll("[match-maker='${input.name}']")

          if (elements.length === 0) throw new Error("no match maker elements found")

          const res = await Helper.get("match-maker-list/closed", ${conditionsString}, "${input.tree}")

          if (res.status === 200) {
            const mirror = JSON.parse(res.response)
            await Helper.render("mirror/match-maker-get-list", mirror, "${input.name}")
          }

        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/match-maker-get-keys") {

      const conditionsString = JSON.stringify(input.conditions)
      const mirrorString = JSON.stringify(input.mirror)

      const text = /*html*/`
        <script id="match-maker-get-keys-${input.name}" type="module">
          import {Helper} from "/js/Helper.js"

          const elements = document.querySelectorAll("[match-maker='${input.name}']")

          if (elements.length === 0) throw new Error("no match maker elements found")

          const res = await Helper.get("match-maker-keys/closed", ${conditionsString}, ${mirrorString})

          if (res.status === 200) {
            const mirror = JSON.parse(res.response)

            await Helper.render("mirror/match-maker-get-keys", mirror, "${input.name}")

          }

        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/match-maker-get-users") {

      const conditionsString = JSON.stringify(input.conditions)
      const mirrorString = JSON.stringify(input.mirror)

      const text = /*html*/`
        <script id="match-maker-get-users-${input.name}" type="module">
          import {Helper} from "/js/Helper.js"

          const elements = document.querySelectorAll("[match-maker='${input.name}']")

          if (elements.length === 0) throw new Error("no match maker elements found")

          const res = await Helper.get("match-maker-mirror/closed", ${conditionsString}, ${mirrorString})

          if (res.status === 200) {
            const mirror = JSON.parse(res.response)

            await Helper.render("mirror/match-maker-get-users", mirror, "${input.name}")

          }

        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/match-maker-remove") {

      const conditionsString = JSON.stringify(input.conditions)

      const text = /*html*/`
        <script id="match-maker-remove-${input.name}" type="module">
          import {Helper} from "/js/Helper.js"

          const elements = document.querySelectorAll("[match-maker='${input.name}']")

          if (elements.length === 0) throw new Error("no match maker elements found")

          const res = await Helper.verify("match-maker-conditions/closed", ${conditionsString})

          if (res.status === 200) {
            elements.forEach(element => element.remove())
          }

        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "script/submit-field-funnel-event") {

      const text = `
        <script id="submit-field-funnel-event" type="module">
import {Helper} from "/js/Helper.js"

await Helper.add("event/submit-field-funnel")
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      if (input !== undefined) {
        if (input.querySelector(`#${create.id}`) === null) {
          input.append(create)
        }
      }

      return create
    }

    if (event === "script/prefill-field-funnel-event") {

      const text = `
        <script id="prefill-field-funnel-event" type="module">
import {Helper} from "/js/Helper.js"

await Helper.add("event/prefill-field-funnel")
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      if (input !== undefined) {
        if (input.querySelector(`#${create.id}`) === null) {
          input.append(create)
        }
      }

      return create
    }

    if (event === "script/on-info-click-event") {

      const text = `
        <script id="on-info-click-event" type="module">
import {Helper} from "/js/Helper.js"

Helper.add("event/on-info-click")
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      if (input !== undefined) {
        if (input.querySelector(`#${create.id}`) === null) {
          input.append(create)
        }
      }

      return create
    }

    if (event === "script/click-funnel-event") {

      const text = `
        <script id="click-funnel-event" type="module">
import {Helper} from "/js/Helper.js"
await Helper.add("event/click-funnel")
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      return create
    }

    if (event === "field/open-expert-values-path-select") {

      return new Promise(async(resolve, reject) => {
        try {
          const field = this.create("field/select", input)
          field.label.innerHTML = "Wähle deinen passenden Funnel, aus Werteinheiten aller Experten"

          const defaultOption = document.createElement("option")
          defaultOption.text = "Bitte warten.."
          field.input.append(defaultOption)

          const res = await this.get("trees/users/open", ["getyour.expert.platforms"])
          if (res.status === 200) {
            const users = JSON.parse(res.response)

            field.input.innerHTML = ""
            for (let i = 0; i < users.length; i++) {
              const user = users[i]
              if (user["getyour.expert.platforms"] !== undefined) {
                for (let i = 0; i < user["getyour.expert.platforms"].length; i++) {
                  const platform = user["getyour.expert.platforms"][i]
                  if (platform.values !== undefined) {
                    for (let i = 0; i < platform.values.length; i++) {
                      const value = platform.values[i]
                      const option = document.createElement("option")
                      option.text = this.convert("text/capital-first-letter", value.path)
                      option.value = value.path
                      field.input.append(option)
                    }
                  }
                }
              }
            }
            resolve(field)
          }

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "field/select") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)

      field.input = document.createElement("select")
      field.input.classList.add("field-input")
      field.input.add = (options) => {
        field.input.innerHTML = ""
        for (let i = 0; i < options.length; i++) {
          const option = document.createElement("option")
          option.classList.add("field-option")
          option.value = options[i]
          option.text = options[i]
          field.input.appendChild(option)
        }
      }
      field.input.select = (options) => {
        for (let i = 0; i < field.input.options.length; i++) {
          const option = field.input.options[i]
          option.selected = false
          for (let z = 0; z < options.length; z++) {
            if (options[z] === option.value) {
              option.selected = true
            }
          }
        }
      }
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      field.style.backgroundColor = this.colors.light.foreground
      field.style.border = this.colors.light.border
      field.style.boxShadow = this.colors.light.boxShadow
      field.style.color = this.colors.light.text
      field.label.style.color = this.colors.light.text
      field.input.style.backgroundColor = this.colors.light.background
      field.input.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        field.style.backgroundColor = this.colors.dark.foreground
        field.style.border = this.colors.dark.border
        field.style.boxShadow = this.colors.dark.boxShadow
        field.style.color = this.colors.dark.text
        field.label.style.color = this.colors.dark.text
        field.input.style.backgroundColor = this.colors.dark.background
        field.input.style.color = this.colors.dark.text
      }


      if (input !== undefined) input.append(field)
      return field

    }

    if (event === "field/operator") {

      const field = this.create("field/text")

      field.label.innerHTML = "Operator"
      field.input.placeholder = ">="
      field.input.maxLength = "2"

      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "text/operator")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/name") {

      const field = this.create("field/text")

      field.label.innerHTML = "Name"

      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "text/tag")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/js") {

      const field = this.create("field/textarea")

      field.input.style.fontSize = "13px"
      field.input.style.height = "55px"
      field.input.placeholder = "document.querySelector..."

      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "text/js")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/script") {

      const field = this.create("field/textarea")

      field.label.innerHTML = "HTML Skript"
      field.input.style.fontSize = "13px"
      field.input.placeholder = "<script>..</script>"

      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "text/script")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/field-funnel") {

      const field = this.create("field/textarea")

      field.label.innerHTML = "Welche Daten soll dein Nutzer, in die Liste, speichern können (field-funnel)"
      field.input.style.fontSize = "13px"
      field.input.placeholder = `<div class="field-funnel">..</div>`

      field.input.setAttribute("accept", "text/field-funnel")
      field.input.setAttribute("required", "true")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/html") {

      const field = this.create("field/textarea")

      field.label.innerHTML = "Element Inhalt"
      field.input.placeholder = `<div>..</div>`
      field.input.style.fontFamily = "monospace"
      field.input.style.fontSize = "13px"
      field.input.style.height = "89px"

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/textarea") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)
      field.append(field.labelContainer)

      field.input = document.createElement("textarea")
      field.input.classList.add("field-input")
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      this.convert("node/dark-light", field)

      input?.append(field)
      return field
    }

    if (event === "field/url") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.innerHTML = "Quell-URL"
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)
      field.append(field.labelContainer)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "url"
      field.input.placeholder = "https://www.meine-quell-url.de/"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"

      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "text/url")

      field.append(field.input)

      field.style.backgroundColor = this.colors.light.foreground
      field.style.border = this.colors.light.border
      field.style.boxShadow = this.colors.light.boxShadow
      field.style.color = this.colors.light.text
      field.label.style.color = this.colors.light.text
      field.input.style.backgroundColor = this.colors.light.background
      field.input.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        field.style.backgroundColor = this.colors.dark.foreground
        field.style.border = this.colors.dark.border
        field.style.boxShadow = this.colors.dark.boxShadow
        field.style.color = this.colors.dark.text
        field.label.style.color = this.colors.dark.text
        field.input.style.backgroundColor = this.colors.dark.background
        field.input.style.color = this.colors.dark.text
      }



      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/checkbox") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"
      field.style.alignItems = "flex-start"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.image = document.createElement("div")
      field.image.classList.add("field-label-image")
      field.image.style.minWidth = "34px"
      field.image.style.maxWidth = "34px"
      field.image.style.marginRight = "21px"
      field.labelContainer.append(field.image)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"

      field.labelContainer.append(field.label)

      field.inputContainer = document.createElement("div")
      field.inputContainer.classList.add("field-input-container")
      field.inputContainer.style.display = "flex"
      field.inputContainer.style.alignItems = "center"
      field.inputContainer.style.margin = "21px 89px 21px 34px"
      field.append(field.inputContainer)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "checkbox"
      field.input.style.marginRight = "34px"
      field.input.style.width = "21px"
      field.input.style.height = "21px"
      field.inputContainer.append(field.input)

      field.afterInput = document.createElement("div")
      field.afterInput.classList.add("field-after-input")

      field.afterInput.style.fontFamily = "sans-serif"
      field.afterInput.style.fontSize = "21px"
      field.inputContainer.append(field.afterInput)

      field.style.backgroundColor = this.colors.light.foreground
      field.style.border = this.colors.light.border
      field.style.boxShadow = this.colors.light.boxShadow
      field.style.color = this.colors.light.text
      field.label.style.color = this.colors.light.text
      field.input.style.backgroundColor = this.colors.light.background
      field.input.style.color = this.colors.light.text
      field.afterInput.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        field.style.backgroundColor = this.colors.dark.foreground
        field.style.border = this.colors.dark.border
        field.style.boxShadow = this.colors.dark.boxShadow
        field.style.color = this.colors.dark.text
        field.label.style.color = this.colors.dark.text
        field.input.style.backgroundColor = this.colors.dark.background
        field.input.style.color = this.colors.dark.text
        field.afterInput.style.color = this.colors.dark.text
      }

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/dsgvo") {

      const field = this.create("field/checkbox")
      field.input.classList.add("dsgvo-input")
      field.label.innerHTML = `<div style="font-size: 21px;">Ich habe die <a href="/nutzervereinbarung/">Nutzervereinbarungen</a> und die <a href="/datenschutz/">Datenschutz Richtlinien</a> gelesen und verstanden. Durch meine Anmeldung stimme ich ihnen zu.</div>`
      this.render("icon/node/path", "/public/info-circle.svg", field.image)
      field.input.setAttribute("required", "true")
      field.input.style.transform = "scale(1.4)"
      if (input !== undefined) input.append(field)
      return field

    }

    if (event === "field/trees") {

      const field = this.create("field/textarea")

      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "text/trees")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/tree") {

      const field = this.create("field/text")

      field.input.setAttribute("accept", "text/tree")
      field.input.setAttribute("required", "true")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/path") {

      const field = this.create("field/text")

      field.input.setAttribute("accept", "text/path")
      field.input.setAttribute("required", "true")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/hex") {

      const field = this.create("field/text")

      field.input.setAttribute("accept", "text/hex")
      field.input.setAttribute("required", "true")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/tag") {

      const field = this.create("field/text")

      field.input.setAttribute("accept", "text/tag")
      field.input.setAttribute("required", "true")

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/pdf-file") {

      const field = this.create("field/file")
      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "application/pdf")

      input?.append(field)
      return field

    }

    if (event === "field/file") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "file"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      this.convert("node/dark-light", field)

      input?.append(field)
      return field
    }

    if (event === "field/tel") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "tel"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      this.convert("node/dark-light", field)

      input?.append(field)
      return field
    }

    if (event === "field/date") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "date"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      this.convert("node/dark-light", field)

      input?.append(field)
      return field
    }

    if (event === "field/number") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "number"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      this.convert("node/dark-light", field)

      if (input !== undefined) input.append(field)
      return field
    }

    if (event === "field/password") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "password"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      this.convert("node/dark-light", field)

      input?.append(field)
      return field
    }

    if (event === "field/range") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "range"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      this.convert("node/dark-light", field)

      input?.append(field)
      return field
    }

    if (event === "field/text") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.type = "text"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      this.convert("node/dark-light", field)

      input?.append(field)
      return field
    }

    if (event === "field/emails") {

      const field = this.create("field/textarea")
      field.input.style.fontFamily = "monospace"
      field.input.style.fontSize = "13px"
      field.input.style.height = "89px"
      field.input.placeholder = `[\n  "meine-erste@email.de",\n  "meine-zweite@email.de"\n]`

      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "email/array")

      input?.append(field)
      return field
    }

    if (event === "field/email") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 0 34px"
      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.innerHTML = "E-Mail Adresse"
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "21px"
      field.labelContainer.append(field.label)
      field.append(field.labelContainer)

      field.input = document.createElement("input")
      field.input.classList.add("field-input")
      field.input.classList.add("email-input")
      field.input.type = "email"
      field.input.placeholder = "meine@email.de"
      field.input.style.margin = "21px 89px 21px 34px"
      field.input.style.fontSize = "21px"
      field.append(field.input)

      field.input.setAttribute("required", "true")
      field.input.setAttribute("accept", "text/email")

      this.convert("node/dark-light", field)

      input?.append(field)
      return field
    }

    if (event === "field/lang") {

      const langField = this.create("field/select")
      langField.label.innerHTML = "Sprache"
      const options = ["aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","id","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu"]
      for (let i = 0; i < options.length; i++) {
        const option = document.createElement("option")
        option.value = options[i]
        option.text = options[i]
        langField.input.append(option)
      }
      langField.input.value = "de"
      this.setValidStyle(langField.input)

      input?.append(langField)
      return langField

    }

    if (event === "field-funnel") {
      const fieldFunnel = this.create("div/scrollable")
      fieldFunnel.classList.add("field-funnel")

      fieldFunnel.submitButton = this.create("button/action", fieldFunnel)
      fieldFunnel.submitButton.classList.add("submit-field-funnel-button")
      fieldFunnel.submitButton.innerHTML = "Jetzt speichern"

      if (input !== undefined) input.append(fieldFunnel)

      return fieldFunnel
    }

    if (event === "field/audio") {

      const field = document.createElement("div")
      field.classList.add("field")
      field.style.position = "relative"
      field.style.borderRadius = "13px"
      field.style.display = "flex"
      field.style.flexDirection = "column"
      field.style.margin = "34px"
      field.style.justifyContent = "center"

      field.labelContainer = document.createElement("div")
      field.labelContainer.classList.add("field-label-container")
      field.labelContainer.style.display = "flex"
      field.labelContainer.style.alignItems = "center"
      field.labelContainer.style.margin = "21px 89px 21px 34px"
      field.labelContainer.style.overflow = "auto"
      field.append(field.labelContainer)

      field.label = document.createElement("label")
      field.label.classList.add("field-label")
      field.label.style.fontFamily = "sans-serif"
      field.label.style.fontSize = "13px"
      field.labelContainer.append(field.label)

      field.audio = document.createElement("audio")
      field.audio.classList.add("field-audio")
      field.audio.style.fontSize = "21px"
      field.audio.style.width = "100%"
      field.audio.style.borderRadius = "13px"
      field.audio.setAttribute("controls", "")
      field.append(field.audio)

      field.style.backgroundColor = this.colors.light.foreground
      field.style.border = this.colors.light.border
      field.style.boxShadow = this.colors.light.boxShadow
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        field.style.backgroundColor = this.colors.dark.foreground
        field.style.border = this.colors.dark.border
        field.style.boxShadow = this.colors.dark.boxShadow
      }

      input?.append(field)
      return field
    }

    if (event === "answer-box") {

      const answerBox = document.createElement("div")
      answerBox.classList.add("answer-box")

      answerBox.answer = document.createElement("div")
      answerBox.answer.classList.add("answer")
      answerBox.append(answerBox.answer)

      if (input !== undefined) input.append(answerBox)

      answerBox.style.cursor = "pointer"
      answerBox.style.display = "flex"
      answerBox.style.flexDirection = "column"
      answerBox.style.borderRadius = "13px"
      answerBox.style.margin = "8px 0"
      answerBox.style.overflow = "hidden"

      answerBox.style.border = `1px solid ${this.colors.light.text}`

      answerBox.answer.style.fontFamily = "sans-serif"
      answerBox.answer.style.overflow = "auto"
      answerBox.answer.style.margin = "21px 34px"
      answerBox.answer.style.maxHeight = "89px"
      answerBox.answer.style.textAlign = "center"

      return answerBox
    }

    if (event === "title") {
      const title = document.createElement("div")
      title.style.margin = "21px 34px"
      title.style.fontSize = "21px"
      title.style.fontFamily = "sans-serif"


      title.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        title.style.color = this.colors.dark.text
      }

      if (input !== undefined) input.append(title)

      return title
    }

    if (event === "click-funnel") {
      const clickFunnel = this.create("div/scrollable")
      clickFunnel.classList.add("click-funnel")
      if (input !== undefined) input.append(clickFunnel)

      clickFunnel.style.display = "flex"
      clickFunnel.style.justifyContent = "center"
      clickFunnel.style.position = "relative"
      clickFunnel.style.margin = "21px 34px"

      {
        const button = this.create("button/icon-text", clickFunnel)
        button.classList.add("start-click-funnel-button")
        this.render("icon/node/path", "/public/touch-index-finger.svg", button.icon)
        button.text.innerHTML = "Start"
      }

      {
        const button = this.create("button/icon-text", clickFunnel)
        button.classList.add("end-click-funnel-button")
        button.style.display = "none"
        this.render("icon/node/path", "/public/touch-index-finger.svg", button.icon)
        button.text.innerHTML = "Speichern"
      }


      return clickFunnel
    }

    if (event === "image-left/text-right") {

      const box = document.createElement("div")
      box.style.display = "flex"
      box.style.borderRadius = "13px"
      box.style.margin = "8px 0"

      box.style.border = `1px solid ${this.colors.light.text}`
      // if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      //   box.style.border = `1px solid ${this.colors.dark.text}`
      // } else {
      // }

      box.image = document.createElement("div")
      box.image.classList.add("image")
      box.image.style.display = "flex"
      box.image.style.width = "144px"
      box.image.style.borderTopLeftRadius = "13px"
      box.image.style.borderBottomLeftRadius = "13px"
      box.image.style.overflow = "hidden"
      box.append(box.image)

      box.text = document.createElement("div")
      box.image.classList.add("text")
      box.text.style.fontFamily = "sans-serif"
      box.text.style.width = "100%"
      box.text.style.overflow = "auto"
      box.text.style.padding = "8px"
      box.append(box.text)

      if (input !== undefined) input.append(box)

      return box

    }

    if (event === "click-field") {

      const field = document.createElement("div")
      field.classList.add("click-field")

      field.question = document.createElement("label")
      field.question.classList.add("question")
      field.append(field.question)

      field.answers = document.createElement("div")
      field.answers.classList.add("answers")
      field.append(field.answers)

      if (input !== undefined) input.append(field)


      // flexible css

      field.style.borderRadius = "13px"
      field.style.flexDirection = "column"
      field.style.justifyContent = "center"
      field.style.width = "100%"

      field.style.display = "none"


      field.style.backgroundColor = this.colors.light.foreground
      field.style.border = this.colors.light.border
      field.style.boxShadow = this.colors.light.boxShadow
      field.style.color = this.colors.light.text
      // if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      //   field.style.backgroundColor = this.colors.dark.foreground
      //   field.style.border = this.colors.dark.border
      //   field.style.boxShadow = this.colors.dark.boxShadow
      //   field.style.color = this.colors.dark.text
      // } else {
      // }

      field.question.style.margin = "21px 34px"
      field.question.style.fontFamily = "sans-serif"
      field.question.style.fontSize = "21px"

      field.question.style.color = this.colors.light.text
      // if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      //   field.question.style.color = this.colors.dark.text
      // } else {
      // }

      field.answers.style.display = "flex"
      field.answers.style.flexDirection = "column"
      field.answers.style.margin = "21px 34px"

      return field
    }

    if (event === "click/field") {


      const field = document.createElement("div")
      field.classList.add("click-field")
      field.style.borderRadius = "13px"
      field.style.flexDirection = "column"
      field.style.justifyContent = "center"
      field.style.width = "100%"

      field.style.display = "none"

      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        field.style.backgroundColor = this.colors.dark.foreground
        field.style.border = this.colors.dark.border
        field.style.boxShadow = this.colors.dark.boxShadow
        field.style.color = this.colors.dark.text
      } else {
        field.style.backgroundColor = this.colors.light.foreground
        field.style.border = this.colors.light.border
        field.style.boxShadow = this.colors.light.boxShadow
        field.style.color = this.colors.light.text
      }

      field.question = document.createElement("label")
      field.question.classList.add("question")
      field.question.style.margin = "21px 34px"
      field.question.style.fontFamily = "sans-serif"
      field.question.style.fontSize = "21px"
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        field.question.style.color = this.colors.dark.text
      } else {
        field.question.style.color = this.colors.light.text
      }
      field.append(field.question)

      field.answers = document.createElement("div")
      field.answers.classList.add("answers")
      field.answers.style.display = "flex"
      field.answers.style.flexDirection = "column"
      field.answers.style.margin = "21px 34px"
      field.append(field.answers)

      if (input !== undefined) input.append(field)

      return field
    }

    if (event === "info/loading") {

      const header = document.createElement("div")
      header.style.display = "flex"
      header.style.flexDirection = "column"
      header.style.justifyContent = "center"
      header.style.alignItems = "center"
      header.style.height = "100%"
      header.loading = this.create("div", header)
      this.render("icon/node/path", "/public/loading.svg", header.loading).then(icon => {
        const svg = icon.querySelector("svg")
        svg.style.fill = this.colors.light.error
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          svg.style.fill = this.colors.dark.error
        }
      })
      header.loading.style.width = "55px"
      header.loading.style.margin = "8px"
      header.info = this.create("div", header)
      header.info.innerHTML = "Das kann einen Moment dauern .."
      header.info.style.color = this.colors.light.error
      header.info.style.fontSize = "21px"
      header.info.style.fontFamily = "sans-serif"
      input?.append(header)
      return header

    }

    if (event === "info/warning") {
      const element = document.createElement("div")
      element.style.fontSize = "13px"
      element.style.fontFamily = "sans-serif"
      element.style.margin = "21px 34px"
      element.style.padding = "21px 34px"
      element.style.borderRadius = "13px"

      element.style.color = this.colors.light.text
      element.style.backgroundColor = this.colors.light.error

      if (input !== undefined) input.append(element)

      return element
    }

    if (event === "info/success") {
      const element = document.createElement("div")
      element.style.fontSize = "13px"
      element.style.fontFamily = "sans-serif"
      element.style.margin = "21px 34px"
      element.style.padding = "21px 34px"
      element.style.borderRadius = "13px"

      element.style.color = this.colors.light.text
      element.style.backgroundColor = this.colors.light.success

      if (input !== undefined) input.append(element)

      return element
    }

  }

  static colors = {
    matte: {
      green: '#00C853',
      lightGray: '#EAEAEA',
      orange: '#E8A435',
      sunflower: '#EFA514',
      apricot: '#FBCEB1',
      red: '#EE7A7A',
      mint: '#72E6CB',
      seaGreen: '#277E71',
      black: '#303030',
      charcoal: '#444444',
      slate: '#555555',
      deepBlue: '#003366',
      forest: '#09443C',
      maroon: '#801515',
      mustard: '#9A8700',
      plum: '#4F2D56',
      chocolate: '#3D1F0D',
      steel: '#555B6E',
      white: '#F0F0F0',
      snow: '#FAFAFA',
      ash: '#C0C0C0',
      skyBlue: '#A3C1D1',
      mintGreen: '#84B082',
      coral: '#D46A6A',
      lemon: '#FFEB99',
      lavender: '#D8C8EA',
      almond: '#E9D6AF',
      pearl: '#F2F2F2',
      chartreuse: '#B5E288',
      celadon: '#ACE1Af',
      royalBlue: '#4169E1',
      olive: '#808000',
      teal: '#008080',
      raspberry: '#B5014E',
      sand: '#CDB79E',
      navy: '#000080',
      emerald: '#50C878',
      tangerine: '#FFA500',
      lilac: '#C8A2C8',
      taupe: '#483C32',
      lime: '#9FCB8D',
      lightYellow: "#F7AA20"
    },
    gray: {
      0: "#EAEAEA",
      1: "#DCDCDC",
      2: "#CDCDCD",
      3: "#C6C6C6",
      4: "#ADADAD",
      5: "#939393",
    },
    dark: {
      foreground: '#303030',
      background: '#28282B',
      boxShadow: `0 1px 3px ${this.convert("hex/rgba", {hex: "#FFFFFF", alpha: "0.13"})}`,
      border: '0.3px solid #2E4369',
      primary: '#2E4369',
      secondary: '#4E6172',
      accent: '#6D8898',
      text: '#CDD9E5',
      error: '#9B3C38',
      success: '#285D34',
    },
    light: {
      foreground: '#FAFAFA',
      background: '#F0F0F0',
      border: '0.3px solid #A0A0A0',
      boxShadow: `0 1px 3px ${this.convert("hex/rgba", {hex: "#000000", alpha: "0.13"})}`,
      primary: '#A0A0A0',
      secondary: '#7C7C7C',
      accent: '#595959',
      text: '#333333',
      error: '#B03535',
      success: '#9FCB8D',
    },
    link: {
      color: "#4169E1",
      active: "#D46A6A"
    },
    key: "#2E95D3",
    value: "#CE9178",
  }

  static convert(event, input) {
    // event = input/to

    if (event === "query/css") {
      const match = input.match(/{([^{}]*)}/)

      if (match && match[1]) {
        return match[1].trim()
      }

    }

    if (event === "query/selector") {
      const match = input.match(/{(.*?){/)

      if (match && match[1]) {
        return match[1].trim()
      }

    }

    if (event === "api/sources") {
      return new Promise(async(resolve, reject) => {
        try {

          const response = await fetch(input)
          const data = await response.json()

          if (input.startsWith("https://www.googleapis.com/")) {
            // console.log("from googleapis.com")
            // console.log(data)
            if (data.items !== undefined) {
              const sources = []
              for (let i = 0; i < data.items.length; i++) {
                const source = data.items[i]

                const map = {}
                map.api = input
                map.keywords = []

                if (source.volumeInfo) {
                  if (source.volumeInfo.title) {
                    map.title = source.volumeInfo.title
                    const titleWords = map.title.split(" ")
                    for (let i = 0; i < titleWords.length; i++) {
                      map.keywords.push(titleWords[i])
                    }
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.authors) {
                    map.authors = source.volumeInfo.authors
                    for (let i = 0; i < map.authors.length; i++) {
                      map.keywords.push(map.authors[i])
                    }
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.subtitle) {
                    const subTitleWords = source.volumeInfo.subtitle.split(" ")
                    for (let i = 0; i < subTitleWords.length; i++) {
                      map.keywords.push(subTitleWords[i])
                    }
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.categories) {
                    for (let i = 0; i < source.volumeInfo.categories.length; i++) {
                      map.keywords.push(source.volumeInfo.categories[i])
                    }
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.printType) {
                    if (source.volumeInfo.printType.toLowerCase() === "book") {
                      map.type = "text/book"
                      map.keywords.push(map.type)
                    }
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.description) {
                    map.description = source.volumeInfo.description
                    const descriptionWords = source.volumeInfo.description.split(" ")
                    for (let i = 0; i < descriptionWords.length; i++) {
                      map.keywords.push(descriptionWords[i])
                    }
                  }
                }

                if (source.searchInfo) {
                  if (source.searchInfo.textSnippet) {
                    const searchInfoWords = source.searchInfo.textSnippet.split(" ")
                    for (let i = 0; i < searchInfoWords.length; i++) {
                      map.keywords.push(searchInfoWords[i])
                    }
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.language) {
                    map.language = []
                    map.language.push(source.volumeInfo.language.slice(0, 2))
                    map.keywords.push(map.language)
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.imageLinks) {
                    if (source.volumeInfo.imageLinks.thumbnail) {
                      map.image = source.volumeInfo.imageLinks.thumbnail
                    }
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.publishedDate) {
                    if (source.volumeInfo.publishedDate) {
                      map.published = new Date(source.volumeInfo.publishedDate).getTime()
                    }
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.publisher) {
                    map.publisher = []
                    map.publisher.push(source.volumeInfo.publisher)
                    map.keywords.push(source.volumeInfo.publisher)
                  }
                }

                if (source.volumeInfo) {
                  if (source.volumeInfo.industryIdentifiers) {
                    map.isbn = []
                    for (let i = 0; i < source.volumeInfo.industryIdentifiers.length; i++) {
                      const it = source.volumeInfo.industryIdentifiers[i]
                      map.isbn.push(it.identifier)
                    }
                  }
                }

                sources.push(map)
              }

              resolve(sources)
            }
          }

          if (input.startsWith("https://openlibrary.org/")) {
            // console.log("from openlibrary.org")
            // console.log(data)
            if (data.docs !== undefined) {
              const sources = []
              for (let i = 0; i < data.docs.length; i++) {
                const source = data.docs[i]

                const map = {}
                map.api = input
                map.keywords = []

                if (source.title) {
                  map.title = source.title
                  const titleWords = map.title.split(" ")
                  for (let i = 0; i < titleWords.length; i++) {
                    map.keywords.push(titleWords[i])
                  }
                }

                if (source.author_name) {
                  map.authors = source.author_name
                  for (let i = 0; i < map.authors.length; i++) {
                    map.keywords.push(map.authors[i])
                  }
                }

                if (source.seed) {
                  for (let i = 0; i < source.seed.length; i++) {
                    const seed = source.seed[i]
                    if (seed.includes("book")) {
                      map.type = "text/book"
                    }
                  }
                }

                if (source.publisher) {
                  map.publisher = source.publisher
                  for (let i = 0; i < source.publisher.length; i++) {
                    const publisher = source.publisher[i]
                    map.keywords.push(publisher)
                  }
                }

                if (source.contributer) {
                  for (let i = 0; i < source.contributer.length; i++) {
                    const contributer = source.contributer[i]
                    map.keywords.push(contributer)
                  }
                }

                if (source.subject) {
                  for (let i = 0; i < source.subject.length; i++) {
                    const subject = source.subject[i]
                    map.keywords.push(subject)
                  }
                }

                if (source.first_publish_year) {
                  if (source.first_publish_year) {
                    map.published = new Date(source.first_publish_year, 0, 1).getTime()
                  }
                }

                if (source.isbn) {
                  map.isbn = source.isbn
                }

                if (source.language) {
                  map.language = []
                  for (let i = 0; i < source.language.length; i++) {
                    const language = source.language[i]
                    map.language.push(language.slice(0, 2))
                  }
                }

                sources.push(map)
              }

              resolve(sources)
            }
          }

          if (input.startsWith("https://archive.org/")) {
            // console.log("from archive.org")
            // console.log(data)
            if (data.response !== undefined) {
              if (data.response.docs !== undefined) {
                const sources = []
                for (let i = 0; i < data.response.docs.length; i++) {
                  const source = data.response.docs[i]

                  const map = {}
                  map.api = input
                  map.keywords = []

                  if (source.title) {
                    map.title = source.title
                    const titleWords = map.title.split(" ")
                    for (let i = 0; i < titleWords.length; i++) {
                      map.keywords.push(titleWords[i])
                    }
                  }

                  if (source.subject) {
                    for (let i = 0; i < source.subject.length; i++) {
                      const subject = source.subject[i]
                      map.keywords.push(subject)
                    }
                  }

                  if (source.mediatype) {
                    if (source.mediatype === "texts") {
                      map.type = "text/book"
                      map.keywords.push(map.type)
                    }
                  }

                  if (source.publisher) {
                    map.publisher = []
                    map.publisher.push(source.publisher)
                    map.keywords.push(source.publisher)
                  }

                  if (source.date) {
                    map.published = new Date(source.date).getTime()
                  }

                  if (source.creator) {
                    map.authors = []
                    map.authors.push(source.creator)
                    map.keywords.push(source.creator)
                  }

                  if (source.description) {
                    if (this.verifyIs("text", source.description)) {
                      map.description = source.description
                      const descriptionWords = source.description.split(" ")
                      for (let i = 0; i < descriptionWords.length; i++) {
                        map.keywords.push(descriptionWords[i])
                      }
                    }

                    if (this.verifyIs("array", source.description)) {
                      map.description = ""
                      for (let i = 0; i < source.description.length; i++) {
                        const description = source.description[i]
                        map.keywords.push(description)
                        map.description += description
                      }
                    }
                  }

                  if (source.genre) {
                    map.keywords.push(source.genre)
                  }

                  sources.push(map)
                }

                resolve(sources)
              }
            }
          }

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "array/reduce-selected-price") {
      return input.filter(it => it.selected === true).reduce((prev, curr) => prev + curr.price, 0)
    }

    if (event === "canvas/file") {
      return new Promise(async(resolve, reject) => {
        try {
          input.toBlob(blob => {
            resolve({
              created: Date.now(),
              type: blob.type,
              size: blob.size,
              dataURL: input.toDataURL()
            })
          })
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "rgb/luminance") {
      const rgb = input.match(/\d+/g).map(Number)
      const luminance = (0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]) / 255
      return luminance
    }

    if (event === "hex/rgba") {
      const hex = input.hex.replace('#', '')

      var r = parseInt(hex.substring(0, 2), 16)
      var g = parseInt(hex.substring(2, 4), 16)
      var b = parseInt(hex.substring(4, 6), 16)

      if (input.alpha < 0 || input.alpha > 1) {
        throw new Error('The alpha value must be between 0 and 1.');
      }

      var rgba = 'rgba(' + r + ', ' + g + ', ' + b + ', ' + input.alpha + ')';

      return rgba
    }

    if (event === "markdown/div") {

      // test the convert results
      // convert(markdown/html)
      // Convert '#' at the beginning of a line to <h1> tag
      input = input.replace(/^# (.+)$/gm, '<h1>$1</h1>')

      // Convert '##' at the beginning of a line to <h2> tag
      input = input.replace(/^## (.+)$/gm, '<h2>$1</h2>')
      input = input.replace(/^### (.+)$/gm, '<h3>$1</h3>')

      // Convert '*' and '_' for emphasis to <em> tags
      input = input.replace(/(\*|_)(.+?)\1/g, '<em>$2</em>')

      // Convert '**' and '__' for strong emphasis to <strong> tags
      input = input.replace(/(\*\*|__)(.+?)\1/g, '<strong>$2</strong>')

      // Convert lists
      input = input.replace(/^\* (.+)$/gm, '<li>$1</li>')
      input = input.replace(/<li>(.+)<\/li>/g, '<ul>$&</ul>')

      // Convert paragraphs
      input = input.replace(/(.+)$/gm, '<p>$1</p>')

      // Convert fenced code blocks (```)
      input = input.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')

      // Convert blockquotes
      // input = input.replace(/>(.+)/gm, '<blockquote>$1</blockquote>')

      // Convert links ([text](url))
      input = input.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')

      // Convert inline code (`code`)
      input = input.replace(/`([^`]+)`/g, '<code>$1</code>')

      // Convert images (![alt text](url))
      input = input.replace(/!\[([^\]]+)\]\(([^)]+)\)/g, '<img alt="$1" src="$2">')

      // Convert horizontal rules (--- or *** or ___)
      input = input.replace(/(\*\*\*|---|___)/g, '<hr>')

      // Convert tables
      input = input.replace(/^[|].*[|]$/gm, function(match) {
        // Extract table headers and rows
        const rows = match.split('\n').filter(Boolean)
        const headers = rows[0].split('|').filter(Boolean)

        // Create the table HTML
        let tableHTML = '<table><thead><tr>'
        headers.forEach(header => {
          tableHTML += `<th>${header.trim()}</th>`
        })
        tableHTML += '</tr></thead><tbody>'

        for (let i = 1; i < rows.length; i++) {
          const cells = rows[i].split('|').filter(Boolean)
          tableHTML += '<tr>'
          cells.forEach(cell => {
            tableHTML += `<td>${cell.trim()}</td>`
          })
          tableHTML += '</tr>'
        }

        tableHTML += '</tbody></table>'
        return tableHTML
      })

      // Convert strikethrough (~~text~~)
      input = input.replace(/~~(.+?)~~/g, '<del>$1</del>')

      // Convert task lists
      input = input.replace(/\[ \]/g, '<input type="checkbox" disabled>')
      input = input.replace(/\[x\]/g, '<input type="checkbox" checked disabled>')

      // convert(html/div)
      const div = document.createElement("div")
      div.innerHTML = input

      return div
    }

    if (event === "tag/capital-first-letter") {
      if (input.includes("-")) {
        const array = input.split("-")

        const results = []
        for (var i = 0; i < array.length; i++) {
          const item = array[i]

          const result = this.convert("text/capital-first-letter", item)
          results.push(result)

        }
        return results.join(" ")

      } else {
        return this.convert("text/capital-first-letter", input)
      }

    }

    if (event === "file/data-url") {
      return new Promise(async(resolve, reject) => {
        try {

          const reader = new FileReader()
          reader.addEventListener("loadend", () => {
            resolve(reader.result)
          })
          reader.readAsDataURL(input)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "file/image-size") {
      return new Promise(async(resolve, reject) => {
        try {

          const reader = new FileReader()
          reader.addEventListener("loadend", () => {
            const canvas = document.createElement("canvas")
            const ctx = canvas.getContext("2d")
            const image = document.createElement("img")
            image.src = reader.result
            image.onload = () => {
              const width = input.size
              const height = input.size * image.height / image.width
              canvas.width = width
              canvas.height = height
              ctx.drawImage(image, 0, 0, width, height)
              resolve(canvas.toDataURL(input.file.type))
            }
          })
          reader.readAsDataURL(input.file)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "file/pdf") {
      return new Promise(async(resolve, reject) => {
        try {
          const fileReader = new FileReader()
          fileReader.onload = async(event) => {

            const dataUrlSize = fileReader.result.length
            if (dataUrlSize > 5 * 1024 * 1024) {
              alert("PDF ist zu groß.")
              throw new Error("pdf too large")
            }

            const newFile = {}
            newFile.name = file.name
            newFile.type = file.type
            newFile.size = dataUrlSize
            newFile.modified = Date.now()
            newFile.dataUrl = fileReader.result

            resolve(newFile)
          }
          fileReader.readAsDataURL(input)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "file/html") {
      return new Promise(async(resolve, reject) => {
        try {

          const fileReader = new FileReader()
          fileReader.onload = async () => {

            const newFile = {}
            newFile.name = input.name
            newFile.type = input.type
            newFile.size = input.size
            newFile.modified = Date.now()
            newFile.svg = fileReader.result

            resolve(newFile)
          }
          fileReader.readAsText(input)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "file/svg+xml") {
      return new Promise(async(resolve, reject) => {
        try {

          const fileReader = new FileReader()
          fileReader.onload = async () => {

            const newFile = {}
            newFile.name = input.name
            newFile.type = input.type
            newFile.size = input.size
            newFile.modified = Date.now()
            newFile.svg = fileReader.result

            resolve(newFile)
          }
          fileReader.readAsText(input)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "file/binary") {
      return new Promise(async(resolve, reject) => {
        try {

          const reader = new FileReader()
          reader.onloadend = () => resolve(reader.result)
          reader.readAsArrayBuffer(input)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "files/binaries") {
      return new Promise(async(resolve, reject) => {
        try {

          const promises = []
          for (var i = 0; i < input.length; i++) {
            const file = input[i]
            const promise = this.convert("file/binary", file)
            promises.push(promise)
          }

          const results = await Promise.all(promises)

          resolve(results)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "select/selected") {

      for (let i = 0; i < input.options.length; i++) {
        const option = input.options[i]
        if (option.selected === true) {
          return option.value
        }
      }

    }

    if (event === "input/image") {

      return new Promise(async(resolve, reject) => {
        const file = input.files[0]

        const allowedMimeTypes = ["image/jpeg", "image/png"]
        const allowedExtensions = ["jpg", "jpeg", "png"]

        if (allowedMimeTypes !== undefined) {
          await this.verifyIs("file/types", {file, types: allowedMimeTypes})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            this.setNotValidStyle(input)
            throw error
          })
        }

        if (allowedExtensions !== undefined) {
          await this.verifyIs("file/extensions", {file, extensions: allowedExtensions})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            this.setNotValidStyle(input)
            throw error
          })
        }

        const dataUrl = await this.convert("file/image-size", {file, size: 2584})
        const dataUrlSize = this.convert("text/length", dataUrl)
        if (dataUrlSize > 1024 * 1024) {
          alert("Datei ist zu groß.")
          this.setNotValidStyle(input)
          throw new Error("image too large")
        }

        const image = {}
        image.name = file.name
        image.type = file.type
        image.size = dataUrlSize
        image.modified = Date.now()
        image.dataUrl = dataUrl
        this.setValidStyle(input)
        return resolve(image)

      })


    }

    if (event === "map/div") {

      return new Promise((resolve, reject) => {

        const div = this.create("info/loading", )
        div.classList.add("json")
        div.style.margin = "21px 34px"

        const buttons = document.createElement("div")
        buttons.classList.add("buttons")
        buttons.style.display = "flex"
        buttons.style.justifyContent = "space-between"
        buttons.style.alignItems = "center"
        div.append(buttons)

        const foldAllButton = this.create("div/action", buttons)
        foldAllButton.innerHTML = "fold"

        foldAllButton.addEventListener("click", function() {
          toggleAllValues("none");
        });

        const unfoldAllButton = this.create("div/action", buttons)
        unfoldAllButton.innerHTML = "unfold"
        unfoldAllButton.addEventListener("click", function() {
          toggleAllValues("block");
        });

        function toggleAllValues(displayValue) {
          const valueElements = div.querySelectorAll(".key-value");
          valueElements.forEach(element => {
            element.style.display = displayValue;
          });
        }

        function toggleValue(event) {
          const element = event.target.nextSibling
          if (element !== null) {
            element.style.display = element.style.display === "none" ? "block" : "none";
          }
        }

        function processObject(container, obj) {
          for (const key in obj) {
            const value = obj[key];

            const keyElement = Helper.convert("key/div", key)
            const valueElement = Helper.convert("value/div", value)


            if (Helper.verifyIs("string", value)) {
              valueElement.setAttribute("value-type", "string")
            }


            if (Helper.verifyIs("boolean", value)) {
              valueElement.setAttribute("value-type", "boolean")
            }

            const keyName = document.createElement("div")
            keyName.classList.add("key-name")
            keyName.textContent = key

            keyElement.appendChild(keyName)
            container.appendChild(keyElement);
            keyElement.appendChild(valueElement);

            keyElement.addEventListener("click", toggleValue);

            if (typeof value === "object") {
              processObject(valueElement, value);
              valueElement.addEventListener("click", toggleValue);

            } else {
              valueElement.textContent = JSON.stringify(value);
              // return resolve(div)
              // see render map/div
            }
          }
        }

        processObject(div, input);

        // return div
        // return resolve(div)

      })


    }

    if (event === "div/map") {


      if (input.classList.contains("user-json")) {

        const map = {}

        function processJsonKey(container) {
            container.querySelectorAll('.json-key').forEach(element => {

              const keyName = element.querySelector(".key-name")
              const keyValue = element.querySelector(".key-value")

              // check key value
              // if not json key inside

              // if json key inside
              // do it again
              // break until there is no json key inside
              // console.log(keyName.textContent);
              // console.log(JSON.parse(keyName.textContent));
              // let key
              if (keyValue.querySelector(".json-key") !== null) {
                const json = `{${keyName.textContent}: {}}`
                // const json = `{${keyName.textContent}: {${keyValue.textContent}: }}`
                // console.log("value has key", json);

                // try json parse here
                key = JSON.parse(keyName.textContent)
                map[key] = {}
                // console.log("map has key", map);

                // try {
                //   const test = JSON.parse(json)
                //   console.log(test);
                //   processJsonKey(keyValue.querySelector(".json-key"))
                // } catch (error) {
                //   console.log(error);
                // }

              } else {
                const json = `{${keyName.textContent}:${keyValue.textContent}}`
                // console.log("value has value", json);

                if (key !== undefined) {
                  map[key] = keyValue.textContent

                }
                // console.log("map has value", map);
                // map[JSON.parse(keyName.textContent)] = keyValue.textContent

              }

              // tell the json key what type he contains

            })
        }

        // console.log("key", key);
        // console.log("value", value);

        processJsonKey(input)

        console.log("map", map);


      }

    }

    if (event === "key/div") {
      const div = document.createElement("div");
      div.classList.add("json-key")
      div.style.fontFamily = "monospace";
      div.style.cursor = "pointer";
      div.style.fontWeight = "bold";
      div.style.color = "#2e95d3";
      div.style.fontSize = "21px";

      return div
    }

    if (event === "value/div") {
      const div = document.createElement("div");
      div.classList.add("key-value")
      div.style.display = "none";
      div.style.marginLeft = "21px";
      div.style.whiteSpace = "pre-wrap";
      div.style.color = "#ce9178"
      div.style.fontFamily = "monospace"

      return div
    }

    if (event === "json/div") {

      const div = this.create("div/scrollable")
      div.classList.add("json")
      div.style.margin = "21px 34px"
      // div.style.height = "100%"

      const buttons = document.createElement("div")
      buttons.classList.add("buttons")
      buttons.style.display = "flex"
      buttons.style.justifyContent = "space-between"
      buttons.style.alignItems = "center"
      div.append(buttons)

      const foldAllButton = this.create("div/action", buttons)
      foldAllButton.innerHTML = "fold"

      foldAllButton.addEventListener("click", function() {
        toggleAllValues("none");
      });

      const unfoldAllButton = this.create("div/action", buttons)
      unfoldAllButton.innerHTML = "unfold"
      unfoldAllButton.addEventListener("click", function() {
        toggleAllValues("block");
      });

      function toggleAllValues(displayValue) {
        const valueElements = div.querySelectorAll(".key-value");
        valueElements.forEach(element => {
          element.style.display = displayValue;
        });
      }

      const jsonObject = JSON.parse(input);

      function toggleValue(event) {
        const element = event.target.nextSibling
        if (element !== null) {
          element.style.display = element.style.display === "none" ? "block" : "none";
        }
      }

      function processObject(container, obj) {
        for (const key in obj) {
          const value = obj[key];

          const keyElement = Helper.convert("key/div", key)
          const valueElement = Helper.convert("value/div", value)


          if (Helper.verifyIs("string", value)) {
            valueElement.setAttribute("value-type", "string")
          }


          if (Helper.verifyIs("boolean", value)) {
            valueElement.setAttribute("value-type", "boolean")
          }

          const keyName = document.createElement("div")
          keyName.classList.add("key-name")
          keyName.textContent = key

          keyElement.appendChild(keyName)
          container.appendChild(keyElement);
          keyElement.appendChild(valueElement);

          keyElement.addEventListener("click", toggleValue);

          if (typeof value === "object") {
            processObject(valueElement, value);
            valueElement.addEventListener("click", toggleValue);

          } else {
            valueElement.textContent = JSON.stringify(value);
          }
        }
      }

      processObject(div, jsonObject);

      return div

    }

    if (event === "map/json") {
      return JSON.stringify(input, null, 2)
    }

    // convert text/map ???
    // input regex pattern
    if (event === "error-stack-text/div") {

      // Extract function name, file path, line number, and column number
      const regex = /at (.*) \((.*):(\d*):(\d*)\)/g;
      const matches = [...input.matchAll(regex)];

      if (matches.length === 0) {
        return 'Invalid error stack format';
      }

      const formattedStack = matches.map(match => {
        const [_, functionName, filePath, lineNumber, columnNumber] = match;
        return `
          <div class="error-line">
            <span class="function-name">${functionName}</span>
            <span class="file-path">${filePath}:${lineNumber}:${columnNumber}</span>
          </div>
        `;
      }).join('');

      const div = document.createElement("div")
      div.innerHTML = `
        <div class="error-stack">
          ${formattedStack}
        </div>
      `;
      return div

    }

    if (event === "field/value") {
      return new Promise(async(resolve, reject) => {

        if (input.fieldInput.tagName === "INPUT") {

          if (input.fieldInput.type === "text") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "email") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "tel") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "range") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "password") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "number") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "file") {

            const promises = []
            for (let i = 0; i < input.fieldInput.files.length; i++) {
              const file = input.fieldInput.files[i]
              const promise = this.convert("file/type", file)

              promises.push(promise)
            }

            const results = await Promise.all(promises)

            const map = {}
            map[input.fieldId] = results
            return resolve(map)
          }

          if (input.fieldInput.type === "date") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "checkbox") {
            const map = {}
            map[input.fieldId] = input.fieldInput.checked
            return resolve(map)
          }

        }

        if (input.fieldInput.tagName === "TEXTAREA") {
          const map = {}
          map[input.fieldId] = input.fieldInput.value
          return resolve(map)
        }

        if (input.fieldInput.tagName === "SELECT") {
          const selected = []
          for (let i = 0; i < input.fieldInput.options.length; i++) {
            const option = input.fieldInput.options[i]
            if (option.selected === true) {
              selected.push(option.value)
            }
          }
          const map = {}
          map[input.fieldId] = selected
          return resolve(map)
        }

      })
    }

    if (event === "field/on-info-click") {

      const labelContainer = input.querySelector(".field-label-container")
      const label = input.querySelector(".field-label")

      if (input.querySelector(".field-image") === null) {
        const image = document.createElement("div")
        image.classList.add("field-image")
        image.style.width = "34px"
        image.style.marginRight = "21px"
        this.render("icon/node/path", "/public/info-circle.svg", image)
        label.before(image)
      }

      labelContainer.style.cursor = "pointer"
      labelContainer.childNodes.forEach(child => child.style.cursor = "pointer")
      labelContainer.addEventListener("click", () => {

        this.overlay("info", overlay => {
          const content = this.create("div/scrollable", overlay)
          content.innerHTML = input.getAttribute("on-info-click")
        })

      })

    }

    if (event === "field-input/key-value") {
      return new Promise(async(resolve, reject) => {

        if (input.fieldInput.tagName === "INPUT") {

          if (input.fieldInput.type === "text") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "email") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "tel") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "range") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "password") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "number") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "file") {

            const promises = []
            for (let i = 0; i < input.fieldInput.files.length; i++) {
              const file = input.fieldInput.files[i]
              const promise = this.convert("file/type", file)

              promises.push(promise)
            }

            const results = await Promise.all(promises)

            const map = {}
            map[input.fieldId] = results
            return resolve(map)
          }

          if (input.fieldInput.type === "date") {
            const map = {}
            map[input.fieldId] = input.fieldInput.value
            return resolve(map)
          }

          if (input.fieldInput.type === "checkbox") {
            const map = {}
            map[input.fieldId] = input.fieldInput.checked
            return resolve(map)
          }

        }

        if (input.fieldInput.tagName === "TEXTAREA") {
          const map = {}
          map[input.fieldId] = input.fieldInput.value
          return resolve(map)
        }

        if (input.fieldInput.tagName === "SELECT") {
          const selected = []
          for (let i = 0; i < input.fieldInput.options.length; i++) {
            const option = input.fieldInput.options[i]
            if (option.selected === true) {
              selected.push(option.value)
            }
          }
          const map = {}
          map[input.fieldId] = selected
          return resolve(map)
        }

      })
    }

    if (event === "field-funnel/trees") {
      return new Promise(async(resolve, reject) => {

        try {

          if (this.verifyIs("tag/empty", input.id)) {
            window.alert("Field Funnel ist nicht gültig: id ist kein tag")
            throw new Error("field funnel id is empty")
          }

          const trees = []
          input.querySelectorAll(".field").forEach(field => {


            if (this.verifyIs("tag/empty", field.id)) {
              window.alert("Datenfeld ist nicht gültig: id ist kein tag")
              throw new Error("field id is empty")
            }

            trees.push(`${window.location.pathname.split("/")[2]}.${input.id}.${field.id}`)

          })

          resolve(trees)

        } catch (error) {
          return reject(error)
        }

      })
    }

    if (event === "field-funnel/map") {
      return new Promise(async(resolve, reject) => {

        try {

          const res = await this.verifyIs("field-funnel/valid", input)

          if (res === true) {

            const promises = []
            input.querySelectorAll(".field").forEach(field => {

              if (this.verifyIs("tag/empty", field.id)) {
                window.alert("Datenfeld ist nicht gültig: id ist kein tag")
                return reject(new Error("field tag is empty"))
              }

              field.querySelectorAll(".field-input").forEach(fieldInput => {

                const map = {}
                map.fieldId = field.id
                map.fieldInput = fieldInput

                const promise = this.convert("field-input/key-value", map)

                promises.push(promise)

              })

            })

            const results = await Promise.all(promises)

            const map = results.reduce((result, keyValue) => {
              return { ...result, ...keyValue }
            }, {})

            return resolve(map)

          } else {
            return reject(new Error("funnel invalid"))
          }

        } catch (error) {
          return reject(error)
        }

      })
    }

    if (event === "file/type") {

      if (input.type === "image/png") {
        return new Promise(async (resolve, reject) => {
          const allowedMimeTypes = ["image/png"]
          const allowedExtensions = ["png"]

          await this.verifyIs("file/types", {file: input, types: allowedMimeTypes})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          const fileReader = new FileReader()
          fileReader.onload = () => {

            const dataUrlSize = this.convert("text/length", fileReader.result)
            if (dataUrlSize > 5 * 1024 * 1024) {
              window.alert("Datei ist zu groß: max 5MB")
              return reject(new Error("file too large"))
            }

            const map = {}
            map.name = input.name
            map.type = input.type
            map.size = dataUrlSize
            map.modified = Date.now()
            map.dataUrl = fileReader.result

            return resolve(map)
          }
          fileReader.readAsDataURL(input)

        })
      }

      if (input.type === "image/jpeg") {
        return new Promise(async (resolve, reject) => {
          const allowedMimeTypes = ["image/jpeg"]
          const allowedExtensions = ["jpg", "jpeg"]

          await this.verifyIs("file/types", {file: input, types: allowedMimeTypes})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          const fileReader = new FileReader()
          fileReader.onload = () => {

            const dataUrlSize = this.convert("text/length", fileReader.result)
            if (dataUrlSize > 5 * 1024 * 1024) {
              window.alert("Datei ist zu groß: max 5MB")
              return reject(new Error("file too large"))
            }

            const map = {}
            map.name = input.name
            map.type = input.type
            map.size = dataUrlSize
            map.modified = Date.now()
            map.dataUrl = fileReader.result

            return resolve(map)
          }
          fileReader.readAsDataURL(input)

        })
      }

      if (input.type === "application/pdf") {
        return new Promise(async (resolve, reject) => {
          const allowedMimeTypes = ["application/pdf"]
          const allowedExtensions = ["pdf"]

          await this.verifyIs("file/types", {file: input, types: allowedMimeTypes})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          const fileReader = new FileReader()
          fileReader.onload = () => {

            const dataUrlSize = this.convert("text/length", fileReader.result)
            if (dataUrlSize > 5 * 1024 * 1024) {
              window.alert("Datei ist zu groß: max 5MB")
              return reject(new Error("file too large"))
            }

            const map = {}
            map.name = input.name
            map.type = input.type
            map.size = dataUrlSize
            map.modified = Date.now()
            map.dataUrl = fileReader.result

            return resolve(map)
          }
          fileReader.readAsDataURL(input)

        })
      }

      if (input.type === "text/html") {
        return new Promise(async (resolve, reject) => {
          const allowedMimeTypes = ["text/html"]
          const allowedExtensions = ["html"]

          await this.verifyIs("file/types", {file: input, types: allowedMimeTypes})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})
          .catch(error => {
            alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          const fileReader = new FileReader()
          fileReader.onload = () => {

            const map = {}
            map.name = input.name
            map.type = input.type
            map.size = input.size
            map.modified = Date.now()
            map.html = this.convert("text/sanatized-html", fileReader.result)

            return resolve(map)
          }
          fileReader.readAsText(input)

        })
      }

      if (input.type === "image/svg+xml") {
        return new Promise(async (resolve, reject) => {
          const allowedMimeTypes = ["image/svg+xml"]
          const allowedExtensions = ["svg"]

          await this.verifyIs("file/types", {file: input, types: allowedMimeTypes})
          .catch(error => {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})
          .catch(error => {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            return reject(error)
          })

          const fileReader = new FileReader()
          fileReader.onload = () => {

            const map = {}
            map.name = input.name
            map.type = input.type
            map.size = input.size
            map.modified = Date.now()
            map.svg = this.convert("text/sanatized-html", fileReader.result)

            return resolve(map)
          }
          fileReader.readAsText(input)

        })
      }
    }

    if (event === "date/life-path") {
      const digits = [...input.toString()].map(digit => parseInt(digit))

      let sum = 0
      for (let i = 0; i < digits.length; i++) {
        const digit = digits[i]
        if (this.verifyIs("number/empty", digit)) continue
        sum += digit
      }

      while (sum > 9) {
        sum = [...sum.toString()].reduce((acc, digit) => acc + parseInt(digit), 0)
      }

      return sum
    }

    if (event === "date/master") {
      const digits = [...input.toString()].map(digit => parseInt(digit, 10)).filter(Number.isFinite)

       let sum = digits.reduce((acc, digit) => acc + digit, 0)
       let prevSum = sum

       while (![11, 22, 33].includes(sum)) {
         prevSum = sum
         sum = [...sum.toString()].map(digit => parseInt(digit, 10)).reduce((acc, digit) => acc + digit, 0)
         if (![11, 22, 33].includes(sum) && ![0, 1, 4, 6, 7, 9].includes(sum)) {
           break
         }
       }

       return ![11, 22, 33].includes(sum) ? prevSum : sum
    }

    if (event === "date/life-path-calc-text") {
      const digits = [...input.toString()].map(digit => parseInt(digit))

      let text
      for (let i = 0; i < digits.length; i++) {
        const digit = digits[i]
        if (this.verifyIs("number/empty", digit)) continue
        if (text === undefined) {
          text = digit
        } else {
          text = text + " + " + digit
        }
      }
      return text
    }

    if (event === "styles/text") {
      const styles = input.style
      const div = document.createElement("div")
      for (let i = 0; i < styles.length; i++) {
        const key = styles[i]
        const value = styles.getPropertyValue(key)
        div.append(`${key}: ${value};\n`)
      }
      return div.innerHTML

    }

    if (event === "clipboard/text") {
      return navigator.clipboard.readText()
    }

    if (event === "node-text/width") {
      const canvas = document.createElement("canvas")
      const context = canvas.getContext("2d")
      context.font = window.getComputedStyle(input.node).getPropertyValue("font")
      const metrics = context.measureText(input.text)
      return metrics.width
    }

    if (event === "node-text/slice-width") {

      let node = input.node
      let text = input.text
      let width = this.convert("node-text/width", {node, text})
      let greaterThanWidth = false

      while (width > input.width) {
        text = text.slice(0, -1)
        node.textContent = text
        width = this.convert("node-text/width", {node, text})
        greaterThanWidth = true
      }

      if (greaterThanWidth) {
        node.textContent = `${text} ..`
      } else {
        node.textContent = text
      }
      return text

    }

    if (event === "path/field-funnel") {
      return new Promise(async(resolve, reject) => {
        try {
          const text = await this.convert("path/text", input)
          const doc = this.convert("text/doc", text)
          const fieldFunnel = doc.querySelector(".field-funnel")
          if (fieldFunnel) {
            resolve(fieldFunnel)
          }

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "text/icon") {
      return new Promise(async(resolve, reject) => {
        try {
          const icon = await this.render("icon/node/path", `/public/${input}`)
          resolve(icon)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "path/text") {
      return new Promise(async(resolve, reject) => {
        try {
          const response = await fetch(input)
          if (!response.ok) {
            throw new Error(`Failed to fetch: ${response.status} ${response.statusText}`)
          }
          const result = await response.text()
          resolve(result)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "text/clipboard") {
      return navigator.clipboard.writeText(input)
    }

    if (event === "text/digest") {
      return new Promise(async(resolve, reject) => {
        try {
          const data = new TextEncoder().encode(input)
          const hashBuffer = await crypto.subtle.digest('SHA-256', data)
          const hashArray = Array.from(new Uint8Array(hashBuffer))
          const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('')
          resolve(hashHex)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "text/js") {
      return new Promise((resolve, reject) => {
        try {
          eval(input)
          resolve()
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "text/number") {
      return Number(input)
    }

    if (event === "text/doc") {
      const parser = new DOMParser()
      const doc = parser.parseFromString(input, "text/html")
      return doc
    }

    if (event === "text/document") {
      return new Promise((resolve, reject) => {

        try {
          document.open()
          document.write(input)
          document.close()
          return resolve()
        } catch (error) {
          return reject(error)
        }

      })
    }

    if (event === "text/dom") {
      const parser = document.createElement("div")
      parser.innerHTML = input
      return parser.children[0]
    }

    if (event === "text/script") {

      const container = document.createElement("div")
      container.innerHTML = input
      return container.children[0]

    }

    if (event === "js/script") {

      const script = document.createElement("script")
      script.innerHTML = input
      return script

    }

    if (event === "uri/text") {

      input.replace(/%20/g, "-")
      input.replace(/u%CC%88/g, "ue")
      input.replace(/a%CC%88/g, "ae")
      input.replace(/o%CC%88/g, "oe")
      input.replace(/%2F/g, "-")
      input.replace(/%C3%A4/g, "ae")
      input.replace(/%C3%BC/g, "ue")
      input.replace(/\(/g, "")
      input.replace(/\)/g, "")
      input.replace(/%C3%B6/g, "oe")
      input.replace(/%C3%96/g, "Oe")
      input.replace(/\./g, "-")
      input.replace(/%C3%9F/g, "ss")
      input.replace(/%3F/g, "")
      input.replace(/-$/g, "")

      return input
    }

    if (event === "text/uri") {
      return encodeURIComponent(input)
    }

    if (event === "text/sanatized-html") {
      // events
      input = input.replace(/on\w+="[^"]*"/gi, "")

      // chars
      input = input.replace(/{{(.*?)}}/g, "")
      input = input.replace(/\[\[(.*?)\]\]/g, "")

      // attributes
      input = input.replace(/src=["'`](.*?)["'`]/gi, "")
      input = input.replace(/href=["'`](.*?)["'`]/gi, "")

      // css
      input = input.replace(/expression\([^)]*\)/gi, "")
      input = input.replace(/url\((['"]?)(.*?)\1\)/gi, "")

      // js
      input = input.replace(/javascript:/gi, "")

      // tags
      input = input.replace(/<img\b[^>]*>/gi, "")
      input = input.replace(/<link\b[^>]*>/gi, "")
      input = input.replace(/<input\b[^>]*>/gi, "")
      input = input.replace(/<a\b[^>]*>/gi, "")
      input = input.replace(/<meta\b[^>]*>/gi, "")
      input = input.replace(/<datalist\b[^>]*>/gi, "")
      input = input.replace(/<source\b[^>]*>/gi, "")
      input = input.replace(/<progress\b[^>]*>/gi, "")
      input = input.replace(/<details\b[^>]*>/gi, "")
      input = input.replace(/<summary\b[^>]*>/gi, "")
      input = input.replace(/<script\b[^>]*>/gi, "")
      input = input.replace(/<iframe\b[^>]*>/gi, "")
      input = input.replace(/<object\b[^>]*>/gi, "")
      input = input.replace(/<embed\b[^>]*>/gi, "")
      input = input.replace(/<form\b[^>]*>/gi, "")
      input = input.replace(/<textarea\b[^>]*>/gi, "")
      input = input.replace(/<select\b[^>]*>/gi, "")
      input = input.replace(/<button\b[^>]*>/gi, "")
      input = input.replace(/<base\b[^>]*>/gi, "")
      input = input.replace(/<frame\b[^>]*>/gi, "")
      input = input.replace(/<frameset\b[^>]*>/gi, "")
      input = input.replace(/<applet\b[^>]*>/gi, "")
      input = input.replace(/<audio\b[^>]*>/gi, "")
      input = input.replace(/<video\b[^>]*>/gi, "")
      input = input.replace(/<source\b[^>]*>/gi, "")
      input = input.replace(/<track\b[^>]*>/gi, "")
      input = input.replace(/<canvas\b[^>]*>/gi, "")
      input = input.replace(/<svg\b[^>]*>/gi, "")
      input = input.replace(/<math\b[^>]*>/gi, "")
      input = input.replace(/<template\b[^>]*>/gi, "")
      input = input.replace(/<noscript\b[^>]*>/gi, "")
      input = input.replace(/<noembed\b[^>]*>/gi, "")
      input = input.replace(/<plaintext\b[^>]*>/gi, "")
      input = input.replace(/<marquee\b[^>]*>/gi, "")
      input = input.replace(/<blink\b[^>]*>/gi, "")
      input = input.replace(/<layer\b[^>]*>/gi, "")
      input = input.replace(/<ilayer\b[^>]*>/gi, "")
      input = input.replace(/<basefont\b[^>]*>/gi, "")
      input = input.replace(/<isindex\b[^>]*>/gi, "")
      input = input.replace(/<keygen\b[^>]*>/gi, "")
      input = input.replace(/<command\b[^>]*>/gi, "")

      return input
    }

    if (event === "text/length") {
      return input.length
    }

    if (event === "text/node") {

      const parser = new DOMParser()
      const doc = parser.parseFromString(input, "text/html")

      return doc.body.firstChild
    }

    if (event === "text/html") {

      const parser = new DOMParser()
      const doc = parser.parseFromString(input, "text/html")

      return doc.body.firstChild
    }

    if (event === "text/field") {

      if (input === "text") {
        return this.create("field/text")
      }

      if (input === "textarea") {
        return this.create("field/textarea")
      }

      if (input === "email") {
        return this.create("field/email")
      }

      if (input === "tel") {
        return this.create("field/tel")
      }

      if (input === "range") {
        return this.create("field/range")
      }

      if (input === "password") {
        return this.create("field/password")
      }

      if (input === "number") {
        return this.create("field/number")
      }

      if (input === "file") {
        return this.create("field/file")
      }

      if (input === "date") {
        return this.create("field/date")
      }

      if (input === "checkbox") {
        return this.create("field/checkbox")
      }

      if (input === "select") {
        return this.create("field/select")
      }

    }

    if (event === "text/h2") {

      const h2 = document.createElement("h2")
      h2.innerHTML = input
      h2.style.fontFamily = "sans-serif"

      h2.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        h2.style.color = this.colors.dark.text
      }

      return h2
    }

    if (event === "text/span") {
      const span = document.createElement("span")
      span.textContent = input

      return span
    }

    if (event === "text/svg") {
      const parser = new DOMParser()
      const svgDoc = parser.parseFromString(input, 'image/svg+xml')
      return svgDoc.documentElement
    }

    if (event === "text/capital-first-letter") {
      return input.charAt(0).toUpperCase() + input.slice(1)
    }

    if (event === "tree/class") {
      return input.replace(/\./g, "-")
    }

    if (event === "parent/box") {

      if (input.classList.contains("box")) {
        input.classList.toggle("box")

        input.style.margin = null
        input.style.padding = null
        input.style.borderRadius = null
        input.style.boxShadow = null

      } else {

        input.style.margin = "21px 34px"
        input.style.padding = "8px"
        input.style.borderRadius = "3px"
        input.style.boxShadow = "rgba(0, 0, 0, 0.16) 0px 1px 4px"
      }

      return input
    }

    if (event === "parent/space-around") {

      input.style.display = "flex"
      input.style.flexWrap = "wrap"
      input.style.justifyContent = "space-around"

      return input
    }

    if (event === "parent/space-between") {

      input.style.display = "flex"
      input.style.flexWrap = "wrap"
      input.style.justifyContent = "space-between"

      return input
    }

    if (event === "parent/flex-shrink-height") {

      input.style.alignSelf = null

      return input
    }

    if (event === "parent/flex-shrink-width") {

      input.style.width = null

      return input
    }

    if (event === "parent/flex-grow-height") {

      input.style.alignSelf = "stretch"

      return input
    }

    if (event === "parent/flex-grow-width") {

      input.style.width = "100%"

      return input
    }

    if (event === "parent/flex-bottom") {

      input.style.display = "flex"
      input.style.alignItems = "flex-end"

      return input
    }

    if (event === "parent/flex-vertical") {

      input.style.display = "flex"
      input.style.alignItems = "center"

      return input
    }

    if (event === "parent/flex-top") {

      input.style.display = "flex"
      input.style.alignItems = "flex-start"

      return input
    }

    if (event === "parent/flex-right") {

      input.style.display = "flex"
      input.style.alignItems = "flex-end"
      input.style.flexWrap = "wrap"

      return input
    }

    if (event === "parent/flex-center") {

      input.style.display = "flex"
      input.style.alignItems = "center"
      input.style.flexWrap = "wrap"

      return input
    }

    if (event === "parent/flex-left") {

      input.style.display = "flex"
      input.style.alignItems = "flex-start"
      input.style.flexWrap = "wrap"

      return input
    }

    if (event === "parent/flex-column") {

      input.style.flexWrap = null

      input.style.display = "flex"
      input.style.flexDirection = "column"

      return input
    }

    if (event === "parent/flex-row") {

      input.style.flexDirection = null

      input.style.display = "flex"
      input.style.flexWrap = "wrap"

      return input
    }

    if (event === "parent/dark") {


      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        if (input.tagName === "BODY") {
          input.style.background = this.colors.dark.background
        }
      }


    }

    if (event === "parent/loading") {

      this.convert("element/reset", input)
      input.style.display = "flex"
      input.style.flexDirection = "column"
      input.style.justifyContent = "center"
      input.style.alignItems = "center"
      input.style.height = "100%"
      input.loading = this.create("div", input)
      this.render("icon/node/path", "/public/loading.svg", input.loading)
      input.loading.style.fill = this.colors.light.error
      input.loading.style.width = "55px"
      input.loading.style.margin = "8px"
      input.info = this.create("div", input)
      input.info.innerHTML = "Das kann einen Moment dauern .."
      input.info.style.color = this.colors.light.error
      input.info.style.fontSize = "13px"
      input.info.style.fontFamily = "sans-serif"
      return input

    }

    if (event === "parent/scrollable") {
      this.convert("element/reset", input)
      input.style.overflowY = "auto"
      input.style.overscrollBehavior = "none"
      input.style.paddingBottom = "144px"
      return input
    }

    if (event === "parent/info") {
      this.convert("element/reset", input)
      input.style.position = "absolute"
      input.style.top = "0"
      input.style.left = "0"
      input.style.height = "89vh"
      input.style.width = "100%"
      input.style.display = "flex"
      input.style.justifyContent = "center"
      input.style.alignItems = "center"
      input.style.zIndex = "-1"
      input.style.fontFamily = "sans-serif"
      input.style.textAlign = "center"

      input.style.color = "gray"

      return input
    }

    if (event === "parent/navigation-open") {
      this.convert("element/reset", input)
      input.style.overflowY = "auto"
      input.style.overscrollBehavior = "none"
      input.style.paddingBottom = "144px"

      this.create("nav/open", input)

      return input
    }

    if (event === "script/disabled-aware") {

      if (this.verifyIs("text/empty", input.id)) {
        const confirm = window.confirm("Dein Skript hat keine Id. Möchtest du deinem Skript eine Id vergeben?")
        if (confirm) {
          const prompt = window.prompt("Gebe eine Id ein:")
          if (!this.verifyIs("text/empty", prompt)) {
            input.id = prompt
          }
        } else {
          window.alert("Dein Skript braucht eine Id um es schaltbar zu machen.")
          throw new Error("script id required")
        }
      }

      const first = `import {Helper} from "/js/Helper.js"`
      const second = `if (Helper.verifyIs("script-id/disabled", "${input.id}")) throw new Error("script#${input.id} disabled")`

      if (!input.textContent.includes(second)) {
        let text = input.textContent

        if (input.textContent.includes(first)) {
          const regex = new RegExp(`.*${first}.*\n`, "g")
          text = text.replace(regex, "")
        }

        text = first + "\n" + second + "\n" + text
        input.textContent = text
      }

      if (input.innerHTML.includes("Helper")) {
        input.type = "module"
      } else {
        input.type = "text/javascript"
      }

      return input
    }

    if (event === "script/disabled") {

      this.convert("script/disabled-aware", input)

      const scripts = JSON.parse(window.localStorage.getItem("scripts")) || []
      const map = {}
      map.id = input.id
      map.disabled = true
      scripts.unshift(map)
      window.localStorage.setItem("scripts", JSON.stringify(scripts))
      window.alert("Skript wurde ausgeschaltet.")
    }

    if (event === "script/enabled") {

      this.convert("script/disabled-aware", input)

      const scripts = JSON.parse(window.localStorage.getItem("scripts")) || []
      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i]
        if (script.id === input.id) {
          scripts.splice(i, 1)
          window.localStorage.setItem("scripts", JSON.stringify(scripts))
          window.alert("Skript wurde eingeschaltet.")
        }
      }

    }

    if (event === "selector/dark-light") {
      const node = document.querySelector(input)
      if (node) {
        this.convert("node/dark-light", node)
      }
    }

    if (event === "element/button-right") {
      this.convert("element/reset", input)
      input.style.margin = "21px 34px"
      input.style.fontSize = "13px"
      input.style.fontFamily = "sans-serif"

      input.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        input.style.color = this.colors.dark.text
      }

      return input
    }

    if (event === "element/checked") {
      this.convert("element/reset", input)
      input.innerHTML = "✓"
      input.style.margin = "21px 34px"
      input.style.color = "#00c853"
      input.style.fontSize = "34px"
      input.style.fontFamily = "sans-serif"
      return input
    }

    if (event === "element/scrollable") {
      this.convert("element/reset", input)
      input.style.overflowY = "auto"
      input.style.overscrollBehavior = "none"
      input.style.paddingBottom = "144px"
      return input
    }

    if (event === "millis/dd.mm.yyyy hh:mm") {
      const date = new Date(input)

      const day = date.getDate().toString().padStart(2, "0")
      const month = (date.getMonth() + 1).toString().padStart(2, "0")
      const year = date.getFullYear().toString()
      const hours = date.getHours().toString().padStart(2, "0")
      const minutes = date.getMinutes().toString().padStart(2, "0")

      return `${day}.${month}.${year} ${hours}:${minutes}`
    }

    if (event === "millis/dd.mm.yyyy") {
      const date = new Date(input)

      const day = date.getDate().toString().padStart(2, '0')
      const month = (date.getMonth() + 1).toString().padStart(2, '0')
      const year = date.getFullYear().toString()

      return `${day}.${month}.${year}`
    }

    if (event === "millis/yyyy") {
      const date = new Date(parseInt(input))
      return date.getFullYear()
    }

    if (event === "element/center") {
      this.convert("element/reset", input)
      input.style.position = "absolute"
      input.style.top = "0"
      input.style.left = "0"
      input.style.height = "89vh"
      input.style.width = "100%"
      input.style.display = "flex"
      input.style.justifyContent = "center"
      input.style.alignItems = "center"

      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        input.style.color = this.colors.dark.text
      } else {
        input.style.color = this.colors.light.text
      }

      return input
    }

    if (event === "text/img") {
      const img = document.createElement("img")
      img.src = input
      return img
    }

    if (event === "text/svg") {
      const container = document.createElement("div")
      container.innerHTML = input

      // sanatize svg
      container.children[0].removeAttribute("width")
      container.children[0].removeAttribute("height")

      return container.children[0]
    }

    if (event === "input/alias") {

      const output = document.createElement("div")
      output.style.fontFamily = "monospace"
      output.style.fontSize = "13px"
      output.style.display = "inline"
      output.innerHTML = `&lt; ${input.tagName.toLowerCase()}`

      if (input.id !== "") {
        const id = document.createElement("span")
        id.style.fontSize = "21px"
        id.innerHTML = `#${input.id}`
        output.append(id)
      }

      if (input.hasAttribute("type")) {
        const span = document.createElement("span")
        span.style.fontSize = "21px"
        span.innerHTML = `.${input.getAttribute("type")}`
        output.append(span)
      }

      return output
    }

    if (event === "text/sources") {

      return new Promise(async(resolve, reject) => {
        try {
          let apis
          if (this.verifyIs("text/isbn", input)) {
            apis = [
              `https://openlibrary.org/isbn/${input}.json`,
              `https://www.googleapis.com/books/v1/volumes?q=isbn:${input}`,
            ]
          } else {
            apis = [
              `https://openlibrary.org/search.json?title=${encodeURIComponent(input)}`,
              `https://www.googleapis.com/books/v1/volumes?q=intitle:${encodeURIComponent(input)}`,
              `https://archive.org/advancedsearch.php?q=title:(${encodeURIComponent(input)})&output=json`,
            ]
          }
          const promises = []
          for (let i = 0; i < apis.length; i++) {
            const api = apis[i]
            try {
              const promise = this.convert("api/sources", api)
              promises.push(promise)
            } catch (error) {
              continue
            }

          }
          const results = await Promise.all(promises)
          const sources = [].concat(...results)
          resolve(sources)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "element/zero-z-index-child") {
      return new Promise(async(resolve, reject) => {
        try {

          const nodes = Array.from(input.querySelectorAll("*"))
          // const minZIndex = Math.min(...nodes.map(item => parseInt(item.style.zIndex) || 0))

          for (var i = 0; i < nodes.length; i++) {
            const item = nodes[i]

            const itemZIndex = parseInt(item.style.zIndex)

            if (itemZIndex === 0) {
              resolve(item)
            }

          }

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "element/min-z-index-child") {
      return new Promise(async(resolve, reject) => {
        try {

          const nodes = Array.from(input.querySelectorAll("*"))
          const minZIndex = Math.min(...nodes.map(item => parseInt(item.style.zIndex) || 0))

          for (var i = 0; i < nodes.length; i++) {
            const item = nodes[i]

            const itemZIndex = parseInt(item.style.zIndex) || 0

            if (itemZIndex === minZIndex) {
              resolve(item)
            }

          }



        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "element/max-z-index-child") {
      return new Promise(async(resolve, reject) => {
        try {

          const nodes = Array.from(input.querySelectorAll("*"))
          const maxZIndex = Math.max(...nodes.map(item => parseInt(item.style.zIndex) || 0))

          for (var i = 0; i < nodes.length; i++) {
            const item = nodes[i]

            const itemZIndex = parseInt(item.style.zIndex) || 0

            if (itemZIndex === maxZIndex) {
              resolve(item)
            }

          }



        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "element/selector") {
      return new Promise(async(resolve, reject) => {
        try {

          if (!(input instanceof Element)) throw new Error("not an input")

          const tagName = input.tagName.toLowerCase()

          const id = input.id ? `#${input.id}` : ''

          const classes = input.className
            ? `.${input.className.split(' ').join('.')}`
            : ''

          const selector = `${tagName}${id}${classes}`

          resolve(selector)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "element/tagName") {

      return input.tagName

    }

    if (event === "element/alias") {

      const output = document.createElement("div")
      output.style.fontFamily = "monospace"
      output.style.fontSize = "13px"
      output.style.overflow = "auto"
      output.style.display = "inline"
      output.innerHTML = `&lt;${input.tagName.toLowerCase()}`

      if (input.id !== "") {
        const id = document.createElement("span")
        id.style.fontSize = "21px"
        id.innerHTML = `#${input.id}`
        output.append(id)
      }

      if (input.id === "") {
        if (input.getAttribute("data-id") !== null) {
          const id = document.createElement("span")
          id.style.fontSize = "21px"
          id.innerHTML = `#${input.getAttribute("data-id")}`
          output.append(id)
        }
      }

      if (input.classList.length > 0) {

        for (let i = 0; i < input.classList.length; i++) {
          const className = input.classList[i]
          const span = document.createElement("span")
          span.style.fontSize = "21px"
          span.innerHTML = `.${className}`
          output.append(span)
        }

      }

      return output
    }

    if (event === "element/reset") {
      input.removeAttribute("style")
      input.innerHTML = ""
    }

    if (event === "element/textarea") {

      const create = document.createElement("textarea")

      if (input.hasAttribute("id")) {
        create.setAttribute("id", input.getAttribute("id"))
      }

      if (input.hasAttribute("class")) {
        create.setAttribute("class", input.getAttribute("class"))
      }

      if (input.hasAttribute("style")) {
        create.setAttribute("style", input.getAttribute("style"))
      }

      if (input.hasAttribute("required")) {
        create.setAttribute("required", input.getAttribute("required"))
      }

      if (input.hasAttribute("on-info-click")) {
        create.setAttribute("on-info-click", input.getAttribute("on-info-click"))
      }

      input.before(create)
      input.remove()
    }

    if (event === "element/select") {

      const create = document.createElement("select")

      if (input.hasAttribute("id")) {
        create.setAttribute("id", input.getAttribute("id"))
      }

      if (input.hasAttribute("class")) {
        create.setAttribute("class", input.getAttribute("class"))
      }

      if (input.hasAttribute("style")) {
        create.setAttribute("style", input.getAttribute("style"))
      }

      if (input.hasAttribute("on-info-click")) {
        create.setAttribute("on-info-click", input.getAttribute("on-info-click"))
      }

      input.before(create)
      input.remove()
    }

    if (event === "node/dark-light") {

      if (input.classList.contains("button")) {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          input.style.backgroundColor = this.colors.dark.background
          input.style.color = this.colors.dark.text
        } else {
          input.style.color = this.colors.light.text
          input.style.backgroundColor = this.colors.light.background

        }

      }


      if (input.tagName === "BODY") {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          input.style.backgroundColor = this.colors.dark.background
          input.style.color = this.colors.dark.text
        } else {
          input.style.color = this.colors.light.text
          input.style.backgroundColor = this.colors.light.background

        }

      }

      if (input.classList.contains("field")) {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          input.style.backgroundColor = this.colors.dark.foreground
          input.style.border = this.colors.dark.border
          input.style.boxShadow = this.colors.dark.boxShadow
          input.style.color = this.colors.dark.text
          input.querySelector(".field-label").style.color = this.colors.dark.text
          input.querySelector(".field-input").style.backgroundColor = this.colors.dark.background
          input.querySelector(".field-input").style.color = this.colors.dark.text

          for (let i = 0; i < input.querySelectorAll("*").length; i++) {
            const child = input.querySelectorAll("*")[i]


            if (child.tagName === "A") {
              child.style.color = this.colors.link.active
            }

            if (child.hasAttribute("fill")) {
              child.setAttribute("fill", this.colors.dark.text)
            }
          }

        } else {
          input.style.backgroundColor = this.colors.light.foreground
          input.style.border = this.colors.light.border
          input.style.boxShadow = this.colors.light.boxShadow
          input.style.color = this.colors.light.text
          input.querySelector(".field-label").style.color = this.colors.light.text
          input.querySelector(".field-input").style.backgroundColor = this.colors.light.background
          input.querySelector(".field-input").style.color = this.colors.light.text

          for (let i = 0; i < input.querySelectorAll("*").length; i++) {
            const child = input.querySelectorAll("*")[i]

            if (child.tagName === "A") {
              child.style.color = this.colors.link.color
            }

            if (child.hasAttribute("fill")) {
              child.setAttribute("fill", this.colors.light.text)
            }
          }

        }

      }

      if (input.classList.contains("html-feedback-button")) {

        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          input.style.boxShadow = this.colors.dark.boxShadow
          input.style.border = this.colors.dark.border
          input.style.backgroundColor = this.colors.dark.foreground
        } else {
          input.style.boxShadow = this.colors.light.boxShadow
          input.style.border = this.colors.light.border
          input.style.backgroundColor = this.colors.light.foreground
        }

        for (let i = 0; i < input.querySelectorAll("*").length; i++) {
          const child = input.querySelectorAll("*")[i]


          if (child.hasAttribute("fill")) {

            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {

              if (child.getAttribute("fill") === this.colors.light.text) {
                child.setAttribute("fill", this.colors.dark.text)
              }

              if (child.getAttribute("fill") === this.colors.light.background) {
                child.setAttribute("fill", this.colors.dark.background)
              }

              continue
            } else {

              if (child.getAttribute("fill") === this.colors.dark.text) {
                child.setAttribute("fill", this.colors.light.text)
              }

              if (child.getAttribute("fill") === this.colors.dark.background) {
                child.setAttribute("fill", this.colors.light.background)
              }

              continue
            }

          }

          if (child.classList.contains("feedback-counter")) {
            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
              child.style.color = this.colors.dark.text
              child.style.background = this.colors.dark.foreground
            } else {
              child.style.color = this.colors.light.text
              child.style.background = this.colors.light.foreground
            }
          }

        }

      }

      if (input.classList.contains("back-button")) {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          input.style.boxShadow = this.colors.dark.boxShadow
          input.style.border = this.colors.dark.border
          input.style.backgroundColor = this.colors.dark.foreground
        } else {
          input.style.boxShadow = this.colors.light.boxShadow
          input.style.border = this.colors.light.border
          input.style.backgroundColor = this.colors.light.foreground
        }

        input.querySelectorAll("*").forEach((child, i) => {

          if (child.hasAttribute("stroke")) {
            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
              child.setAttribute("stroke", `${this.colors.dark.text}`)
            } else {
              child.setAttribute("stroke", `${this.colors.light.text}`)
            }
          }

        })

      }

    }

    if (event === "node/dark-light-toggle") {

      const textColor = window.getComputedStyle(input).color
      const luminance = this.convert("rgb/luminance", textColor)

      if (luminance > 0.5) {
        // text color ist sehr hell

        if (input.classList.contains("field")) {
          input.style.backgroundColor = this.colors.light.foreground
          input.style.border = this.colors.light.border
          input.style.boxShadow = this.colors.light.boxShadow
          input.style.color = this.colors.light.text
          input.querySelector(".field-label").style.color = this.colors.light.text
          input.querySelector(".field-input").style.backgroundColor = this.colors.light.background
          input.querySelector(".field-input").style.color = this.colors.light.text
          for (let i = 0; i < input.querySelectorAll("*").length; i++) {
            const child = input.querySelectorAll("*")[i]
            if (child.tagName === "A") {
              child.style.color = this.colors.link.color
            }
            if (child.hasAttribute("fill")) {
              child.setAttribute("fill", this.colors.light.text)
            }
          }
        }

      } else {
        // text ist sehr dunkel

      }

    }

    if (event === "node/index") {
      return Array.from(input.parentElement.children).indexOf(input)
    }

    if (event === "node/max-z-index") {

      let maxZIndex = 0
      for (let i = 0; i < input.children.length; i++) {
        const child = input.children[i]
        const zIndex = getComputedStyle(child).zIndex
        if (zIndex !== 'auto') {
          const zIndexValue = parseInt(zIndex)
          if (!isNaN(zIndexValue)) {
            maxZIndex = Math.max(maxZIndex, zIndexValue)
          }
        }
      }
      return maxZIndex

    }

    if (event === "node/min-z-index") {

      let minZIndex = 0
      for (let i = 0; i < input.children.length; i++) {
        const child = input.children[i]
        const zIndex = getComputedStyle(child).zIndex
        if (zIndex !== 'auto') {
          const zIndexValue = parseInt(zIndex)
          if (!isNaN(zIndexValue)) {
            minZIndex = Math.min(minZIndex, zIndexValue)
          }
        }
      }
      return minZIndex

    }

    if (event === "node/selected") {
      input = document.querySelector("[selected-node='true']")
    }

    if (event === "node/selector") {

      if (!(input instanceof Element)) throw new Error("not an element")
      const tagName = input.tagName.toLowerCase()
      const id = input.id ? `#${input.id}` : ''
      const classes = input.className
      ? `.${input.className.split(' ').join('.')}`
      : ''
      return `${tagName}${id}${classes}`

    }

    if (event === "node/sort-children-by-z-index") {
      Array.from(input.children)
      .sort((a, b) => {
        const zIndexA = parseInt(a.style.zIndex) || 0
        const zIndexB = parseInt(b.style.zIndex) || 0
        return zIndexB - zIndexA
      })
      .forEach(child => input.appendChild(child))
    }

  }

  static delete(event, input) {
    // event = thing/from/algorithm

    if (event === "id/contacts/self") {

      return new Promise(async (resolve, reject) => {

        try {
          const del = {}
          del.url = "/delete/contacts/closed/"
          del.type = "id-self"
          del.id = input
          const res = await this.request("closed/json", del)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "id/templates/self") {

      return new Promise(async (resolve, reject) => {
        try {
          const del = {}
          del.url = "/delete/templates/closed/"
          del.type = "id-self"
          del.id = input
          const res = await this.request("closed/json", del)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "logs/db/admin") {

      return new Promise(async (resolve, reject) => {

        try {
          const del = {}
          del.url = "/delete/logs/closed/"
          del.type = "super-admin"
          const res = await this.request("closed/json", del)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "user/db/self") {

      return new Promise(async (resolve, reject) => {

        try {
          const del = {}
          del.url = "/delete/user/closed/"
          del.type = "self"
          del.email = input
          const res = await this.request("closed/json", del)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "user/db/admin-closed") {

      return new Promise(async (resolve, reject) => {

        try {
          const del = {}
          del.url = "/delete/user/closed/"
          del.type = "by-admin"
          del.id = input
          const res = await this.request("closed/json", del)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "tag/location/email-expert") {

      return new Promise(async (resolve, reject) => {
        try {
          const del = {}
          del.url = "/delete/location/closed/"
          del.type = "email-expert"
          del.id = input.id
          del.tag = input.tag
          del.path = input.path
          del.email = input.email
          const res = await this.request("closed/json", del)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "tag/location/self") {

      return new Promise(async (resolve, reject) => {
        try {
          const del = {}
          del.url = "/delete/location/closed/"
          del.type = "self"
          del.id = input.id
          del.tag = input.tag
          const res = await this.request("closed/json", del)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "tree/user/admin") {

      return new Promise(async (resolve, reject) => {

        try {
          const del = {}
          del.url = "/delete/user/closed/"
          del.type = "tree-admin"
          del.id = input.id
          del.tree = input.tree
          console.log(del)
          const res = await this.request("closed/json", del)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "key/user/closed") {

      return new Promise(async (resolve, reject) => {

        try {
          const del = {}
          del.url = "/delete/user/closed/"
          del.type = "key"
          del.key = input
          const res = await this.request("closed/json", del)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "script/closed") {

      return new Promise(async (resolve, reject) => {

        try {
          const del = {}
          del.url = "/delete/script/closed/"
          del.type = "condition"
          del.id = input
          const res = await this.request("closed/json", del)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "source/user/self") {

      return new Promise(async (resolve, reject) => {
        try {
          const del = {}
          del.url = "/delete/sources/closed/"
          del.type = "id-self"
          del.id = input.created
          const res = await this.request("closed/json", del)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "match-maker-condition/closed") {

      return new Promise(async (resolve, reject) => {

        try {
          const del = {}
          del.url = "/delete/match-maker/closed/"
          del.type = "condition"
          del.id = input
          const res = await this.request("closed/json", del)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

  }

  static get(event, parent, input) {
    // event = thing/from/algorithm

    // no parent needed to get data
    if (arguments.length === 2) {
      input = parent
    }

    if (event === "reputation/user/self") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/user/closed/"
          get.type = "reputation-self"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "cart/location/self") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/cart/closed/"
          get.type = "location-self"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "cassa/location/path") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/location/location/"
          get.type = "cassa-path"
          const res = await this.request("location/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "children/user/self") {

      return new Promise(async (resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/user/closed/"
          get.type = "children-self"
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "contacts/user/self") {

      return new Promise(async (resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/contacts/closed/"
          get.type = "self"
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "id/local-storage") {
      return new Promise(async(resolve, reject) => {
        try {

          const localStorageId = window.localStorage.getItem("localStorageId")
          if (localStorageId !== null) resolve(localStorageId)
          else throw new Error("not found")

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "email/local-storage") {
      return new Promise(async(resolve, reject) => {
        try {

          const email = window.localStorage.getItem("email")
          if (email !== null) resolve(email)
          else throw new Error("not found")

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "feedback/script/location") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/feedback/location/"
          get.type = "script"
          get.id = input
          const res = await this.request("location/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "feedback/values/location") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/feedback/location/"
          get.type = "html-value"
          const res = await this.request("location/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "feedback/length/location") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/feedback/location/"
          get.type = "html-value-length"
          const res = await this.request("location/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "html/url/admin") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/html/closed/"
          get.type = "admin"
          get.target = input
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "owner/user/self") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/owner/closed/"
          get.type = "self"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "cids/soundbox/self") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/soundbox/closed/"
          get.type = "cids-self"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "body/key/admin") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/user/closed/"
          get.type = "key-body/admin"
          get.id = input.id
          get.key = input.key
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "name/expert/self") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/expert/closed/"
          get.type = "name-self"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "tag/location/email-expert") {

      return new Promise(async(resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/location/closed/"
          get.type = "email-expert"
          get.email = input.email
          get.tag = input.tag
          get.path = input.path
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "list/svg/open") {

      return new Promise(async(resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/list/open/"
          get.type = "svg"
          const res = await this.request("open/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "list/user/admin-closed") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/user/closed/"
          get.type = "all-admin"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "keys/user/admin-closed") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/user/closed/"
          get.type = "keys-admin"
          get.id = input
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "values/platform/self") {

      return new Promise(async(resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/platform-values/closed/"
          get.type = "self"
          get.platform = input
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "values/platform/writability-closed") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/platform-values/closed"
          get.type = "platform-writability"
          get.platform = input
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "pager/email/closed") {

      return new Promise(async(resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/pager/closed"
          get.type = "jwt-email"
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "platform-values/writability-closed") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/platform-values/closed"
          get.type = "writability"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "platforms/writability-closed") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/platforms/closed"
          get.type = "writability"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "writability/platform-value/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/platform-value/closed/"
          get.type = "writability"
          get.path = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "writability/platform/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/platform/closed/"
          get.type = "writability"
          get.platform = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "user-tags/location-list/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/user/closed/"
          get.type = "location-list"
          get.ids = input.ids
          get.tags = input.tags
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "tag/location/self") {

      return new Promise(async (resolve, reject) => {

        try {
          const get = {}
          get.url = "/get/location/closed/"
          get.type = "tag-self"
          get.tag = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "tree/user/self") {

      return new Promise(async (resolve, reject) => {

        try {
          const get = {}
          get.url = "/get/user/closed/"
          get.type = "tree-self"
          get.tree = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "tree/user/open-self") {

      return new Promise(async (resolve, reject) => {

        try {
          const get = {}
          get.url = "/get/user/closed/"
          get.type = "tree-self"
          get.tree = input
          const res = await this.request("open-closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "trees/user/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/user/closed/"
          get.type = "trees"
          get.trees = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "trees/users/open") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/user/open/"
          get.type = "trees"
          get.trees = input
          const res = await this.request("open/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "match-maker-keys/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "keys"
          get.conditions = parent
          get.mirror = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "match-maker-list/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "list"
          get.conditions = parent
          get.tree = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "match-maker-mirror/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "mirror"
          get.conditions = parent
          get.mirror = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "match-maker-condition/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "condition"
          get.id = input
          const res = await this.request("closed/json", get)

          resolve(res)
        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "conditions/match-maker/writable-closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "writable-conditions"
          get.id = input
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "conditions/match-maker/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "conditions-closed"
          get.id = input
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "match-maker-conditions/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "conditions"
          get.id = input
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "match-maker-conditions/button-list-closed") {

      return new Promise(async (resolve, reject) => {

        parent.innerHTML = ""

        const get = {}
        get.url = "/get/match-maker/closed/"
        get.type = "conditions"
        get.id = input
        const res = await this.request("closed/json", get)

        if (res.status === 200) {

          try {
            const array = JSON.parse(res.response)

            for (let i = 0; i < array.length; i++) {
              const condition = array[i]



              const conditionButton = this.create("button/left-right", parent)
              conditionButton.left.innerHTML = `condition-${array.length - i}`
              conditionButton.right.innerHTML = condition.id
              conditionButton.onclick = () => {

                this.overlay("toolbox", overlay => {

                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.append(this.convert("text/span", `.condition.${condition.id}`))

                  const buttons = this.create("div/scrollable", overlay)

                  {

                    const button = this.create("button/left-right", buttons)
                    button.left.innerHTML = ".update"
                    button.right.innerHTML = "Bedingungen ändern"

                    button.onclick = () => {

                      this.overlay("toolbox", async overlay => {
                        this.add("button/remove-overlay", overlay)
                        const info = this.create("header/info", overlay)
                        info.innerHTML = `.update.${condition.id}`

                        const funnel = this.create("funnel/condition", overlay)

                        const res = await this.get("match-maker-condition/closed", condition.id)

                        if (res.status === 200) {
                          const condition = JSON.parse(res.response)

                          funnel.leftField.input.value = condition.left
                          funnel.operatorField.input.value = condition.operator
                          funnel.rightField.input.value = condition.right

                          this.verifyIs("field-funnel/valid", funnel)
                        }

                        funnel.submit.onclick = async () => {

                          await this.verify("field-funnel", funnel)

                          this.overlay("security", async securityOverlay => {

                            const map = {}
                            map.id = condition.id
                            map.left = funnel.leftField.input.value
                            map.operator = funnel.operatorField.input.value
                            map.right = funnel.rightField.input.value

                            const res = await this.update("condition/match-maker/closed", map)

                            if (res.status === 200) {

                              window.alert("Bedingung erfolgreich gespeichert.")
                              this.remove("overlay", overlay)
                              this.remove("overlay", securityOverlay)

                            }

                          })

                        }

                      })

                    }

                  }


                  {
                    const button = this.create("button/left-right", buttons)
                    button.left.innerHTML = ".delete"
                    button.right.innerHTML = "Bedingung entfernen"

                    button.onclick = () => {
                      this.overlay("security", async securityOverlay => {

                        const res = await this.delete("match-maker-condition/closed", condition.id)

                        if (res.status === 200) {
                          window.alert("Bedingung erfolgreich entfernt.")
                          this.remove("element", conditionButton)
                          this.remove("overlay", overlay)
                          this.remove("overlay", securityOverlay)
                        }

                        if (res.status !== 200) {
                          window.alert("Fehler.. Bitte wiederholen.")
                          this.remove("overlay", securityOverlay)
                        }


                      })
                    }
                  }


                })

              }

            }

            return resolve()
          } catch (error) {
            return reject(error)
          }
        }


      })

    }

    if (event === "match-maker/platform/writable-closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "toolbox-writable"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "match-maker/platform/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/match-maker/closed/"
          get.type = "toolbox"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "match-maker/closed") {

      return new Promise(async (resolve, reject) => {

        parent.innerHTML = ""

        const get = {}
        get.url = "/get/match-maker/closed/"
        get.platform = input
        const res = await this.request("closed/json", get)

        if (res.status === 200) {

          try {
            const array = JSON.parse(res.response)

            for (let i = 0; i < array.length; i++) {
              const matchMaker = array[i]

              const matchMakerButton = this.create("button/left-right", parent)
              matchMakerButton.right.innerHTML = `match-maker-${array.length - i}`
              matchMakerButton.left.innerHTML = matchMaker.name
              matchMakerButton.onclick = () => {

                this.overlay("toolbox", overlay => {

                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.append(this.convert("text/span", `.${matchMaker.name}`))

                  const buttons = this.create("div/scrollable", overlay)

                  {
                    const button = this.create("button/left-right", buttons)
                    button.left.innerHTML = ".conditions"
                    button.right.innerHTML = "Bedingungen hinzufügen"

                    button.onclick = () => {

                      const map = {}
                      map.id = matchMaker.id

                      this.overlay("toolbox", async overlay => {

                        this.add("button/remove-overlay", overlay)
                        const info = this.create("header/info", overlay)
                        info.innerHTML = `.conditions`

                        const create = this.create("button/left-right", overlay)
                        create.left.innerHTML = ".create"
                        create.right.innerHTML = "Neue Bedingung definieren"
                        create.addEventListener("click", () => {

                          this.overlay("toolbox", async overlay => {
                            this.add("button/remove-overlay", overlay)
                            const info = this.create("header/info", overlay)
                            info.append(this.convert("text/span", ".condition"))


                            const funnel = this.create("funnel/condition", overlay)

                            funnel.submit.onclick = async () => {

                              await this.verify("field-funnel", funnel)

                              this.overlay("security", async securityOverlay => {

                                map.left = funnel.leftField.input.value
                                map.operator = funnel.operatorField.input.value
                                map.right = funnel.rightField.input.value

                                const res = await this.register("condition/match-maker/closed", map)

                                if (res.status === 200) {

                                  await this.get("match-maker-conditions/button-list-closed", conditionsContainer, matchMaker.id)
                                  this.remove("overlay", overlay)
                                  this.remove("overlay", securityOverlay)

                                }

                              })

                            }



                          })

                        })

                        this.render("text/hr", "Meine Bedingungen", overlay)

                        const conditionsContainer = this.create("div/scrollable", overlay)
                        await this.get("match-maker-conditions/button-list-closed", conditionsContainer, matchMaker.id)

                      })

                    }

                  }


                  {
                    const button = this.create("button/left-right", buttons)
                    button.left.innerHTML = ".delete"
                    button.right.innerHTML = "Match Maker entfernen"

                    button.onclick = () => {
                      this.overlay("security", async securityOverlay => {
                        const del = {}
                        del.url = "/delete/match-maker/closed/"
                        del.id = matchMaker.id
                        const res = await this.request("closed/json", del)

                        if (res.status === 200) {
                          window.alert("Match Maker erfolgreich entfernt.")
                          this.remove("element", matchMakerButton)
                          this.remove("overlay", overlay)
                          this.remove("overlay", securityOverlay)
                        }

                        if (res.status !== 200) {
                          window.alert("Fehler.. Bitte wiederholen.")
                          this.remove("overlay", securityOverlay)
                        }


                      })
                    }
                  }


                })

              }

            }

            return resolve()
          } catch (error) {
            return reject(error)
          }
        }


      })

    }

    if (event === "parent/user/self") {

      return new Promise(async (resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/user/closed/"
          get.type = "parent-self"
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "paths/platform/self") {

      return new Promise(async (resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/platform/closed/"
          get.type = "paths"
          get.platform = input
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "path/cassa/location-platform") {

      return new Promise(async (resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/cassa/closed/"
          get.type = "path-location-platform"
          get.platform = input
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "location-list-funnel/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/location-list-funnel/closed/"
          get.tag = input.tag
          get.id = input.id
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }



      })

    }

    if (event === "location-list-funnel/div-closed") {

      return new Promise(async (resolve, reject) => {

        const get = {}
        get.url = "/get/location-list-funnel/closed/"
        get.tag = input.tag
        get.id = input.id
        const res = await this.request("closed/json", get)

        if (res.status === 200) {

          try {
            const map = JSON.parse(res.response)

            await this.render("map/div", map, parent)

            return resolve()
          } catch (error) {
            window.alert("Fehler.. Daten sind fehlerhaft.")
            this.remove("element", parent)
            return reject(new Error("funnel invalid"))
          }
        }


        if (res.status !== 200) {
          return reject()
        }

      })

    }

    if (event === "logs/error") {

      return new Promise(async (resolve, reject) => {

        const content = this.create("info/loading", parent)

        const get = {}
        get.url = "/get/logs/closed/2/"
        get.type = "error"
        const res = await this.request("closed/json", get)

        if (res.status === 200) {
          const errors = JSON.parse(res.response)

          this.convert("parent/scrollable", content)


          for (let i = 0; i < errors.length; i++) {
            const error = errors[i]


            const button = this.create("button/left-right", content)
            button.addEventListener("click", () => {

              this.overlay("toolbox", overlay => {
                this.add("button/remove-overlay", overlay)

                this.render("text/code", error.stack, overlay)
              })
            })

            button.left.innerHTML = /*html*/`

            <div>Fehler:</div>
            <div>${error.message}</div>
          `


            button.right.innerHTML = /*html*/`

              <div>Anfrage:</div>
              <div>${error.method}</div>
              <div>an: ${error.endpoint}</div>
              <div>von: ${error.location}</div>
              <div>ursprung: ${error.referer}</div>
            `

          }

          return resolve()
        }


        if (res.status !== 200) {
          return reject()
        }

      })

    }

    if (event === "logs/info") {

      return new Promise(async (resolve, reject) => {

        const content = this.create("info/loading", parent)

        const get = {}
        get.url = "/get/logs/closed/2/"
        get.type = "info"
        const res = await this.request("closed/json", get)

        if (res.status === 200) {
          const infos = JSON.parse(res.response)

          this.convert("parent/scrollable", content)

          for (let i = 0; i < infos.length; i++) {
            const info = infos[i]

            const button = this.create("button/left-right", content)

            if (typeof info.input === "object") {
              info.input = JSON.stringify(info.input, null, 2)
            }

            button.left.innerHTML = /*html*/`
            <div>Input:</div>
            <div>${info.input}</div>
            <div>ist ein ${info.is}</div>
          `


            button.right.innerHTML = /*html*/`

              <div>Anfrage:</div>
              <div>${info.method}</div>
              <div>an: ${info.endpoint}</div>
              <div>von: ${info.location}</div>
              <div>ursprung: ${info.referer}</div>
            `

          }

          return resolve()
        }


        if (res.status !== 200) {
          return reject()
        }

      })

    }

    if (event === "funnel/select-option") {

      const optionField = this.create("field/text", parent)
      optionField.label.innerHTML = "Antwortmöglichkeit"
      optionField.input.setAttribute("required", "true")
      this.verify("input/value", optionField.input)
      optionField.input.addEventListener("input", () => {

        const value = optionField.input.value

        if (input !== undefined) {
          if (input.tagName === "OPTION") {
            input.value = value
            input.text = value
          }
        }

      })

      if (input !== undefined) {
        if (input.tagName === "OPTION") {
          optionField.input.value = input.value
          this.verify("input/value", optionField.input)
          // optionField.value(() => input.value)
          // optionField.verifyValue()
        }
      }

      if (input !== undefined) {
        if (input.tagName !== "OPTION") {
          const submitButton = this.create("button/action", parent)
          submitButton.innerHTML = "Option jetzt anhängen"
          submitButton.addEventListener("click", async () => {

            await this.verify("input/value", optionField.input)

            const value = optionField.input.value

            const option = document.createElement("option")
            option.value = value
            option.text = value

            input.append(option)

            if (input.ok !== undefined) await input.ok()
          })


        }
      }



    }

    if (event === "field-funnel/fields") {

      if (input.classList.contains("field-funnel")) {


        parent.innerHTML = ""
        for (let i = 0; i < input.children.length; i++) {
          const field = input.children[i]

          if (field.classList.contains("submit-field-funnel-button")) continue

          if (field.classList.contains("field")) {
            const fieldInput = field.querySelector(".field-input")


            const button = this.create("button/left-right", parent)
            button.left.innerHTML = field.id

            button.right.append(this.convert("input/alias", fieldInput))
            button.addEventListener("click", () => {
              this.overlay("toolbox", overlay => {
                this.add("button/remove-overlay", overlay)
                this.add("button/register-html", overlay)

                const info = this.create("header/info", overlay)
                info.append(this.convert("input/alias", fieldInput))


                const content = this.create("div/scrollable", overlay)



                if (fieldInput.tagName === "SELECT") {


                  {
                    const button = this.create("button/left-right", content)
                    button.left.innerHTML = ".options"
                    button.right.innerHTML = "Antwortmöglichkeiten definieren"
                    button.addEventListener("click", () => {
                      this.overlay("toolbox", overlay => {
                        this.add("button/remove-overlay", overlay)

                        const info = this.create("header/info", overlay)
                        info.append(this.convert("input/alias", fieldInput))
                        info.append(this.convert("text/span", ".options"))

                        {
                          const button = this.create("button/left-right", overlay)
                          button.left.innerHTML = ".append"
                          button.right.innerHTML = "Neue Antwortmöglichkeit anhängen"
                          button.addEventListener("click", () => {

                            this.overlay("toolbox", overlay => {
                              this.add("button/remove-overlay", overlay)

                              const info = this.create("header/info", overlay)
                              info.append(this.convert("input/alias", fieldInput))
                              info.append(this.convert("text/span", ".option.append"))

                              const optionFunnel = this.create("div/scrollable", overlay)

                              const optionField = this.create("field/textarea", optionFunnel)
                              optionField.label.innerHTML = "Antwortmöglichkeit"
                              optionField.input.setAttribute("required", "true")
                              this.verify("input/value", optionField.input)
                              optionField.input.addEventListener("input", () => this.verify("input/value", optionField.input))

                              const submitButton = this.create("button/action", optionFunnel)
                              submitButton.innerHTML = "Option jetzt anhängen"
                              submitButton.addEventListener("click", async () => {

                                const value = optionField.input.value

                                const option = document.createElement("option")
                                option.value = value
                                option.text = value
                                fieldInput.appendChild(option)

                                this.render("select/options", fieldInput, options)

                                this.remove("overlay", overlay)

                              })



                            })
                          })
                        }

                        this.render("text/hr", "Optionen", overlay)

                        const options = this.create("div/scrollable", overlay)
                        this.render("select/options", fieldInput, options)

                      })
                    })
                  }

                }

                field.ok = () => {
                  this.get(event, parent, input)
                  this.remove("overlay", overlay)
                }

                this.get("funnel/field", content, field)






              })
            })
          }

        }





      }

    }

    if (event === "funnel/field") {

      const funnel = this.create("div/scrollable", parent)

      const idField = this.create("field/tag", funnel)
      idField.label.innerHTML = "Gebe deinem Datenfeld eine Id"
      this.verify("input/value", idField.input)
      idField.input.addEventListener("input", () => {

        this.verify("input/value", idField.input)

        const id = idField.input.value

        if (document.getElementById(id) !== null) {
          this.setNotValidStyle(idField.input)
        }

        if (input !== undefined) {
          if (input.classList.contains("field")) {
            if (document.getElementById(id) === null) {
              input.setAttribute("id", id)
            }
          }
        }

      })

      if (input !== undefined) {
        if (input.classList.contains("field")) {
          if (input.hasAttribute("id")) {
            idField.input.value = input.getAttribute("id")
            this.verify("input/value", idField.input)
          }
        }
      }


      const labelField = this.create("field/textarea", funnel)
      labelField.label.innerHTML = "Beschreibe das Datenfeld für dein Netzwerk"
      labelField.input.setAttribute("required", "true")
      this.verify("input/value", labelField.input)
      labelField.input.addEventListener("input", () => {

        const label = input.querySelector(".field-label")
        const value = labelField.input.value
        if (input !== undefined) {
          if (input.classList.contains("field")) {
            if (label !== null) {
              label.innerHTML = value
            }
          }
        }
        this.verify("input/value", labelField.input)

      })

      if (input !== undefined) {
        if (input.classList.contains("field")) {
          if (input.querySelector(".field-label") !== null) {
            labelField.input.value = input.querySelector(".field-label").innerHTML
            this.verify("input/value", labelField.input)
          }
        }
      }

      const infoField = this.create("field/textarea", funnel)
      infoField.label.innerHTML = "Hier kannst du, wenn du möchtest, mehr Informationen zu diesem Datenfeld, als HTML, für deine Nutzer, bereitstellen"
      infoField.input.style.height = "144px"
      infoField.input.placeholder = "<div>..</div>"
      infoField.input.style.fontFamily = "monospace"
      infoField.input.style.fontSize = "13px"
      this.verify("input/value", infoField.input)

      infoField.input.addEventListener("input", () => {
        const info = infoField.input.value

        this.update("script/on-field-info-click-event", document.body)

        if (this.verifyIs("text/empty", info)) return input.removeAttribute("on-info-click")

        if (input !== undefined) {
          if (input.classList.contains("field")) {
            input.setAttribute("on-info-click", info)
          }
        }
        this.verify("input/value", infoField.input)

      })

      if (input !== undefined) {
        if (input.classList.contains("field")) {
          if (input.hasAttribute("on-info-click")) {
            infoField.input.value = input.getAttribute("on-info-click")
            this.verify("input/value", infoField.input)
          }
        }
      }

      const typeField = this.create("field/select", funnel)
      typeField.label.innerHTML = "Welchen Datentyp soll dein Netzwerk eingeben können"
      typeField.input.add(["text", "textarea", "email", "tel", "range", "password", "number", "file", "date", "checkbox", "select"])
      this.verify("input/value", typeField.input)
      typeField.input.addEventListener("input", () => {
        const value = typeField.input.value

        if (input !== undefined) {
          if (input.classList.contains("field")) {
            const fieldInput = input.querySelector(".field-input")

            if (fieldInput !== null) {

              this.update("field-input/type", fieldInput, value)

            }
          }
        }

        this.render("funnel/field-input", {type: value, field: input})

        if (input.classList.contains("field-funnel")) {
          this.render("field-funnel/fields", input)
        } else {
          this.render("field-funnel/fields", input.parentElement)
        }

      })

      if (input !== undefined) {

        if (input.classList.contains("field")) {
          const fieldInput = input.querySelector(".field-input")

          let type
          if (fieldInput.tagName === "INPUT") {
            type = fieldInput.getAttribute("type")
          }
          if (fieldInput.tagName === "SELECT") {
            type = "select"
          }
          if (fieldInput.tagName === "TEXTAREA") {
            type = "textarea"
          }

          if (fieldInput !== null) {
            typeField.input.add([type])

            const fieldInputFunnel = this.create("div", funnel)
            this.render("funnel/field-input", {type, field: input}, fieldInputFunnel)

          }
        }
      }

      if (input !== undefined) {
        if (input.classList.contains("field-funnel")) {

          const button = this.create("button/action", funnel)
          button.innerHTML = "Datenfeld jetzt anhängen"
          button.addEventListener("click", async () => {

            await this.verify("field-funnel", funnel)

            const id = idField.input.value
            const type = typeField.input.value
            const label = labelField.input.value
            const info = infoField.input.value

            if (document.getElementById(id) !== null) {
              window.alert("Id existiert bereits.")
              idField.scrollIntoView({behavior: "smooth"})
              this.setNotValidStyle(idField.input)
              throw new Error("id exist")
            }

            if (document.getElementById(id) === null) {

              const field = this.convert("text/field", type)
              field.id = id
              field.label.textContent = label

              if (!this.verifyIs("text/empty", info)) {
                field.setAttribute("on-info-click", info)
                this.update("script/on-field-info-click-event", document.body)
              }

              input.querySelector(".submit-field-funnel-button").before(field)
              if (input.ok !== undefined) await input.ok()

            }

          })

        }
      }


      if (input !== undefined) {
        if (input.classList.contains("field")) {

          const button = this.create("button/action", funnel)
          button.style.backgroundColor = this.colors.dark.error
          button.style.color = this.colors.light.text
          button.innerHTML = "Datenfeld entfernen"
          button.addEventListener("click", async () => {

            input.remove()
            if (input.ok !== undefined) await input.ok()


          })

        }
      }

    }

    if (event === "service-conditions/closed") {

      return new Promise(async (resolve, reject) => {

        const content = this.create("info/loading", parent)

        const get = {}
        get.url = "/get/conditions/closed/"

        if (input !== undefined) {
          if (!this.verifyIs("number/empty", input.service)) {
            get.service = input.service
          }
          if (!this.verifyIs("text/empty", input.platform)) {
            get.platform = input.platform
          }
        }

        const res = await this.request("closed/json", get)

        if (res.status === 200) {
          const conditions = JSON.parse(res.response)

          this.convert("parent/scrollable", content)

          for (let i = 0; i < conditions.length; i++) {
            const condition = conditions[i]

            const button = this.create("button/left-right", content)
            button.right.innerHTML = condition.left
            button.left.innerHTML = `Bedingung ${conditions.length - i}`

            button.addEventListener("click", () => {
              this.overlay("toolbox", overlay => {
                this.add("button/remove-overlay", overlay)
                const info = this.create("header/info", overlay)
                info.append(this.convert("text/span", ".condition"))


                if (input !== undefined) {
                  if (!this.verifyIs("number/empty", input.service)) {
                    condition.service = input.service
                  }
                  if (!this.verifyIs("text/empty", input.platform)) {
                    condition.platform = input.platform
                  }
                }


                // condition.service = input.service
                condition.ok = async () => {

                  this.convert("element/reset", content)
                  await this.get(event, content, condition)
                  this.remove("overlay", overlay)

                }

                this.get("funnel/service-condition", overlay, condition)

              })
            })

          }

          return resolve(content)

        }


      })

    }

    if (event === "script/closed") {

      return new Promise(async (resolve, reject) => {

        const get = {}
        get.url = "/get/script/closed/"
        // console.log(input);
        get.id = input

        const res = await this.request("closed/json", get)

        if (res.status === 200) {
          const script = JSON.parse(res.response)
          return resolve(script)
        }


        if (res.status !== 200) {
          return reject(new Error("script not found"))
        }

      })

    }

    if (event === "scripts/toolbox/writable-closed"){

      return new Promise(async(resolve, reject) => {

        try {
          const get = {}
          get.url = "/get/scripts/closed/"
          get.type = "writable"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject()
        }

      })


    }

    if (event === "scripts/toolbox/closed"){

      return new Promise(async(resolve, reject) => {

        try {
          const get = {}
          get.url = "/get/scripts/closed/"
          get.type = "toolbox"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject()
        }

      })


    }

    if (event === "scripts/closed") {

      return new Promise(async (resolve, reject) => {

        try {
          const get = {}
          get.url = "/get/scripts/closed/"
          get.type = "closed"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "services/closed") {

      return new Promise(async (resolve, reject) => {

        const content = this.create("info/loading", parent)

        // console.log(input);

        const get = {}
        get.url = "/get/services/closed/"
        if (input !== undefined) {
          get.platform = input.platform
        }
        // console.log(get);
        const res = await this.request("closed/json", get)

        if (res.status === 200) {
          const services = JSON.parse(res.response)

          // console.log(services);

          this.convert("parent/scrollable", content)

          for (let i = 0; i < services.length; i++) {
            const service = services[i]

            if (input !== undefined) {
              if (!this.verifyIs("text/empty", input.platform)) {
                service.platform = input.platform
              }
            }

            const button = this.create("button/left-right", content)
            button.right.innerHTML = service.title
            button.left.innerHTML = `Leistung ${services.length - i}`

            button.addEventListener("click", () => {
              this.overlay("toolbox", overlay => {
                this.add("button/remove-overlay", overlay)
                const info = this.create("header/info", overlay)
                info.append(this.convert("text/span", ".service"))

                service.ok = async () => {

                  this.convert("element/reset", content)
                  await this.get(event, content, service)
                  this.remove("overlay", overlay)

                }

                this.get("funnel/service", overlay, service)

              })
            })

          }

          return resolve(content)

        }

      })

    }

    if (event === "sources/user/self") {

      return new Promise(async(resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/sources/closed/"
          get.type = "self"
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "templates/getyour/self") {
      return new Promise(async (resolve, reject) => {
        try {
          const get = {}
          get.url = "/get/templates/closed/"
          get.type = "self"
          const res = await this.request("closed/json", get)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "role-apps/closed") {

      return new Promise(async (resolve, reject) => {

        const content = this.create("info/loading", parent)

        const res = await this.verifyIs("user/closed")

        if (res.status === 200) {

          const get = {}
          get.url = "/get/role-apps/closed/"
          get.id = input
          const res = await this.request("closed/json", get)

          if (res.status === 200) {
            const apps = JSON.parse(res.response)

            this.convert("parent/scrollable", content)

            for (let i = 0; i < apps.length; i++) {
              const app = apps[i]

              const button = this.create("button/left-right", content)
              button.left.innerHTML = `.${app}`

              if (app === "scripts") {
                button.right.innerHTML = "Meine HTML Skripte"


                button.addEventListener("click", () => {
                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)
                    const info = this.create("header/info", overlay)
                    info.innerHTML = `.scripts`

                    const create = this.create("button/left-right", overlay)
                    create.left.innerHTML = ".create"
                    create.right.innerHTML = "Neues Skript hochladen"
                    create.addEventListener("click", () => {

                      this.overlay("toolbox", overlay => {
                        this.add("button/remove-overlay", overlay)
                        const info = this.create("header/info", overlay)
                        info.append(this.convert("text/span", ".script"))

                        const funnel = this.create("div/scrollable", overlay)

                        const nameField = this.create("field/name", funnel)
                        nameField.input.placeholder = "mein-skript"
                        this.verify("input/value", nameField.input)
                        nameField.input.addEventListener("input", () => this.verify("input/value", nameField.input))

                        const scriptField = this.create("field/script", funnel)
                        scriptField.input.style.height = "100vh"
                        this.verify("input/value", scriptField.input)
                        scriptField.input.addEventListener("input", () => this.verify("input/value", scriptField.input))

                        const button = this.create("button/action", funnel)
                        button.innerHTML = "Skript jetzt speichern"
                        button.addEventListener("click", async () => {

                          await this.verify("field-funnel", funnel)

                          const map = {}
                          map.script = scriptField.input.value
                          map.name = nameField.input.value

                          this.overlay("security", async securityOverlay => {

                            const res = await this.register("script/closed", map)

                            if (res.status === 200) {

                              this.convert("parent/loading", content)
                              await this.add("scripts/update-buttons", content)

                              this.remove("overlay", securityOverlay)
                              this.remove("overlay", overlay)

                            }

                            if (res.status !== 200) {
                              window.alert("Fehler.. Bitte wiederholen.")
                              this.remove("overlay", securityOverlay)
                            }

                          })

                        })

                      })

                    })

                    this.render("text/hr", "Meine Skripte", overlay)

                    const content = this.create("info/loading", overlay)

                    await this.add("scripts/update-buttons", content)


                  })
                })

              }


            }

            return resolve(content)

          }

          if (res.status !== 200) {

            this.convert("parent/navigation-open", content)

          }

        } else {

          this.convert("parent/navigation-open", content)

        }





      })

    }

    if (event === "field/platform-value-path-select") {
      return new Promise(async (resolve, reject) => {

        try {

          const get = {}
          get.url = "/get/platform-value/closed/"
          get.type = "path"
          get.platform = input.platform
          const res = await this.request("closed/json", get)

          if (res.status === 200) {
            const paths = JSON.parse(res.response)

            const pathsField = this.create("field/select", parent)
            pathsField.label.innerHTML = "Wohin soll diese Rolle, nach dem Login, weitergeleitet werden"
            pathsField.input.add(paths)
            this.verify("input/value", pathsField.input)

            if (paths.length <= 0) {
              this.setNotValidStyle(pathsField.input)
            }

            if (input.roleId !== undefined) {
              const get = {}
              get.url = "/get/platform/closed/"
              get.type = "role/home"
              get.id = input.roleId
              get.platform = input.platform
              const res = await this.request("closed/json", get)

              if (res.status === 200) {
                pathsField.input.select([res.response])
              }

            }

            resolve(pathsField)
          }

        } catch (error) {
          reject(error)
        }




      })
    }

    if (event === "values/platform/writability-closed") {

      return new Promise(async(resolve, reject) => {
        try {

          const get = {}
          get.url = "/get/platform/closed"
          get.type = "values"
          get.platform = input
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "roles/platform/location-writable") {

      return new Promise(async (resolve, reject) => {


        try {

          const get = {}
          get.url = "/get/platform/closed/"
          get.type = "roles-location-writable"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "roles/platform/location-expert") {

      return new Promise(async (resolve, reject) => {


        try {

          const get = {}
          get.url = "/get/platform/closed/"
          get.type = "roles-location-expert"
          const res = await this.request("closed/json", get)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "platform/roles") {

      return new Promise(async (resolve, reject) => {


        const content = this.create("info/loading", parent)

        const {platform, onclick} = input

        const get = {}
        get.url = "/get/platform/closed/"
        get.type = "roles"
        get.platform = platform
        const res = await this.request("closed/json", get)

        if (res.status === 200) {
          const roles = JSON.parse(res.response)

          this.convert("parent/scrollable", content)

          for (let i = 0; i < roles.length; i++) {
            const role = roles[i]

            const button = this.create("button/left-right", content)
            button.classList.add("role-button")
            button.left.innerHTML = role.name
            button.left.classList.add("button-left")
            button.right.innerHTML = "Rolle"
            button.right.classList.add("button-right")

            if (onclick !== undefined) button.addEventListener("click", event => {
              onclick(role, button, event)
            })

          }

          return resolve(content)

        }

      })
    }

  }

  static handle(event, input) {

    // do/thing/how/where
    if (event === "onclick") {

      if (input.onclick === "convert/style/grid-column-prompt/node") {

        const prompt = window.prompt("Gebe die Anzahl an Spalten ein, die dein Grid Element einnehmen soll: (z.B., 5)")
        if (this.verifyIs("text/+int", prompt)) {
          const columns = parseInt(prompt)
          if (columns > 0) {
            input.node.style.gridColumn = `span ${columns}`
          }
        }

      }

      if (input.onclick === "convert/style/grid-row-prompt/node") {

        const prompt = window.prompt("Gebe die Anzahl an Zeilen ein, die dein Grid Elemente einnehmen soll: (z.B., 3)")
        if (this.verifyIs("text/+int", prompt)) {
          const rows = parseInt(prompt)
          if (rows > 0) {
            selectedNode.style.gridRow = `span ${rows}`
            selectedNode.style.height = "100%"
          }
        }

      }

      if (input.onclick === "create/a/link-prompt/node") {

        const prompt = window.prompt("Gebe die Quell-Url deines Links ein:")
        if (!this.verifyIs("text/empty", prompt)) {
          const a = document.createElement("a")
          a.innerHTML = "(z.B., Startseite)"
          a.style.margin = "21px 34px"
          a.style.cursor = "pointer"
          a.href = prompt
          input.node.appendChild(a)
        }

      }

      if (input.onclick === "create/a/pdf-image-text-link-prompt/node") {

        return new Promise(async(resolve, reject) => {
          try {
            const prompt = window.prompt("Gebe die Quell-Url deiner PDF ein:")
            if (!this.verifyIs("text/empty", prompt)) {
              const a = document.createElement("a")
              input.node.appendChild(a)
              a.classList.add("pdf-link")
              a.href = prompt
              a.style.margin = "21px 34px"
              a.style.display = "flex"
              a.style.alignItems = "center"
              a.style.cursor = "pointer"
              const icon = await this.render("icon/node/path", "/public/pdf-doc.svg", a)
              icon.firstChild.style.fill = this.colors.light.error
              icon.style.width = "34px"
              const text = this.create("p", a)
              text.innerHTML = "(z.B., produkt.pdf)"
            }
          } catch (error) {
            reject(error)
          }
        })


      }

      if (input.onclick === "create/div/action-button/node") {

        const button = this.create("button/action")
        button.classList.add("button")
        button.innerHTML = "(z.B., Daten jetzt speichern)"
        input.node.appendChild(button)

      }

      if (input.onclick === "create/div/arrow-right-color-prompt/node") {

        const prompt = window.prompt("Gebe die Farbe deines Pfeils ein:")
        if (!this.verifyIs("text/empty", prompt)) {
          const arrow = document.createElement("div")
          arrow.style.display = "flex"
          arrow.style.justifyContent = "center"
          arrow.style.alignItems = "center"
          arrow.style.width = "100%"
          arrow.style.height = "34px"
          input.node.appendChild(arrow)
          const line = document.createElement("div")
          line.style.height = "3px"
          line.style.backgroundColor = prompt
          line.style.width = "100%"
          arrow.appendChild(line)
          const symbol = document.createElement("span")
          symbol.style.display = "flex"
          symbol.style.justifyContent = "center"
          symbol.style.alignItems = "center"
          symbol.style.fontSize = "21px"
          symbol.style.color = prompt
          symbol.innerHTML = "➤"
          arrow.appendChild(symbol)
        }

      }

      if (input.onclick === "create/div/flex-row/node") {

        input.node.style.display = "flex"
        input.node.style.flexDirection = null
        input.node.style.flexWrap = "wrap"
        const div = document.createElement("div")
        div.style.margin = "21px 34px"
        div.innerHTML = "div"
        // div.style.flex = "1"
        input.node.appendChild(div)

      }

      if (input.onclick === "create/div/flex-column/node") {

        input.node.style.display = "flex"
        input.node.style.flexDirection = "column"
        input.node.style.flexWrap = null
        const div = document.createElement("div")
        div.style.margin = "21px 34px"
        div.innerHTML = "div"
        // div.style.flex = "1"
        input.node.appendChild(div)

      }

      if (input.onclick === "create/div/flex-matrix-prompt/node") {

        const prompt = window.prompt("Gebe deine Zeilenmatrix ein: (z.B, 1 2 2)")
        const regex = /^([1-9] )*[1-9]$/
        if (regex.test(prompt)) {
          const rows = prompt.split(" ")
          const wrapContainer = document.createElement("div")
          wrapContainer.classList.add("flex-container")
          wrapContainer.style.display = "flex"
          wrapContainer.style.flexWrap = "wrap"
          wrapContainer.style.margin = "21px 34px"
          for (var i = 0; i < rows.length; i++) {
            const row = rows[i]
            const rowNumber = parseInt(row)
            if (rowNumber >= 1 && rowNumber <= 9) {
              const rowDiv = document.createElement("div")
              rowDiv.classList.add(`row-${i + 1}`)
              rowDiv.style.width = "300px"
              rowDiv.style.display = "flex"
              rowDiv.style.flexWrap = "wrap"
              wrapContainer.append(rowDiv)
              for (let i = 0; i < rowNumber; i++) {
                const rowPart = document.createElement("div")
                rowPart.classList.add("row-part")
                rowPart.innerHTML = `(z.B., flex-item-${i + 1})`
                rowPart.style.width = `${100 / rowNumber}%`
                rowDiv.append(rowPart)
              }
            }
          }
          input.node.appendChild(wrapContainer)
          if (wrapContainer.children.length === 0) {
            wrapContainer.remove()
          }
        }

      }

      if (input.onclick === "create/div/flex-width-prompt/node") {

        const prompt = window.prompt("Gebe die Breite deiner Flex Elemente ein: (z.B., 20% 300px 20vw)")
        if (!this.verifyIs("text/empty", prompt)) {
          const widths = prompt.split(" ")
          const flexContainer = document.createElement("div")
          flexContainer.classList.add("flex-container")
          flexContainer.style.display = "flex"
          flexContainer.style.margin = "21px 34px"
          flexContainer.style.flexWrap = "wrap"
          for (var i = 0; i < widths.length; i++) {
            const width = widths[i]
            const flexItem = document.createElement("div")
            flexItem.classList.add("flex-item")
            flexItem.textContent = `(z.B., flex-item-${i + 1})`
            flexItem.style.flex = `1 1 ${width}`
            flexContainer.appendChild(flexItem)
          }
          input.node.appendChild(flexContainer)
        }

      }

      if (input.onclick === "create/div/grid-matrix-prompt/node") {

        const prompt = window.prompt("Gebe die Matrix deiner Grid Elemente ein: (z.B., 2 3 3)")
        if (!this.verifyIs("text/empty", prompt)) {
          const columnsPerRow = prompt.split(" ").map(Number)
          const gridContainer = document.createElement("div")
          gridContainer.classList.add("grid-container")
          gridContainer.style.display = "grid"
          gridContainer.style.margin = "21px 34px"
          columnsPerRow.forEach(columns => {
            const gridRow = document.createElement("div")
            gridRow.classList.add("grid-row")
            gridRow.style.display = "grid"
            gridRow.style.gridTemplateColumns = `repeat(${columns}, minmax(0, 1fr))`
            for (let i = 0; i < columns; i++) {
              const gridItem = document.createElement("div")
              gridItem.classList.add("grid-item")
              gridItem.textContent = `(z.B., grid-item-${i + 1})`
              gridRow.appendChild(gridItem)
            }
            gridContainer.appendChild(gridRow)
          })
          input.node.appendChild(gridContainer)
        }

      }

      if (input.onclick === "create/div/hr/node") {

        const div = document.createElement("div")
        div.classList.add("hr")
        div.style.border = "0.5px solid black"
        input.node.appendChild(div)

      }

      if (input.onclick === "create/div/image-text/node") {

        this.create("div/image-text", input.node)

      }

      if (input.onclick === "create/div/key-value/node") {

        const div = this.create("div/key-value")
        input.node.appendChild(div)

      }

      if (input.onclick === "create/div/pack-outer/node") {

        const div = this.create("div")
        div.innerHTML = input.node.outerHTML
        input.node.parentElement.insertBefore(div, input.node)
        input.node.remove()

      }

      if (input.onclick === "create/div/scrollable-y/node") {

        this.create("div/scrollable", input.node)

      }

      if (input.onclick === "create/div/space-height-prompt/node") {

        const prompt = window.prompt("Gebe den Abstand deines Leerraums, in px, ein: (z.B., 350)")
        if (!this.verifyIs("text/empty", prompt)) {
          const space = document.createElement("div")
          space.classList.add("space")
          space.style.width = "100%"
          space.style.height = `${prompt}px`
          input.node.appendChild(space)
        }

      }

      if (input.onclick === "create/h1/inner-html-prompt/node") {

        const prompt = window.prompt("Gebe den HTML Inhalt deiner Überschrift ein:")
        if (!this.verifyIs("text/empty", prompt)) {
          const h1 = this.create("h1")
          h1.innerHTML = prompt
          input.node.appendChild(h1)
        }

      }

      if (input.onclick === "create/h2/inner-html-prompt/node") {

        const prompt = window.prompt("Gebe den HTML Inhalt deiner Überschrift ein:")
        if (!this.verifyIs("text/empty", prompt)) {
          const h2 = this.create("h2")
          h2.innerHTML = prompt
          input.node.appendChild(h2)
        }

      }

      if (input.onclick === "create/h3/inner-html-prompt/node") {

        const prompt = window.prompt("Gebe den HTML Inhalt deiner Überschrift ein:")
        if (!this.verifyIs("text/empty", prompt)) {
          const h3 = this.create("h3")
          h3.innerHTML = prompt
          input.node.appendChild(h3)
        }

      }

      if (input.onclick === "create/header/left-image/node") {

        const header = this.create("header/left")
        header.left.style.width = "34px"
        input.node.appendChild(header)

      }

      if (input.onclick === "create/img/placeholder/node") {

        const image = document.createElement("img")
        image.src = "/public/image.svg"
        image.style.width = "100%"
        input.node.appendChild(image)

      }

      if (input.onclick === "create/input/checkbox/node") {

        this.create("input/checkbox", input.node)

      }

      if (input.onclick === "create/input/password/node") {

        this.create("input/password", input.node)

      }

      if (input.onclick === "create/input/select/node") {

        this.create("input/select", input.node)

      }

      if (input.onclick === "create/input/tel/node") {

        this.create("input/tel", input.node)

      }

      if (input.onclick === "create/input/text/node") {

        this.create("input/text", input.node)

      }

      if (input.onclick === "create/p/inner-html-prompt/node") {

        const prompt = window.prompt("Gebe den HTML Inhalt deines Paragraphen ein:")
        const p = this.create("p")
        p.innerHTML = prompt
        input.node.appendChild(p)
        return p

      }

      if (input.onclick === "create/span/fill-text-content/node") {

        Array.from(input.node.childNodes).forEach(node => {
          if (node.nodeType === Node.TEXT_NODE) {
            const span = document.createElement("span")
            span.innerHTML = node.textContent
            input.node.replaceChild(span, node)
          }
        })

      }

      if (input.onclick === "create/span/si-prompt/node") {

        const prompt = window.prompt("Gebe deine SI-Einheit ein:")

        const si = document.createElement("span")
        si.classList.add("si")
        si.innerHTML = input.node.innerHTML
        if (prompt === "kWh" || prompt.startsWith("ct")) si.innerHTML = "0"
        if (
          prompt === "€" ||
          prompt.startsWith("EURO") ||
          prompt.startsWith("Euro") ||
          prompt === "%"
        ) si.innerHTML = "0,00"
        const unit = document.createElement("span")
        unit.classList.add("unit")
        unit.innerHTML = prompt
        unit.style.margin = "0 5px"
        input.node.innerHTML = ""
        input.node.appendChild(si)
        input.node.appendChild(unit)

      }

      if (input.onclick === "create/table/matrix-prompt/node") {

        const prompt = window.prompt("Trenne Spalten mit Leerzeichen und bistimme die Breite deiner Tabelle von 1-9: (z.B., 4 1 1 4 (= 10))")
        if (!this.verifyIs("text/empty", prompt)) {
          const columns = prompt.split(" ")
          const table = document.createElement("table")
          table.style.width = "100%"
          table.row = document.createElement("tr")
          table.row.style.display = "flex"
          table.row.style.width = "100%"
          for (let i = 0; i < columns.length; i++) {
            const width = columns[i]
            const number = parseInt(width)
            if (number >= 1 && number <= 9) {
              table.header = document.createElement("th")
              table.header.textContent = `(z.B., th-${i + 1})`
              table.header.style.flex = `1 1 ${number * 10}%`
              table.row.appendChild(table.header)
            }
          }
          table.appendChild(table.row)
          input.node.appendChild(table)
          if (table.row.children.length === 0) {
            table.remove()
          }

        }

      }

      if (input.onclick === "delete-source-self") {

        return new Promise(async(resolve, reject) => {
          try {
            const confirm = window.confirm("Möchtest du deine Quelle wirklich entfernen?")
            if (confirm === true) {
              this.overlay("security", async overlay => {
                const res = await this.delete("source/user/self", input.source)
                if (res.status === 200) {
                  window.alert("Quelle wurde erfolgreich entfernt")
                  overlay.remove()
                  resolve()
                } else {
                  window.alert("Fehler.. Bitte wiederholen.")
                  overlay.remove()
                }
              })
            }
          } catch (error) {
            reject(error)
          }
        })

      }

      if (input.onclick === "overlay-text-converter") {
        this.overlay("popup", overlay => {
          this.render("text/h1", "Text Konverter Funktionen", overlay)

          const converter = this.create("div/scrollable", overlay)

          {
            const field = this.create("field/textarea", converter)
            field.label.textContent = "Eine mit Komma getrennte Liste in geschweiften Klammern, wird auf eine Zeile konvertiert"
            field.input.style.height = "233px"
            field.input.style.fontSize = "13px"
            field.input.style.fontFamily = "monospace"
            field.input.placeholder = `Fügen Sie Ihren Text im angegebenen Format ein und klicken Sie dann auf 'Konvertieren', um ihn in eine einzelne Zeile umzuwandeln.

            Zum Beispiel:
            {
              svgPickerOptions,
              createFlexButton,
              wrapButton,
              ...
            }

            Klicken Sie auf 'Text jetzt konvertieren', um:

            {svgPickerOptions, createFlexButton, wrapButton, ...}

            zu erhalten`
            const convert = this.create("button/action", field)
            convert.innerHTML = "Text jetzt konvertieren"
            convert.onclick = () => {

              let text = field.input.value
              try {
                if (text.startsWith("{")) {
                  if (text.endsWith("}")) {
                    text = text.slice(1, -1).trim()
                    const textArray = text.split(",").map(text => text.trim())
                    const filtered = textArray.filter(text => !this.verifyIs("text/empty", text))
                    const singleLine = filtered.join(", ")
                    field.input.value = `{${singleLine}}`
                    this.convert("text/clipboard", field.input.value).then(() => {
                      window.alert("Dein konvertierter Text wurde erfolgreich in deine Zwischenablage gespeichert.")
                      this.add("style/node/valid", field.input)
                    })
                  }
                }
                throw new Error("text not supported")
              } catch (error) {
                this.add("style/node/not-valid", field.input)
              }
            }
          }

          {
            const field = this.create("field/textarea", converter)
            field.label.textContent = "Eine mit Komma getrennte Liste, wird auf eine Zeile konvertiert"
            field.input.style.height = "233px"
            field.input.style.fontSize = "13px"
            field.input.style.fontFamily = "monospace"
            field.input.placeholder = `Fügen Sie Ihren Text im angegebenen Format ein und klicken Sie dann auf 'Konvertieren', um ihn in eine einzelne Zeile umzuwandeln.

            Zum Beispiel:

            svgPickerOptions,
            createFlexButton,
            wrapButton,
            ...

            Klicken Sie auf 'Text jetzt konvertieren', um:

            svgPickerOptions, createFlexButton, wrapButton, ...

            zu erhalten`
            const convert = this.create("button/action", field)
            convert.innerHTML = "Text jetzt konvertieren"
            convert.onclick = () => {

              let text = field.input.value
              try {
                const textArray = text.split(",").map(text => text.trim())
                const filtered = textArray.filter(text => !this.verifyIs("text/empty", text))
                const singleLine = filtered.join(", ")
                field.input.value = singleLine
                this.convert("text/clipboard", field.input.value).then(() => {
                  window.alert("Dein konvertierter Text wurde erfolgreich in deine Zwischenablage gespeichert.")
                  this.add("style/node/valid", field.input)
                })
                throw new Error("text not supported")
              } catch (error) {
                this.add("style/node/not-valid", field.input)
              }
            }
          }

        })
      }

      if (input.onclick === "update-source-self") {

        return new Promise(async(resolve, reject) => {
          try {
            this.overlay("popup", overlay => {
              overlay.info.innerHTML = input.source.title
              this.convert("node-text/slice-width", {node: overlay.info, text: input.source.title, width: 89})
              overlay.info.append(".update")
              const funnel = this.create("field-funnel/source", overlay)
              this.render("source/field-funnel", input.source, funnel)
              this.verify("field-funnel", funnel)
              funnel.submit.onclick = async () => {
                await this.verify("field-funnel", funnel)
                const map = await this.convert("field-funnel/map", funnel)
                map.created = input.source.created
                this.overlay("security", async securityOverlay => {
                  const res = await this.update("source/user/self", {source: map})
                  if (res.status === 200) {
                    window.alert("Quelle erfolgreich gespeichert.")
                    overlay.remove()
                    securityOverlay.remove()
                    resolve()
                  } else {
                    window.alert("Fehler.. Bitte wiederholen.")
                    securityOverlay.remove()
                  }
                })
              }
            })
          } catch (error) {
            reject(error)
          }
        })

      }

    }

  }

  static overlay(event, callback) {

    if (event === "html-creator") {

      const overlay = document.createElement("div")
      overlay.classList.add("overlay")

      overlay.style.height = "34vh"
      overlay.style.overscrollBehavior = "none"
      overlay.style.width = "100%"
      overlay.style.zIndex = "99999999999999"
      overlay.style.position = "fixed"
      overlay.style.bottom = "0"
      overlay.style.left = "0"

      overlay.style.background = this.colors.light.background
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        overlay.style.background = this.colors.dark.background
      }

      overlay.style.display = "flex"
      overlay.style.flexDirection = "column"
      overlay.style.opacity = 0

      this.add("button/remove-overlay", overlay)

      if (callback) callback(overlay)

      document.body.append(overlay)

      const animation = overlay.animate([
        { opacity: 0, transform: 'translateY(13px)' },
        { opacity: 1, transform: 'translateY(0)' },
      ], {
        duration: 233,
        easing: 'ease-in-out',
        fill: "forwards"
      })

      return overlay

    }

    if (event === "toolbox") {

      const overlay = this.create("div/overlay")
      overlay.style.opacity = 0
      if (callback) callback(overlay)
      document.body.append(overlay)
      const animation = overlay.animate([
        { opacity: 0, transform: 'translateY(13px)' },
        { opacity: 1, transform: 'translateY(0)' },
      ], {
        duration: 233,
        easing: 'ease-in-out',
        fill: "forwards"
      })
      return overlay

    }

    if (event === "popup") {

      const overlay = this.create("div/overlay")
      overlay.style.opacity = 0
      overlay.info = this.create("header/info", overlay)
      const removeOverlayButton = this.add("button/remove-overlay", overlay)
      this.add("outline-hover/node", removeOverlayButton)
      if (callback) callback(overlay)
      document.body.append(overlay)
      const animation = overlay.animate([
        { opacity: 0, transform: 'translateY(13px)' },
        { opacity: 1, transform: 'translateY(0)' },
      ], {
        duration: 233,
        easing: 'ease-in-out',
        fill: "forwards"
      })
      return overlay

    }

    if (event === "info") {

      const overlay = document.createElement("div")
      overlay.classList.add("overlay")
      overlay.style.height = "100%"
      overlay.style.overscrollBehavior = "none"
      overlay.style.width = "100%"
      overlay.style.zIndex = "99999999999999"
      overlay.style.position = "fixed"
      overlay.style.top = "0"
      overlay.style.left = "0"
      overlay.style.background = this.colors.light.background
      overlay.style.display = "flex"
      overlay.style.flexDirection = "column"
      overlay.style.opacity = 0

      this.add("button/remove-overlay", overlay)

      if (callback) callback(overlay)

      document.body.append(overlay)

      const animation = overlay.animate([
        { opacity: 0, transform: 'translateY(13px)' },
        { opacity: 1, transform: 'translateY(0)' },
      ], {
        duration: 344,
        easing: 'ease-in-out',
        fill: "forwards"
      })

      return overlay

    }

    if (event === "security") {

      const overlay = this.create("div/overlay")
      overlay.info = this.create("info/loading", overlay)
      if (callback) callback(overlay)
      document.body.append(overlay)
      return overlay

    }

  }

  static register(event, input) {
    // event = tag/on/algorithm

    if (event === "alias/contacts/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/contacts/closed/"
          register.type = "alias-self"
          register.id = input.id
          register.alias = input.alias
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "alias/templates/self") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/templates/closed/"
          register.type = "alias-self"
          register.id = input.id
          register.alias = input.alias
          const res = await this.request("closed/json", register)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "alias/platform-value/closed") {
      return new Promise(async (resolve, reject) => {

        try {

          const register = {}
          register.url = "/register/platform-value/closed/"
          register.type = "alias"
          register.alias = input.alias
          register.path = input.path
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "birthday/contacts/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/contacts/closed/"
          register.type = "birthday-self"
          register.id = input.id
          register.birthday = input.birthday
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "text/tree/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/user/closed/"
          register.type = "text-on-tree-self"
          register.text = input.text
          register.tree = input.tree
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "click-funnel/location/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/funnel/closed/"
          register.type = "click-funnel-location-self"
          register.tag = input.tag
          register.funnel = input.funnel
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "contacts/user/js-list") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/contacts/closed/"
          register.type = "js-list-self"
          register.contacts = input
          const res = await this.request("closed/json", register)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "field-funnel/location/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/funnel/closed/"
          register.type = "location-field-funnel-self"
          register.tag = input.tag
          register.funnel = input.funnel
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "feedback/script/location") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/feedback/location/"
          register.type = "script"
          register.id = input.id
          register.importance = input.importance
          register.content = input.content
          const res = await this.request("location/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "feedback/html/location") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/feedback/location/"
          register.type = "html-value"
          register.importance = input.importance
          register.content = input.content
          const res = await this.request("location/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "path/cassa/platform-expert") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/cassa/closed/"
          register.type = "path-platform-expert"
          register.path = input.path
          register.platform = input.platform
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "phone/contacts/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/contacts/closed/"
          register.type = "phone-self"
          register.id = input.id
          register.phone = input.phone
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "played/soundbox/open") {

      const url = new URL("/register/soundbox/played/", window.location.origin)
      url.searchParams.append("id", input)

      return navigator.sendBeacon(url.href)

    }

    if (event === "meta/soundbox/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/soundbox/closed/"
          register.type = "meta-self"
          register.id = input.id
          register.track = input.track
          register.creator = input.creator
          register.album = input.album
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "email/super-admin") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/user/open/"
          register.type = "super-admin"
          register.email = input
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "email/contacts/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/contacts/closed/"
          register.type = "email-self"
          register.email = input
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "name/expert/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/expert/closed/"
          register.type = "name-self"
          register.name = input
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "name/platform/location-expert") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/platform/closed/"
          register.type = "name-location-expert"
          register.new = input.new
          register.old = input.old
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "notes/contacts/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/contacts/closed/"
          register.type = "notes-self"
          register.id = input.id
          register.notes = input.notes
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "owner/user/self") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/owner/closed/"
          register.type = "self"
          register.firstname = input.firstname
          register.lastname = input.lastname
          register.street = input.street
          register.zip = input.zip
          register.country = input.country
          register.state = input.state
          register.phone = input.phone
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "item/location-cart/self") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/location-cart/closed/"
          register.type = "location-list-item-self"
          register.id = input.id
          register.quantity = input.quantity
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "map/location-list/closed") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/location-list/closed/"
          register.type = "closed"
          register.tag = input.tag
          register.map = input.map
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "map/location-list/email-expert") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/location-list/closed/"
          register.type = "email-expert"
          register.email = input.email
          register.map = input.map
          register.path = input.path
          register.id = input.id
          const res = await this.request("closed/json", register)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "script/closed") {

      return new Promise(async (resolve, reject) => {

        try {

          const register = {}
          register.url = "/register/script/closed/"
          register.type = "closed"
          register.name = input.name
          register.script = input.script

          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })
    }

    if (event === "source/user/self") {

      return new Promise(async (resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/sources/closed/"
          register.type = "source-self"
          register.source = input
          const res = await this.request("closed/json", register)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "status/contacts/self") {
      return new Promise(async(resolve, reject) => {
        try {

          const register = {}
          register.url = "/register/contacts/closed/"
          register.type = "status-self"
          register.id = input.id
          register.status = input.status
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "reputation/user/closed") {
      return new Promise(async (resolve, reject) => {

        try {

          const register = {}
          register.url = "/register/user/closed/"
          register.type = "reputation-closed"
          register.reputation = input.reputation
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "value/platform/closed") {
      return new Promise(async (resolve, reject) => {

        try {

          const register = {}
          register.url = "/register/platform-value/closed/"
          register.type = "new"
          register.platform = input.platform
          register.path = input.path
          register.alias = input.alias
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "lang/platform-value/closed") {
      return new Promise(async (resolve, reject) => {

        try {

          const register = {}
          register.url = "/register/platform-value/closed/"
          register.type = "lang"
          register.lang = input.lang
          register.path = input.path
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "lead/contacts/location-expert") {

      return new Promise(async (resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/contacts/location/"
          register.type = "lead-location-expert"
          register.preference = input.preference
          register.email = input.email
          register.subject = input.subject
          register.tel = input.tel
          const res = await this.request("location/json", register)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "visibility/platform-value/closed") {
      return new Promise(async (resolve, reject) => {

        try {

          const register = {}
          register.url = "/register/platform-value/closed/"
          register.type = "visibility"
          register.visibility = input.visibility
          register.roles = input.roles
          register.authorized = input.authorized
          register.path = input.path
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "html/platform-value/writable-closed") {
      return new Promise(async (resolve, reject) => {

        try {
          const register = {}
          register.url = "/register/platform-value/closed/"
          register.type = "writable-html"
          register.html = input
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "html/platform-value/closed") {
      return new Promise(async (resolve, reject) => {

        try {
          const register = {}
          register.url = "/register/platform-value/closed/"
          register.type = "html"
          register.html = input
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "html/templates/self") {
      return new Promise(async (resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/templates/closed/"
          register.type = "html-self"
          register.html = input
          const res = await this.request("closed/json", register)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "website/contacts/self") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/register/contacts/closed/"
          register.type = "website-self"
          register.id = input.id
          register.website = input.website
          const res = await this.request("closed/json", register)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "writability/platform-value/closed") {
      return new Promise(async (resolve, reject) => {

        try {
          const register = {}
          register.url = "/register/platform-value/closed/"
          register.type = "writability"
          register.path = input.path
          register.writability = input.writability
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "writability/platform/closed") {
      return new Promise(async (resolve, reject) => {

        try {
          const register = {}
          register.url = "/register/platform/closed/"
          register.type = "writability"
          register.platform = input.platform
          register.writability = input.writability
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "condition/match-maker/closed") {
      return new Promise(async (resolve, reject) => {

        try {
          const register = {}
          register.url = "/register/match-maker/closed/"
          register.type = "condition"
          register.id = input.id
          register.left = input.left
          register.operator = input.operator
          register.right = input.right
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "name/match-maker/closed") {
      return new Promise(async (resolve, reject) => {

        try {
          const register = {}
          register.url = "/register/platform/closed/"
          register.type = "match-maker"
          register.platform = input.platform
          register.name = input.name
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "platform/expert/self") {
      return new Promise(async (resolve, reject) => {

        try {

          const register = {}
          register.url = "/register/platform/closed/"
          register.type = "expert-self"
          register.platform = input
          const res = await this.request("closed/json", register)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

  }

  static render(event, input, parent) {
    // event = thing/in/algorithm
    if (arguments.length === 2) {
      parent = input
    }

    // render button/node/icon-path

    if (event === "button/node/pick-source") {

      const button = this.create("button/left-right")
      parent?.append(button)
      button.left.style.flex = "1 1 0"
      this.add("outline-hover/node", button)
      this.render("text/node/bottom-right-onhover", "Auwählen", button)

      if (input.title) {
        const node = this.create("div", button.left)
        node.style.fontSize = "34px"
        let text = input.title
        this.convert("node-text/slice-width", {node, text, width: 987})

        if (input.published) {
          node.append(` (${this.convert("millis/yyyy", input.published)})`)
        }

      }

      if (input.authors) {
        const authors = this.create("div", button.left)
        authors.style.fontSize = "21px"
        authors.style.fontWeight = "bold"
        authors.style.color = this.colors.matte.sunflower
        authors.textContent = input.authors.join(", ")
      }

      if (input.publisher) {
        const publisher = this.create("div", button.left)
        publisher.style.fontSize = "13px"
        publisher.textContent = input.publisher.join(", ")
      }

      if (input.isbn) {
        const isbn = this.create("div", button.left)
        isbn.style.fontSize = "13px"
        isbn.textContent = `ISBN: ${input.isbn.join(", ")}`
      }

      if (input.image) {
        const img = document.createElement("img")
        img.style.width = "100%"
        img.src = input.image
        button.right.append(img)
        button.right.style.width = "128px"
      }

      return button

    }

    if (event === "text/node/action-button") {
      const button = this.create("button/action")
      button.innerHTML = input
      parent?.append(button)
      return button
    }

    if (event === "left-right/local-script-toggle") {

      const scripts = JSON.parse(window.localStorage.getItem("scripts")) || []

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i]

        if (script.id === input) {
          if (script.disabled) {
            parent.right.innerHTML = ""
            const red = this.create("div", parent.right)
            red.style.width = "34px"
            red.style.padding = "8px 34px"
            red.style.display = "flex"
            red.style.justifyContent = "center"
            red.style.alignItems = "center"
            red.style.borderRadius = "13px"
            red.style.background = "red"
            red.innerHTML = "Disabled"
            return parent
          }
        }
      }

      parent.right.innerHTML = ""
      const green = this.create("div", parent.right)
      green.style.width = "34px"
      green.style.padding = "8px 34px"
      green.style.display = "flex"
      green.style.justifyContent = "center"
      green.style.alignItems = "center"
      green.style.borderRadius = "13px"
      green.style.background = "green"
      green.innerHTML = "OK"

      return parent
    }

    if (event === "left-right/disable-script-local") {
      parent.left.innerHTML = ".disable"
      parent.right.innerHTML = "Schalte dein Skript aus"
      parent.onclick = () => {
        this.convert("script/disabled", input.script)
        this.render("left-right/enable-script-local", {script: input.script}, parent)
        input?.ok()
      }
      return parent
    }

    if (event === "left-right/enable-script-local") {
      parent.left.innerHTML = ".enable"
      parent.right.innerHTML = "Schalte dein Skript an"
      parent.onclick = () => {
        this.convert("script/enabled", input.script)
        this.render("left-right/disable-script-local", {script: input.script}, parent)
        input?.ok()
      }
      return parent
    }

    if (event === "location-list/node/closed") {

      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.list.length; i++) {
        const item = input.list[i]

        const itemButton = this.create("button/left-right", parent)
        itemButton.left.innerHTML = item.titel
        itemButton.right.innerHTML = item.created
        itemButton.addEventListener("click", () => {

          this.overlay("toolbox", overlay => {

            this.add("button/remove-overlay", overlay)

            const buttons = this.create("div/scrollable", overlay)

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".update"
              button.onclick = () => {

                this.overlay("toolbox", async overlay => {
                  this.add("button/remove-overlay", overlay)

                  this.render("text/title", `${this.convert("text/capital-first-letter", input.tag)}-${i + 1}`, overlay)

                  const fieldFunnel = await this.convert("path/field-funnel", input.path)
                  overlay.append(fieldFunnel)

                  fieldFunnel.querySelectorAll(".field").forEach(field => {
                    Object.entries(item).forEach(([key, value]) => {
                      if (field.id === key) {
                        field.querySelector(".field-input").value = value
                      }
                    })
                  })

                  this.verify("field-funnel", fieldFunnel)

                  const submitButton = fieldFunnel.querySelector(".submit-field-funnel-button")
                  submitButton.innerHTML = `${this.convert("text/capital-first-letter", input.tag)} jetzt speichern`
                  submitButton.onclick = async () => {

                    await this.verify("field-funnel", fieldFunnel)

                    const map = await this.convert("field-funnel/map", fieldFunnel)

                    this.overlay("security", async securityOverlay => {

                      const update = {}
                      update.tag = input.tag
                      update.created = item.created
                      update.item = map
                      const res = await this.update("tag/location/list-self", update)
                      if (res.status === 200) {
                        window.alert("Daten erfolgreich gespeichert.")

                        const res = await this.get("tag/location/self", input.tag)
                        if (res.status === 200) {
                          const tag = JSON.parse(res.response)
                          this.render("location-list/node/closed", {list: tag[input.tag], tag: input.tag, path: input.path}, parent)
                        }
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = `Keine ${this.comvert("text/capital-first-letter", input.tag)} gefunden`
                        }

                        this.remove("overlay", securityOverlay)
                      }

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", securityOverlay)
                      }

                    })

                  }


                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".delete"
              button.onclick = () => {
                this.overlay("security", async securityOverlay => {

                  const res = await this.delete("tag/location/self", {id: item.created, tag: input.tag})
                  if (res.status === 200) {
                    window.alert("Daten erfolgreich entfernt.")
                    itemButton.remove()
                    overlay.remove()
                    securityOverlay.remove()
                  }
                  if (res.status !== 200) {
                    window.alert("Fehler.. Bitte wiederholen.")
                    securityOverlay.remove()
                  }

                })
              }
            }


          })

        })

      }

    }

    if (event === "location-list/node/email-expert") {

      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.list.length; i++) {
        const item = input.list[i]

        const itemButton = this.create("button/left-right", parent)
        itemButton.left.innerHTML = `${input.tag}-${i + 1}`
        itemButton.right.innerHTML = item.created
        itemButton.addEventListener("click", () => {

          this.overlay("toolbox", overlay => {

            this.add("button/remove-overlay", overlay)
            const buttons = this.create("div/scrollable", overlay)

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".update"
              button.onclick = () => {

                this.overlay("toolbox", async overlay => {
                  this.add("button/remove-overlay", overlay)

                  this.render("text/title", `${this.convert("text/capital-first-letter", input.tag)}-${i + 1}`, overlay)

                  const fieldFunnel = await this.convert("path/field-funnel", input.path)
                  overlay.append(fieldFunnel)

                  fieldFunnel.querySelectorAll(".field").forEach(field => {
                    Object.entries(item).forEach(([key, value]) => {
                      if (field.id === key) {
                        field.querySelector(".field-input").value = value
                      }
                    })
                  })

                  this.verify("field-funnel", fieldFunnel)

                  const submitButton = fieldFunnel.querySelector(".submit-field-funnel-button")
                  submitButton.innerHTML = `${this.convert("text/capital-first-letter", input.tag)} jetzt speichern`
                  submitButton.onclick = async () => {

                    await this.verify("field-funnel", fieldFunnel)

                    const map = await this.convert("field-funnel/map", fieldFunnel)

                    this.overlay("security", async securityOverlay => {

                      const update = {}
                      update.email = input.email
                      update.id = item.created
                      update.item = map
                      update.path = input.path
                      update.tag = input.tag
                      const res = await this.update("tag/location/list-email-expert", update)
                      if (res.status === 200) {
                        window.alert("Daten erfolgreich gespeichert.")

                        const res = await this.get("tag/location/email-expert", {tag: input.tag, email: input.email, path: input.path})
                        if (res.status === 200) {
                          const tag = JSON.parse(res.response)
                          this.render("location-list/node/email-expert", {list: tag[input.tag], tag: input.tag, email: input.email, path: input.path}, parent)
                        }
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = `Keine ${this.convert("text/capital-first-letter", fieldFunnel.id)} gefunden`
                        }

                        this.remove("overlay", securityOverlay)
                      }
                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", securityOverlay)
                      }

                    })

                  }


                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".delete"
              button.onclick = () => {
                this.overlay("security", async securityOverlay => {

                  const res = await this.delete("tag/location/email-expert", {id: item.created, tag: input.tag, path: input.path, email: input.email})
                  if (res.status === 200) {
                    window.alert("Daten erfolgreich entfernt.")
                    this.remove("element", itemButton)
                    this.remove("overlay", overlay)
                    this.remove("overlay", securityOverlay)
                  }
                  if (res.status !== 200) {
                    window.alert("Fehler.. Bitte wiederholen.")
                    this.remove("overlay", securityOverlay)
                  }

                })
              }
            }

          })

        })

      }
    }

    if (event === "color/node/foreground") {

      parent.style.position = "relative"

      const foreground = parent.cloneNode("true")
      foreground.classList.add("foreground")
      foreground.innerHTML = ""
      foreground.style.position = "absolute"
      foreground.style.background = input
      parent.querySelectorAll(".foreground").forEach(it => it.remove())
      parent.appendChild(foreground)

      return foreground
    }

    if (event === "color/node/border") {

      parent.style.position = "relative"

      const border = parent.cloneNode("true")
      border.classList.add("border")
      border.innerHTML = ""
      border.style.position = "absolute"
      border.style.background = "transparent"
      border.style.border = `8px solid ${input}`
      parent.querySelectorAll(".border").forEach(it => it.remove())
      parent.appendChild(border)

    }

    if (event === "cart/selector/self") {

      return new Promise(async(resolve, reject) => {
        try {

          console.log(parent);
          const node = document.querySelector(parent)

          console.log(node);

          // add more node from location cart
          // dc-montage option exist always

          if (node) {

            // get location cart
            const res = await this.get("cart/location/self")

            if (res.status === 200) {
              const cart = JSON.parse(res.response)
              console.log(cart)
            }
            // add more node before doing the for loop



            // add events for each option
            for (let i = 0; i < node.querySelectorAll("*").length; i++) {
              const child = node.querySelectorAll("*")[i]

              const checkbox = child.querySelector("input[type='checkbox']")

              checkbox.onclick = (ev) => {
                ev.preventDefault()
                this.overlay("popup", overlay => {
                  const actions = this.create("div/scrollable", overlay)

                  {
                    const button = this.create("button/left-right", actions)
                    button.right.innerHTML = "Leistung auswählen"
                    button.left.innerHTML = ".select"
                    button.onclick = () => {
                      checkbox.checked = true
                      this.remove("overlay", overlay)
                    }
                  }

                  {
                    const button = this.create("button/left-right", actions)
                    button.right.innerHTML = "Leistung entfernen"
                    button.left.innerHTML = ".remove"
                    button.onclick = () => {
                      checkbox.checked = false
                      this.remove("overlay", overlay)
                    }
                  }

                  {
                    const button = this.create("button/left-right", actions)
                    button.right.innerHTML = "Leistung vergleichen"
                    button.left.innerHTML = ".compare"
                  }

                  {
                    const button = this.create("button/left-right", actions)
                    button.right.innerHTML = "Ansprechpartner kontaktieren"
                    button.left.innerHTML = ".support"
                  }


                })
              }
            }

          }

        } catch (error) {
          reject(error)
        }
      })




    }

    if (event === "cart/node/open") {

      const cart = this.create("div/scrollable")
      cart.className = "cart"
      parent?.append(cart)

      for (let i = 0; i < input.length; i++) {
        const item = input[i]

        const container = this.create("div", cart)

        const itemDiv = this.create("div", container)
        itemDiv.className = "item"
        itemDiv.style.display = "flex"
        itemDiv.style.margin = "21px 34px"
        itemDiv.style.justifyContent = "space-between"

        const left = this.create("div", itemDiv)
        left.style.width = "144px"
        const img = document.createElement("img")
        img.src = item.image
        img.style.width = "100%"
        left.appendChild(img)
        const middle = this.create("div", itemDiv)
        middle.style.flex = "1 1 0"
        this.render("text/h2", item.titel, middle)

        if (Number(item.stocked) > 21) {
          const text = this.create("div", middle)
          text.innerHTML = "Auf Lager"
          text.style.fontFamily = "sans-serif"
          text.style.color = this.colors.light.success
          text.style.margin = "0 34px"
        } else if (Number(item.stocked) === 0) {
          const text = this.create("div", middle)
          text.innerHTML = "Ausverkauft"
          text.style.fontFamily = "sans-serif"
          text.style.color = this.colors.light.error
          text.style.margin = "0 34px"
        } else if (Number(item.stocked) < 21) {
          const text = this.create("div", middle)
          text.innerHTML = `Nur noch ${item.stocked} Artikel vorhanden`
          text.style.fontFamily = "sans-serif"
          text.style.color = this.colors.matte.orange
          text.style.margin = "0 34px"
        }

        if (Number(item.shipping) === 0) {
          const text = this.create("div", middle)
          text.innerHTML = "Dieser Hersteller bietet KOSTENLOSEN Versand"
          text.style.fontFamily = "sans-serif"
          text.style.color = "#999"
          text.style.margin = "0 34px"

        } else if (Number(item.shipping) > 0) {
          const text = this.create("div", middle)
          text.innerHTML = `Versandkosten: ${Number(item.shipping).toFixed(2).replace(".", ",")} €`
          text.style.fontFamily = "sans-serif"
          text.style.color = "#999"
          text.style.margin = "0 34px"
        }

        const tools = this.create("div", middle)
        tools.style.display = "flex"

        const quantity = this.create("div", tools)

        const select = this.create("input/select", quantity)
        this.add("outline-hover/node", select)


        if (Number(item.quantity) >= 10) {
          select.add(["0 - Löschen", "1", "2", "3", "4", "5", "6", "7", "8", "9", `${item.quantity}`, `${item.quantity}+`])
        } else {
          select.add(["0 - Löschen", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10+"])
        }

        if (Number(item.quantity) > Number(item.stocked)) {
          select.add(["0 - Löschen", "1", "2", "3", "4", "5", "6", "7", "8", "9", `${item.stocked}`, `${item.stocked}+`])
        }

        if (Number(item.quantity) > Number(item.stocked)) {
          select.value = item.stocked
        } else {
          select.value = item.quantity
        }

        select.style.margin = "21px 34px"
        select.style.fontSize = "21px"
        select.style.padding = "21px 34px"
        select.oninput = (ev) => {

          if (ev.target.value.startsWith("0")) {
            const cart = JSON.parse(window.localStorage.getItem("cart"))
            for (let i = 0; i < cart.length; i++) {
              const cartItem = cart[i]
              if (item.id === cartItem.id) {
                cart.splice(i, 1)
                window.localStorage.setItem("cart", JSON.stringify(cart))
                container.remove()

                const localCart = JSON.parse(window.localStorage.getItem("cart"))
                if (localCart.length <= 0) {
                  rightHr.remove()
                  parent.remove()
                }

                if (localCart.length > 0) {
                  const totalQuantity = localCart.reduce((acc, cur) => acc + cur.quantity, 0)

                  let totalPrice = 0
                  for (let i = 0; i < localCart.length; i++) {
                    const cartItem = localCart[i]
                    totalPrice = totalPrice + (cartItem.quantity * Number(cartItem.price))
                  }

                  rightHr.text.innerHTML = `Zusammenfassung (${totalQuantity} Artikel): ${totalPrice.toFixed(2).replace(".", ",")} €`
                }


              }

            }
          }

          if (ev.target.value.includes("+")) {
            quantity.innerHTML = ""
            quantity.style.display = "flex"
            quantity.style.justifyContent = "center"
            quantity.style.alignItems = "center"
            const tel = this.create("input/tel", quantity)
            this.add("outline-hover/node", tel)

            const cart = JSON.parse(window.localStorage.getItem("cart"))
            for (let i = 0; i < cart.length; i++) {
              const cartItem = cart[i]
              if (item.id === cartItem.id) {
                tel.value = cartItem.quantity
              }
            }
            tel.style.borderRadius = "8px"
            tel.style.border = "none"
            tel.style.margin = "21px 34px"
            tel.style.width = "89px"
            tel.style.fontSize = "34px"
            const submit = this.render("text/link", "Aktualisieren", quantity)
            submit.style.margin = "0"
            submit.innerHTML = "Aktualisieren"
            submit.onclick = () => {

              const cart = JSON.parse(window.localStorage.getItem("cart"))
              for (let i = 0; i < cart.length; i++) {
                const cartItem = cart[i]
                if (item.id === cartItem.id) {
                  if (this.verifyIs("text/+int", tel.value)) {

                    if (Number(tel.value) > Number(item.stocked)) {
                      cartItem.quantity = Number(item.stocked)
                    } else {
                      cartItem.quantity = Number(tel.value)
                    }
                    window.localStorage.setItem("cart", JSON.stringify(cart))
                  }
                }
              }


              quantity.innerHTML = ""
              quantity.append(select)
              select.innerHTML = ""
              if (this.verifyIs("text/+int", tel.value)) {

                if (tel.value >= 10) {
                  if (Number(tel.value) > Number(item.stocked)) {
                    select.add(["0 - Löschen", "1", "2", "3", "4", "5", "6", "7", "8", "9", `${item.stocked}`, `${item.stocked}+`])
                  } else {
                    select.add(["0 - Löschen", "1", "2", "3", "4", "5", "6", "7", "8", "9", `${tel.value}`, `${tel.value}+`])
                  }

                } else {
                  select.add(["0 - Löschen", "1", "2", "3", "4", "5", "6", "7", "8", "9", `10+`])
                }

              } else {
                const cart = JSON.parse(window.localStorage.getItem("cart"))
                for (let i = 0; i < cart.length; i++) {
                  const cartItem = cart[i]
                  if (item.id === cartItem.id) {
                    select.add(["0 - Löschen", "1", "2", "3", "4", "5", "6", "7", "8", "9", `${cartItem.quantity}`, `${cartItem.quantity}+`])
                  }
                }
              }

              let result = 0
              if (Number(tel.value) > Number(item.stocked)) {
                result = Number(item.stocked)
              } else {
                result = Number(tel.value)
              }
              select.value = result



              const localCart = JSON.parse(window.localStorage.getItem("cart"))
              if (localCart.length > 0) {
                const totalQuantity = localCart.reduce((acc, cur) => acc + Number(cur.quantity), 0)

                let totalPrice = 0
                for (let i = 0; i < localCart.length; i++) {
                  const cartItem = localCart[i]
                  totalPrice = totalPrice + (cartItem.quantity * Number(cartItem.price))
                }

                rightHr.text.innerHTML = `Zusammenfassung (${totalQuantity} Artikel): ${totalPrice.toFixed(2).replace(".", ",")} €`
              }



            }

          }

          if (Number(ev.target.value) > 0 && Number(ev.target.value) < 10) {

            let result = 0
            if (Number(ev.target.value) > Number(item.stocked)) {
              result = Number(item.stocked)
            } else {
              result = Number(ev.target.value)
            }
            select.value = result


            let cart = JSON.parse(window.localStorage.getItem("cart"))
            for (let i = 0; i < cart.length; i++) {
              const cartItem = cart[i]
              if (item.id === cartItem.id) {
                if (this.verifyIs("text/+int", Number(ev.target.value))) {
                  if (Number(ev.target.value) > Number(item.stocked)) {
                    cartItem.quantity = Number(item.stocked)
                  } else {
                    cartItem.quantity = Number(ev.target.value)
                  }
                  window.localStorage.setItem("cart", JSON.stringify(cart))
                }
              }
            }

            cart = JSON.parse(window.localStorage.getItem("cart"))
            if (cart.length > 0) {
              const totalQuantity = cart.reduce((acc, cur) => acc + Number(cur.quantity), 0)
              let totalPrice = 0
              for (let i = 0; i < cart.length; i++) {
                const cartItem = cart[i]
                totalPrice = totalPrice + (Number(cartItem.quantity) * Number(cartItem.price))
              }
              rightHr.text.innerHTML = `Zusammenfassung (${totalQuantity} Artikel): ${totalPrice.toFixed(2).replace(".", ",")} €`
            }
          }

        }

        if (Number(item.quantity) > Number(item.stocked)) {
          const cart = JSON.parse(window.localStorage.getItem("cart"))
          for (let i = 0; i < cart.length; i++) {
            const cartItem = cart[i]
            if (item.id === cartItem.id) {
              cartItem.quantity = Number(item.stocked)
              window.localStorage.setItem("cart", JSON.stringify(cart))
            }
          }
        }

        const del = this.render("text/link", "Löschen", tools)
        del.onclick = () => {
          const cart = JSON.parse(window.localStorage.getItem("cart"))
          for (let i = 0; i < cart.length; i++) {
            const cartItem = cart[i]
            if (item.id === cartItem.id) {
              cart.splice(i, 1)
              window.localStorage.setItem("cart", JSON.stringify(cart))
              container.remove()

              const localCart = JSON.parse(window.localStorage.getItem("cart"))
              if (localCart.length <= 0) {
                rightHr.remove()
                parent.remove()
              }

              if (localCart.length > 0) {
                const totalQuantity = localCart.reduce((acc, cur) => acc + Number(cur.quantity), 0)

                let totalPrice = 0
                for (let i = 0; i < localCart.length; i++) {
                  const cartItem = localCart[i]
                  totalPrice = totalPrice + (cartItem.quantity * Number(cartItem.price))
                }

                rightHr.text.innerHTML = `Zusammenfassung (${totalQuantity} Artikel): ${totalPrice.toFixed(2).replace(".", ",")} €`
              }


            }

          }
        }
        const more = this.render("text/link", "Weitere Artikel wie dieser", tools)

        const right = this.create("div", itemDiv)
        right.style.display = "flex"
        right.style.justifyContent = "flex-end"
        const title = this.render("text/title", `${Number(item.price).toFixed(2).replace(".", ",")} €`, right)
        title.style.margin = "21px 0"

      }


      const localCart = JSON.parse(window.localStorage.getItem("cart"))
      let rightHr
      if (localCart.length > 0) {
        const totalQuantity = localCart.reduce((acc, cur) => acc + Number(cur.quantity), 0)

        let totalPrice = 0
        for (let i = 0; i < localCart.length; i++) {
          const cartItem = localCart[i]
          totalPrice = totalPrice + (cartItem.quantity * Number(cartItem.price))
        }

        rightHr = this.render("text/right-hr", `Zusammenfassung (${totalQuantity} Artikel): ${totalPrice.toFixed(2).replace(".", ",")} €`, cart)
      }

      const buttonContainer = this.create("div", cart)
      buttonContainer.style.display = "flex"
      buttonContainer.style.justifyContent = "flex-end"
      const button = this.render("text/node/action-button", "Zur Kasse gehen", buttonContainer)
      button.style.width = "50vw"
      button.style.height = "55px"
      button.onclick = async () => {
        const res = await this.get("cassa/location/path")
        if (res.status === 200) {
          window.location.assign(res.response)
        } else {
          window.alert("Es wurde keine Weiterleitung definiert.")
        }
      }
      this.add("outline-hover/node", button)

    }

    if (event === "contacts/node/update-self") {

      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.length; i++) {
        const contact = input[i]

        const contactButton = this.create("button/left-right", parent)
        contactButton.left.innerHTML = contact.email
        if (contact.alias !== undefined) {
          contactButton.left.innerHTML = `<div>${contact.alias}</div><div style="font-size:13px;">${contact.email}</div>`
        }
        contactButton.right.style.display = "flex"

        if (contact.website) {
          this.render("icon/node/path", "/public/website.svg", contactButton.right).then(icon => {
            this.add("outline-hover/node", icon)
            icon.style.width = "34px"
            icon.style.padding = "0 13px"
            icon.onclick = () => {
              window.open(contact.website, "_blank")
            }
          })
        }

        if (contact.phone) {
          this.render("icon/node/path", "/public/phone-out.svg", contactButton.right).then(icon => {
            this.add("outline-hover/node", icon)
            icon.style.width = "34px"
            icon.style.padding = "0 13px"
            icon.onclick = () => {
              window.location.href = `tel:${contact.phone}`
            }
          })
        }

        if (contact.email) {
          this.render("icon/node/path", "/public/email-out.svg", contactButton.right).then(icon => {
            this.add("outline-hover/node", icon)
            icon.style.width = "34px"
            icon.style.padding = "0 13px"
            icon.onclick = () => {
              window.location.href = `mailto:${contact.email}`
            }
          })
        }

        contactButton.onclick = () => {
          this.overlay("popup", async updateOverlay => {
            this.create("header/info", updateOverlay).innerHTML = contact.email
            const buttons = this.create("div/scrollable", updateOverlay)

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".alias"
              button.right.innerHTML = "Gib deinem Kontakt einen alternativen Namen"
              button.onclick = () => {
                this.overlay("popup", overlay => {
                  this.create("header/info", overlay).innerHTML = contact.email

                  const funnel = this.create("div/scrollable", overlay)

                  const aliasField = this.create("field/text", funnel)
                  aliasField.label.innerHTML = "Alternative Bezeichnung für deinen Kontakt"
                  aliasField.input.setAttribute("required", "true")
                  if (contact.alias !== undefined) {
                    aliasField.input.value = contact.alias
                  }
                  this.verify("input/value", aliasField.input)
                  this.add("outline-hover/node", aliasField.input)
                  aliasField.input.oninput = () => this.verify("input/value", aliasField.input)


                  const submit = this.create("button/action", funnel)
                  this.add("outline-hover/node", submit)
                  submit.innerHTML = "Alias jetzt speichern"
                  submit.onclick = async () => {

                    await this.verify("input/value", aliasField.input)

                    this.overlay("security", async securityOverlay => {
                      const res = await this.register("alias/contacts/self", {id: contact.created, alias: aliasField.input.value})

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        securityOverlay.remove()
                      }

                      if (res.status === 200) {
                        window.alert("Alias erfolgreich gespeichert.")

                        const res = await this.get("contacts/user/self")
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = "Keine Kontakte gefunden"
                        }
                        if (res.status === 200) {
                          const contacts = JSON.parse(res.response)
                          this.render("contacts/node/update-self", contacts, parent)
                        }

                        overlay.remove()
                        updateOverlay.remove()
                        securityOverlay.remove()
                      }
                    })

                  }

                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".character"
              button.right.innerHTML = "Erfahre mehr über deinen Kontakt"
              button.onclick = () => {
                this.overlay("popup", overlay => {
                  this.create("header/info", overlay).innerHTML = contact.email

                  const funnel = this.create("div", overlay)

                  const dateField = this.create("field/date", funnel)
                  dateField.label.innerHTML = "Gebe das Geburtsdatum deines Kontakts ein"
                  dateField.input.placeholder = "yyyy-mm-dd"
                  this.add("outline-hover/node", dateField.input)
                  let birthday
                  if (contact.birthday) {
                    const split = contact.birthday.split("T")
                    dateField.input.value = split[0]
                    birthday = split[0]
                  }
                  dateField.input.setAttribute("required", "true")
                  this.verify("input/value", dateField.input)

                  const submit = this.render("text/node/action-button", "Geburtsdatum jetzt speichern", funnel)
                  this.add("outline-hover/node", submit)
                  submit.onclick = async () => {
                    await this.verify("input/value", dateField.input)

                    const date = new Date(dateField.input.value)

                    this.overlay("security", async securityOverlay => {
                      const res = await this.register("birthday/contacts/self", {id: contact.created, birthday: date.toISOString()})

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        securityOverlay.remove()
                      }

                      if (res.status === 200) {
                        window.alert("Geburtsdatum erfolgreich gespeichert.")

                        const res = await this.get("contacts/user/self")
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = "Keine Kontakte gefunden"
                        }
                        if (res.status === 200) {
                          const contacts = JSON.parse(res.response)
                          this.render("contacts/node/update-self", contacts, parent)
                        }

                        overlay.remove()
                        updateOverlay.remove()
                        securityOverlay.remove()
                      }
                    })

                  }

                  if (birthday) {
                    const numerology = this.create("div/scrollable", overlay)

                    if (contact.alias) {
                      this.render("text/hr", `Numerologie von ${contact.alias}`, numerology)
                    } else {
                      this.render("text/hr", `Numerologie von ${contact.email}`, numerology)
                    }

                    const date = birthday.split("T")[0]
                    const master = this.convert("date/master", date)
                    this.render("text/p", `Lebensweg: ${this.convert("date/life-path-calc-text", date)} = ${master.toString().split('').join(' + ')} = <span style="font-size: 34px;">${this.convert("date/life-path", date)}</span>`, numerology)
                    if (master === 11 || master === 22 || master === 33) {
                      this.render("text/p", `Masterzahl: <span style="font-size:34px;">${master}</span>`, numerology)
                    }

                    const dateNumbers = date.match(/\d/g).map(Number)
                    dateNumbers.push(this.convert("date/life-path", date))
                    master.toString().split("").forEach(digit => dateNumbers.push(parseInt(digit)))
                    const missingNumbers = [];
                    for (let i = 1; i <= 9; i++) {
                      if (!dateNumbers.includes(i)) {
                        missingNumbers.push(i);
                      }
                    }
                    if (missingNumbers.length > 0) {
                      this.render("text/p", `Fehlende Zahlen: <span style="font-size:34px;">${missingNumbers.join(", ")}</span>`, numerology)
                    }


                  }

                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".status"
              button.right.innerHTML = "Gib deinem Kontakt einen Status"
              button.onclick = () => {
                this.overlay("popup", overlay => {
                  this.create("header/info", overlay).innerHTML = contact.email

                  const funnel = this.create("div/scrollable", overlay)

                  const statusField = this.create("field/text", funnel)
                  this.add("outline-hover/node", statusField.input)
                  statusField.label.innerHTML = "Vergebe einen Status Wert"
                  statusField.input.setAttribute("required", "true")
                  if (contact.status !== undefined) {
                    statusField.input.value = contact.status
                  }
                  this.verify("input/value", statusField.input)
                  statusField.input.oninput = () => this.verify("input/value", statusField.input)

                  const submit = this.create("button/action", funnel)
                  this.add("outline-hover/node", submit)
                  submit.innerHTML = "Status jetzt speichern"
                  submit.onclick = async () => {

                    await this.verify("input/value", statusField.input)

                    this.overlay("security", async securityOverlay => {
                      const res = await this.register("status/contacts/self", {id: contact.created, status: statusField.input.value})

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        securityOverlay.remove()
                      }

                      if (res.status === 200) {
                        window.alert("Status erfolgreich gespeichert.")

                        const res = await this.get("contacts/user/self")
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = "Keine Kontakte gefunden"
                        }
                        if (res.status === 200) {
                          const contacts = JSON.parse(res.response)
                          this.render("contacts/node/update-self", contacts, parent)
                        }

                        overlay.remove()
                        updateOverlay.remove()
                        securityOverlay.remove()
                      }
                    })

                  }

                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".notes"
              button.right.innerHTML = "Mache dir Notizen zu deinem Kontakt"
              button.onclick = () => {
                this.overlay("popup", overlay => {
                  this.create("header/info", overlay).innerHTML = contact.email

                  const funnel = this.create("div/scrollable", overlay)

                  const notesField = this.create("field/textarea", funnel)
                  this.add("outline-hover/node", notesField.input)
                  notesField.label.innerHTML = "Notizen"
                  notesField.input.style.height = "55vh"
                  if (contact.notes !== undefined) {
                    notesField.input.value = contact.notes
                  }
                  this.verify("input/value", notesField.input)
                  notesField.input.oninput = () => this.verify("input/value", notesField.input)

                  const submit = this.create("button/action", funnel)
                  this.add("outline-hover/node", submit)
                  submit.innerHTML = "Notizen jetzt speichern"
                  submit.onclick = async () => {

                    await this.verify("input/value", notesField.input)

                    this.overlay("security", async securityOverlay => {
                      const res = await this.register("notes/contacts/self", {id: contact.created, notes: notesField.input.value})

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        securityOverlay.remove()
                      }

                      if (res.status === 200) {
                        window.alert("Notizen erfolgreich gespeichert.")

                        const res = await this.get("contacts/user/self")
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = "Keine Kontakte gefunden"
                        }
                        if (res.status === 200) {
                          const contacts = JSON.parse(res.response)
                          this.render("contacts/node/update-self", contacts, parent)
                        }

                        overlay.remove()
                        securityOverlay.remove()
                      }
                    })

                  }

                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".phone"
              button.right.innerHTML = "Gib die Telefon Nummer deines Kontakts ein"
              button.onclick = () => {
                this.overlay("popup", overlay => {
                  this.create("header/info", overlay).innerHTML = contact.email

                  const funnel = this.create("div/scrollable", overlay)

                  const phoneField = this.create("field/text", funnel)
                  phoneField.label.innerHTML = "Telefon Nummer"
                  phoneField.input.setAttribute("required", "true")
                  if (contact.phone !== undefined) {
                    phoneField.input.value = contact.phone
                  }
                  this.verify("input/value", phoneField.input)
                  this.add("outline-hover/node", phoneField.input)
                  phoneField.input.oninput = () => this.verify("input/value", phoneField.input)


                  const submit = this.create("button/action", funnel)
                  this.add("outline-hover/node", submit)
                  submit.innerHTML = "Nummer jetzt speichern"
                  submit.onclick = async () => {

                    await this.verify("input/value", phoneField.input)

                    this.overlay("security", async securityOverlay => {
                      const res = await this.register("phone/contacts/self", {id: contact.created, phone: phoneField.input.value})

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        securityOverlay.remove()
                      }

                      if (res.status === 200) {
                        window.alert("Telefon Nummer erfolgreich gespeichert.")

                        const res = await this.get("contacts/user/self")
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = "Keine Kontakte gefunden"
                        }
                        if (res.status === 200) {
                          const contacts = JSON.parse(res.response)
                          this.render(event, contacts, parent)
                        }

                        overlay.remove()
                        updateOverlay.remove()
                        securityOverlay.remove()
                      }
                    })

                  }

                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".website"
              button.right.innerHTML = "Gib die Webseite deines Kontakts ein"
              button.onclick = () => {
                this.overlay("popup", overlay => {
                  this.create("header/info", overlay).innerHTML = contact.email

                  const funnel = this.create("div/scrollable", overlay)

                  const websiteField = this.create("field/text", funnel)
                  websiteField.label.innerHTML = "Webseite"
                  websiteField.input.setAttribute("required", "true")
                  if (contact.website !== undefined) {
                    websiteField.input.value = contact.website
                  }
                  this.verify("input/value", websiteField.input)
                  this.add("outline-hover/node", websiteField.input)
                  websiteField.input.oninput = () => this.verify("input/value", websiteField.input)


                  const submit = this.create("button/action", funnel)
                  this.add("outline-hover/node", submit)
                  submit.innerHTML = "Webseite jetzt speichern"
                  submit.onclick = async () => {

                    await this.verify("input/value", websiteField.input)

                    this.overlay("security", async securityOverlay => {
                      const res = await this.register("website/contacts/self", {id: contact.created, website: websiteField.input.value})

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        securityOverlay.remove()
                      }

                      if (res.status === 200) {
                        window.alert("Webseite erfolgreich gespeichert.")

                        const res = await this.get("contacts/user/self")
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = "Keine Kontakte gefunden"
                        }
                        if (res.status === 200) {
                          const contacts = JSON.parse(res.response)
                          this.render("contacts/node/update-self", contacts, parent)
                        }

                        overlay.remove()
                        updateOverlay.remove()
                        securityOverlay.remove()
                      }
                    })

                  }

                })
              }
            }

            {
              const res = await this.verifyIs("user/expert")
              if (res.status === 200) {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".promote"
                button.right.innerHTML = "Erhalte Zugang zu unendlich vielen Möglichkeiten"
                button.onclick = () => {
                  this.overlay("popup", async overlay => {

                    if (contact.alias) {
                      this.render("text/h1", `Promote ${contact.email}`, overlay)
                    } else {
                      this.render("text/h1", `Promote ${contact.email}`, overlay)
                    }

                    const funnel = this.create("div/scrollable", overlay)

                    const searchField = this.create("field/text", funnel)
                    searchField.label.innerHTML = "Suche nach Text im Pfad"
                    searchField.input.placeholder = "/experte/plattform/pfad"
                    searchField.style.margin = "0 34px"
                    this.verify("input/value", searchField.input)
                    this.add("outline-hover/node", searchField.input)

                    const pathField = await this.create("field/open-expert-values-path-select", funnel)

                    const originalOptions = Array.from(pathField.input.options).map(option => option.cloneNode(true))
                    searchField.input.oninput = (ev) => {
                      const searchTerm = ev.target.value.toLowerCase()
                      const options = originalOptions.map(it => it.value)
                      const filtered = options.filter(it => it.toLowerCase().includes(searchTerm))
                      pathField.input.add(filtered)
                    }

                    pathField.input.style.height = "55vh"
                    pathField.input.setAttribute("multiple", "true")
                    for (let i = 0; i < pathField.input.options.length; i++) {
                      const option = pathField.input.options[i]
                      option.selected = false
                    }
                    pathField.input.oninput = async () => {

                      const fieldFunnel = await this.convert("path/field-funnel", pathField.input.value)
                      console.log(fieldFunnel);
                      if (fieldFunnel) {

                        this.overlay("popup", async overlay => {
                          this.create("header/info", overlay).innerHTML = contact.email + "." + fieldFunnel.id

                          const create = this.create("button/left-right", overlay)
                          create.left.innerHTML = ".create"
                          create.right.innerHTML = this.convert("text/capital-first-letter", fieldFunnel.id) + " definieren"
                          create.addEventListener("click", () => {

                            this.overlay("popup", async overlay => {
                              this.create("header/info", overlay).innerHTML = contact.email + "." + fieldFunnel.id + ".create"

                              overlay.append(fieldFunnel)
                              this.verifyIs("field-funnel/valid", fieldFunnel)
                              this.add("outline-hover/field-funnel", fieldFunnel)

                              const submitButton = fieldFunnel.querySelector(".submit-field-funnel-button")

                              if (submitButton) {

                                submitButton.innerHTML = `${this.convert("text/capital-first-letter", fieldFunnel.id)} jetzt speichern`
                                submitButton.onclick = async () => {

                                  const path = pathField.input.value

                                  await this.verify("field-funnel", fieldFunnel)

                                  const map = await this.convert("field-funnel/map", fieldFunnel)

                                  this.overlay("security", async securityOverlay => {

                                    const register = {}
                                    register.email = contact.email
                                    register.map = map
                                    register.path = path
                                    register.id = fieldFunnel.id
                                    const res = await this.register("map/location-list/email-expert", register)

                                    if (res.status === 200) {
                                      window.alert("Daten erfolgreich gespeichert.")

                                      const res = await this.get("tag/location/email-expert", {tag: fieldFunnel.id, email: contact.email, path: pathField.input.value})
                                      if (res.status === 200) {
                                        const tag = JSON.parse(res.response)
                                        this.render("location-list/node/email-expert", {list: tag[fieldFunnel.id], tag: fieldFunnel.id, email: contact.email, path: pathField.input.value}, locationList)
                                      }
                                      if (res.status !== 200) {
                                        this.convert("parent/info", locationList)
                                        locationList.innerHTML = `Keine ${this.convert("text/capital-first-letter", fieldFunnel.id)} gefunden`
                                      }

                                      this.remove("overlay", securityOverlay)
                                    }

                                    if (res.status !== 200) {
                                      window.alert("Fehler.. Bitte wiederholen.")
                                      this.remove("overlay", securityOverlay)
                                    }

                                  })

                                }

                              } else {
                                window.alert("Field Funnel besitzt keinen Button mit der Klasse 'submit-field-funnel-button'")
                              }


                            })

                          })

                          if (contact.alias) {
                            this.render("text/hr", this.convert("text/capital-first-letter", fieldFunnel.id) + " von " + contact.alias, overlay)
                          } else {
                            this.render("text/hr", this.convert("text/capital-first-letter", fieldFunnel.id) + " von " + contact.email, overlay)
                          }

                          const locationList = this.create("info/loading", overlay)

                          const res = await this.get("tag/location/email-expert", {tag: fieldFunnel.id, email: contact.email, path: pathField.input.value})
                          if (res.status === 200) {
                            const tag = JSON.parse(res.response)
                            this.render("location-list/node/email-expert", {list: tag[fieldFunnel.id], tag: fieldFunnel.id, email: contact.email, path: pathField.input.value}, locationList)
                          }
                          if (res.status !== 200) {
                            this.convert("parent/info", locationList)
                            locationList.innerHTML = `Keine ${this.convert("text/capital-first-letter", fieldFunnel.id)} gefunden`
                          }

                        })
                      }

                    }

                  })
                }
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".delete"
              button.right.innerHTML = "Kontakt entfernen"
              button.onclick = () => {

                const confirm = window.confirm("Möchtest du deinen Kontakt wirklich entfernen?")
                if (confirm === true) {

                  this.overlay("security", async securityOverlay => {
                    const res = await this.delete("id/contacts/self", contact.created)

                    if (res.status === 200) {
                      window.alert("Kontakt erfolgreich entfernt.")
                      contactButton.remove()
                      updateOverlay.remove()
                      securityOverlay.remove()
                    }

                    if (res.status !== 200) {
                      window.alert("Fehler.. Bitte wiederholen.")
                      securityOverlay.remove()
                    }
                  })


                }
              }
            }

          })
        }

      }


    }

    if (event === "contacts/node/next-list") {

      return new Promise(async(resolve, reject) => {
        try {

          const res = await this.get("contacts/user/self")
          if (res.status === 200) {
            const contacts = JSON.parse(res.response)

            parent.innerHTML = ""

            for (let i = 0; i < contacts.length; i++) {
              const contact = contacts[i]

              if (contact.notes) {
                const regex = /next:(\w+)(?:\+(\d+[dm]))?\(([^)]+)\)/g
                let match

                while ((match = regex.exec(contact.notes)) !== null) {
                  const action = match[1]
                  const duration = match[2] || ''
                  const content = match[3]

                  const button = this.create("button/left-right", parent)

                  if (contact.status === "lead-new") {
                    button.style.border = `3px solid ${this.colors.matte.green}`
                    this.animate("node/border-ripple-out", button)
                    this.render("text/node/bottom-right-onhover", "Neuer Kontakt", button)
                  }

                  if (contact.status === "lead-update") {
                    button.style.border = `3px solid ${this.colors.matte.sunflower}`
                    this.animate("node/border-ripple-out", button)
                    this.render("text/node/bottom-right-onhover", "Neue Kontaktanfrage", button)
                  }


                  if (action === "tel" || action === "webcall") {
                    let title
                    if (contact.alias) {
                      title = this.render("text/div", `${contact.alias} anrufen.`, button.left)
                    } else {
                      title = this.render("text/div", `${contact.email} anrufen.`, button.left)
                    }

                    if (contact.phone) {
                      this.render("icon/node/path", "/public/phone-out.svg", button.right).then(icon => {
                        icon.style.width = "34px"
                        icon.style.padding = "0 13px"
                      })
                      button.onclick = () => {
                        window.location.href = `tel:${contact.phone}`
                      }
                    }

                  }

                  if (action === "email") {
                    let title
                    if (contact.alias) {
                      title = this.render("text/div", `${contact.alias} schreiben.`, button.left)
                    } else {
                      title = this.render("text/div", `${contact.email} schreiben.`, button.left)
                    }

                    if (contact.email) {
                      this.render("icon/node/path", "/public/email-out.svg", button.right).then(icon => {
                        icon.style.width = "34px"
                        icon.style.padding = "0 13px"
                      })
                      button.onclick = () => {
                        window.location.href = `mailto:${contact.email}`
                      }
                    }
                  }

                  const contentDiv = this.create("div")
                  contentDiv.innerHTML = content
                  contentDiv.style.fontSize = "13px"
                  button.left.appendChild(contentDiv)


                }
              }
            }
            resolve(parent)
          }

        } catch (error) {
          reject(error)
        }
      })




    }

    if (event === "icon/node/path") {

      return new Promise(async(resolve, reject) => {
        try {
          const text = await this.convert("path/text", input)

          const icon = this.create("div")
          icon.className = "icon"
          icon.style.display = "flex"
          icon.style.justifyContent = "center"
          icon.style.alignItems = "center"
          const svg = this.convert("text/svg", text)
          svg.setAttribute("width", "100%")

          for (let i = 0; i < svg.querySelectorAll("*").length; i++) {
            const node = svg.querySelectorAll("*")[i]

            if (node.hasAttribute("fill")) {
              if (node.getAttribute("fill").includes("#000")) {
                if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                  node.setAttribute("fill", this.colors.dark.text)
                } else {
                  node.setAttribute("fill", this.colors.light.text)
                }
              }
            }

            if (node.hasAttribute("stroke")) {
              if (node.getAttribute("stroke").includes("#000")) {
                if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                  node.setAttribute("stroke", this.colors.dark.text)
                } else {
                  node.setAttribute("stroke", this.colors.light.text)
                }
              }
            }

          }

          if (svg.hasAttribute("fill")) {
            if (svg.getAttribute("fill").includes("#000")) {
              if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                svg.setAttribute("fill", this.colors.dark.text)
              } else {
                svg.setAttribute("fill", this.colors.light.text)
              }
            }
          }

          if (svg.hasAttribute("stroke")) {
            if (svg.getAttribute("stroke").includes("#000")) {
              if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                svg.setAttribute("stroke", this.colors.dark.text)
              } else {
                svg.setAttribute("stroke", this.colors.light.text)
              }
            }
          }

          icon.append(svg)
          if (parent) {
            if (typeof parent.append === "function") {
              parent.append(icon)
            }
          }
          resolve(icon)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "image-url/selector/self") {

      return new Promise(async(resolve, reject) => {
        try {

          const parentNode = document.querySelector(parent)
          if (parentNode === null) throw new Error("selector not found")

          const res = await this.get("tree/user/self", input)

          if (res.status === 200) {

            const oldHtml = parentNode.innerHTML

            parentNode.innerHTML = ""

            parentNode.style.display = "flex"
            parentNode.style.justifyContent = "center"
            parentNode.style.alignItems = "center"

            const image = document.createElement("img")
            parentNode.append(image)
            image.src = res.response
            image.style.width = "300px"
            image.style.margin = "34px"

            parentNode.onclick = () => {

              parentNode.innerHTML = oldHtml
              parentNode.onclick = null

              const urlInput = parentNode.querySelector(".field-input")
              urlInput.oninput = () => this.verify("input/value", urlInput)
              const submitButton = parentNode.querySelector(".submit-field-funnel-button")

              submitButton.addEventListener("click", async () => {
                await this.verify("input/value", urlInput)

                const res = await this.register("text/tree/self", {text: urlInput.value, tree: input})

                if (res.status === 200) {
                  window.alert("Daten erfolgreich gespeichert.")

                  if (submitButton.hasAttribute("next-path")) {
                    window.location.assign(submitButton.getAttribute("next-path"))
                  } else {
                    window.location.reload()
                  }

                }

              })

            }

          }

          if (res.status !== 200) {

            const urlInput = parentNode.querySelector(".field-input")
            urlInput.oninput = () => this.verify("input/value", urlInput)
            const submitButton = parentNode.querySelector(".submit-field-funnel-button")

            submitButton.addEventListener("click", async () => {
              await this.verify("input/value", urlInput)

              const res = await this.register("text/tree/self", {text: urlInput.value, tree: input})

              if (res.status === 200) {
                window.alert("Daten erfolgreich gespeichert.")
                window.location.reload()
              }

            })

          }

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "field-funnel/owner") {

      const funnel = this.create("div/scrollable", parent)

      const firstnameField = this.create("field/text", funnel)
      if (input.firstname) firstnameField.input.value = input.firstname
      firstnameField.label.innerHTML = "Vorname"
      firstnameField.input.placeholder = "Max"
      firstnameField.input.setAttribute("required", "true")
      firstnameField.input.maxLength = "55"
      firstnameField.input.addEventListener("input", () => this.verify("input/value", firstnameField.input))
      this.verify("input/value", firstnameField.input)

      const lastnameField = this.create("field/text", funnel)
      if (input.lastname) lastnameField.input.value = input.lastname
      lastnameField.label.innerHTML = "Nachname"
      lastnameField.input.placeholder = "Muster"
      lastnameField.input.setAttribute("required", "true")
      lastnameField.input.maxLength = "55"
      lastnameField.input.addEventListener("input", () => this.verify("input/value", lastnameField.input))
      this.verify("input/value", lastnameField.input)

      const streetField = this.create("field/text", funnel)
      if (input.street) streetField.input.value = input.street
      streetField.label.innerHTML = "Straße und Hausnummer"
      streetField.input.setAttribute("required", "true")
      streetField.input.placeholder = "Wiesentalstr. 21"
      streetField.input.maxLength = "55"
      streetField.input.addEventListener("input", () => this.verify("input/value", streetField.input))
      this.verify("input/value", streetField.input)

      const zipField = this.create("field/text", funnel)
      if (input.zip) zipField.input.value = input.zip
      zipField.label.innerHTML = "Postleitzahl und Ort"
      zipField.input.placeholder = "70184 Stuttgart"
      zipField.input.setAttribute("required", "true")
      zipField.input.maxLength = "55"
      zipField.input.addEventListener("input", () => this.verify("input/value", zipField.input))
      this.verify("input/value", zipField.input)

      const stateField = this.create("field/select", funnel)
      stateField.label.innerHTML = "Bundesland oder Kanton"

      const countryField = this.create("field/select", funnel)
      countryField.label.innerHTML = "Land"
      countryField.input.add(["Deutschland", "Österreich", "Schweiz"])
      if (input.country) countryField.input.select([input.country])
      if (countryField.input.value === "Deutschland") stateField.input.add(["Baden-Württemberg", "Bayern", "Berlin", "Brandenburg", "Bremen", "Hamburg", "Hessen", "Mecklenburg-Vorpommern", "Niedersachsen", "Nordrhein Westfalen", "Rheinland-Pfalz", "Saarland", "Sachsen", "Sachsen-Anhalt", "Schleswig-Holstein", "Thüringen"])
      if (countryField.input.value === "Österreich") stateField.input.add(["Burgenland", "Kärnten", "Niederösterreich", "Oberösterreich", "Salzburg", "Steiermark", "Tirol", "Vorarlberg", "Wien"])
      if (countryField.input.value === "Schweiz") stateField.input.add(["Aargau", "Appenzell Ausserrhoden", "Appenzell Innerrhoden", "Basel-Land", "Basel-Stadt", "Bern", "Fribourg Freiburg", "Genève Geneva", "Glarus", "Graubünden Grischuns Grigioni", "Jura", "Luzern Lucerne", "Neuchâtel", "Nidwalden", "Obwalden", "St.Gallen", "Schaffhausen", "Schwyz", "Solothurn", "Thurgau", "Ticino", "Uri", "Vaud", "Valais Wallis", "Zug", "Zürich"])
      if (input.state) stateField.input.select([input.state])
      countryField.input.addEventListener("input", () => {

        if (countryField.input.value === "Deutschland") stateField.input.add(["Baden-Württemberg", "Bayern", "Berlin", "Brandenburg", "Bremen", "Hamburg", "Hessen", "Mecklenburg-Vorpommern", "Niedersachsen", "Nordrhein Westfalen", "Rheinland-Pfalz", "Saarland", "Sachsen", "Sachsen-Anhalt", "Schleswig-Holstein", "Thüringen"])
        if (countryField.input.value === "Österreich") stateField.input.add(["Burgenland", "Kärnten", "Niederösterreich", "Oberösterreich", "Salzburg", "Steiermark", "Tirol", "Vorarlberg", "Wien"])
        if (countryField.input.value === "Schweiz") stateField.input.add(["Aargau", "Appenzell Ausserrhoden", "Appenzell Innerrhoden", "Basel-Land", "Basel-Stadt", "Bern", "Fribourg Freiburg", "Genève Geneva", "Glarus", "Graubünden Grischuns Grigioni", "Jura", "Luzern Lucerne", "Neuchâtel", "Nidwalden", "Obwalden", "St.Gallen", "Schaffhausen", "Schwyz", "Solothurn", "Thurgau", "Ticino", "Uri", "Vaud", "Valais Wallis", "Zug", "Zürich"])

      })
      this.verify("input/value", stateField.input)
      this.verify("input/value", countryField.input)

      const phoneField = this.create("field/tel", funnel)
      if (input.phone) phoneField.input.value = input.phone
      phoneField.label.innerHTML = "Telefon"
      phoneField.input.setAttribute("required", "true")
      phoneField.input.maxLength = "21"
      phoneField.input.accept = "text/tel"
      phoneField.input.placeholder = "+49.."
      phoneField.input.addEventListener("input", () => this.verify("input/value", phoneField.input))
      this.verify("input/value", phoneField.input)

      const submit = this.create("button/action", funnel)
      submit.innerHTML = "Besitzerdaten jetzt speichern"
      submit.addEventListener("click", async () => {

        await this.verify("field-funnel", funnel)

        this.overlay("security", async securityOverlay => {

          const map = {}
          map.firstname = firstnameField.input.value
          map.lastname = lastnameField.input.value
          map.street = streetField.input.value
          map.zip = zipField.input.value
          map.country = countryField.input.value
          map.state = stateField.input.value
          map.phone = phoneField.input.value
          const res = await this.register("owner/user/self", map)

          if (res.status === 200) {
            window.alert("Besitzerdaten erfolgreich gespeichert.")
            this.remove("overlay", securityOverlay)
            this.remove("overlay", parent)
          }

          if (res.status !== 200) {
            window.alert("Fehler.. Bitte wiederholen.")
            this.remove("overlay", securityOverlay)
          }


        })

      })

    }

    if (event === "image/node/src") {
      const image = this.create("div/image", input)
      parent?.appendChild(image)
      return image
    }

    if (event === "full-cite/node/mla") {
      let authorStr = input.authors.join(", ")
      let publisherStr = input.publisher[0]
      if (input.publisher.length > 1) {
        publisherStr = `${input.publisher[0]} et al.`
      }
      const cite = document.createElement("div")
      cite.className = "full cite"
      cite.style.fontFamily = "sans-serif"
      cite.style.margin = "21px 34px"
      cite.innerHTML = `${authorStr}, ${input.title}, ${publisherStr}, ${this.convert("millis/yyyy", input.published)}`
      const citationCounter = document.querySelectorAll(".cite").length
      cite.setAttribute("citation-counter", citationCounter + 1)
      parent?.append(cite)
      return cite

    }

    if (event === "inline-cite/node/mla") {

      let author = input.authors[0]
      if (input.authors.length > 1) {
        author += " et al."
      }
      const cite = document.createElement("span")
      cite.className = "inline cite"
      cite.style.fontFamily = "sans-serif"
      cite.style.margin = "0 5px"
      cite.innerHTML = `(${author} ${this.convert("millis/yyyy", input.published)})`
      const citationCounter = document.querySelectorAll(".cite").length
      cite.setAttribute("citation-counter", citationCounter + 1)
      parent?.append(cite)
      return cite

    }

    if (event === "item/node/all") {

      Object.entries(input).forEach(([key, value]) => {
        for (let i = 0; i < parent.querySelectorAll("*").length; i++) {
          const child = parent.querySelectorAll("*")[i]

          if (child.classList.contains(key)) {

            if (key === "image") {
              child.src = value
            } else {
              child.innerHTML = value
            }

          }
        }
      })

    }

    if (event === "user-keys/update-buttons") {


      parent.innerHTML = ""
      for (let i = 0; i < input.keys.length; i++) {
        const key = input.keys[i]

        const keysButton = this.create("button/left-right", parent)
        keysButton.left.innerHTML = `.${key}`

        keysButton.onclick = () => {
          this.overlay("popup", overlay => {

            const info = this.create("header/info", overlay)
            info.innerHTML = input.user.email
            info.append(this.convert("text/span", `/keys/${key}`))

            const content = this.create("div/scrollable", overlay)

            {

              const button = this.create("button/left-right", content)
              button.left.innerHTML = ".body"
              button.right.innerHTML = "Datensatz Inhalt"
              button.onclick = () => {


                this.overlay("popup", async overlay => {

                  const info = this.create("header/info", overlay)
                  info.innerHTML = input.user.email
                  info.append(this.convert("text/span", `/keys/${key}/body`))

                  const content = this.create("info/loading", overlay)

                  const res = await this.get("body/key/admin", {id: input.user.id, key})

                  if (res.status === 200) {

                    let body
                    try {
                      body = JSON.parse(res.response)
                    } catch (error) {
                      body = res.response
                    }



                    if (typeof body === "number") {

                      this.convert("parent/scrollable", content)

                      const numberField = this.create("field/tel", content)
                      numberField.label.innerHTML = "Dieser Datensatz enthält eine Nummer"
                      numberField.input.style.fontFamily = "monospace"
                      numberField.input.style.fontSize = "13px"
                      numberField.input.setAttribute("required", "true")
                      numberField.input.setAttribute("accept", "text/number")
                      numberField.input.value = body
                      this.verify("input/value", numberField.input)
                      numberField.oninput = () => this.verify("input/value", numberField.input)

                      const submit = this.create("button/action", content)
                      submit.innerHTML = "Zeichenkette jetzt speichern"
                      submit.onclick = async () => {

                        await this.verify("input/value", numberField.input)

                        const number = numberField.input.value

                        this.overlay("security", async securityOverlay => {

                          const res = await this.update("number/user-tree/admin", {number, id: input.user.id, tree: key})

                          if (res.status === 200) {
                            window.alert("Datensatz erfolgreich gespeichert.")
                            this.remove("overlay", overlay)
                            this.remove("overlay", securityOverlay)
                          }

                          if (res.status !== 200) {
                            window.alert("Fehler.. Bitte wiederholen.")
                            this.remove("overlay", securityOverlay)
                          }

                        })


                      }
                    }

                    if (typeof body === "string") {

                      this.convert("parent/scrollable", content)

                      const textField = this.create("field/textarea", content)
                      textField.label.innerHTML = "Dieser Datensatz enthält eine Zeichenkette"
                      textField.input.style.height = "55vh"
                      textField.input.style.fontFamily = "monospace"
                      textField.input.style.fontSize = "13px"
                      textField.input.value = body
                      this.verify("input/value", textField.input)

                      const submit = this.create("button/action", content)
                      submit.innerHTML = "Zeichenkette jetzt speichern"
                      submit.onclick = () => {

                        const text = textField.input.value

                        this.overlay("security", async securityOverlay => {

                          const res = await this.update("text/user-tree/admin", {text, id: input.user.id, tree: key})

                          if (res.status === 200) {
                            window.alert("Datensatz erfolgreich gespeichert.")
                            this.remove("overlay", overlay)
                            this.remove("overlay", securityOverlay)
                          }

                          if (res.status !== 200) {
                            window.alert("Fehler.. Bitte wiederholen.")
                            this.remove("overlay", securityOverlay)
                          }

                        })


                      }
                    }

                    if (typeof body === "object") {

                      this.convert("parent/scrollable", content)

                      const keys = []
                      for (let i = 0; i < Object.keys(body).length; i++) {
                        const item = Object.keys(body)[i]
                        keys.push(`${key}.${item}`)
                      }

                      this.render(event, {user: input.user, keys}, content)

                    }

                  }

                  if (res.status !== 200) {
                    this.convert("parent/info", content)
                    content.innerHTML = "Dieser Datensatz ist leer."
                  }

                })




              }

            }

            {

              const button = this.create("button/left-right", content)
              button.left.innerHTML = ".key"
              button.right.innerHTML = "Schlüssel Name ändern"
              button.onclick = () => {

                this.overlay("popup", async keyOverlay => {

                  const info = this.create("header/info", keyOverlay)
                  info.innerHTML = input.user.email
                  info.append(this.convert("text/span", `/${key}`))

                  const content = this.create("div/scrollable", keyOverlay)

                  const textField = this.create("field/text", content)
                  textField.label.innerHTML = "Schlüssel Name"
                  textField.input.style.fontFamily = "monospace"
                  textField.input.style.fontSize = "13px"
                  textField.input.setAttribute("required", "true")
                  textField.input.setAttribute("accept", "text/tag")
                  textField.input.value = key.split(".")[key.split(".").length - 1]
                  this.verify("input/value", textField.input)

                  const submit = this.create("button/action", content)
                  submit.innerHTML = "Name jetzt speichern"
                  submit.onclick = async () => {

                    await this.verify("input/value", textField.input)

                    this.overlay("security", async securityOverlay => {

                      const res = await this.update("key-name/user-tree/admin", {name: textField.input.value, id: input.user.id, tree: key})

                      if (res.status === 200) {
                        window.alert("Datensatz erfolgreich gespeichert.")
                        this.remove("overlay", overlay.previousSibling)
                        this.remove("overlay", overlay)
                        this.remove("overlay", keyOverlay)
                        this.remove("overlay", securityOverlay)
                      }

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", securityOverlay)
                      }

                    })


                  }

                })

              }

            }

            {

              const button = this.create("button/left-right", content)
              button.left.innerHTML = ".delete"
              button.right.innerHTML = "Datensatz entfernen"

              button.onclick = () => {

                const confirm = window.confirm("Du bist gerade dabei einen Datensatz aus der persönlichen Datenbank des Nuzters zu löschen. Diese Daten werden gelöscht und können nicht mehr wiederhergestellt werden.\n\nMöchtest du diesen Datensatz wirklich löschen?")
                if (confirm === true) {

                  this.overlay("security", async securityOverlay => {

                    const res = await this.delete("tree/user/admin", {tree: key, id: input.user.id})

                    if (res.status === 200) {
                      alert("Datensatz erfolgreich gelöscht.")
                      this.remove("element", keysButton)
                      this.remove("overlay", overlay)
                      this.remove("overlay", securityOverlay)
                    } else {
                      alert("Fehler.. Bitte wiederholen.")
                      this.remove("overlay", overlay)
                      this.remove("overlay", securityOverlay)
                    }

                  })

                }

              }

            }


          })
        }

      }



    }

    if (event === "role/role-apps-button-onbody") {

      const button = this.create("button/left-right")
      button.classList.add("role-button")
      button.left.innerHTML = input.name
      button.left.classList.add("left")
      button.right.innerHTML = "Rolle"
      button.right.classList.add("right")
      button.onclick = () => {

        parent.querySelectorAll(".role-button").forEach(button => {

          const right = button.querySelector(".right")
          this.convert("element/button-right", right)
          right.innerHTML = "Rolle"

        })

        this.convert("element/checked", button.right)

        this.create("button/role-apps", document.body)

        this.render("script/role-apps-event", input, document.body)

      }

      if (parent) parent.append(button)
      return button

    }

    if (event === "script/role-apps-event") {

      if (input !== undefined) {

        const text = /*html*/`
        <script id="role-apps-event" type="module">
          import {Helper} from "/js/Helper.js"

          await Helper.add("event/role-apps", {id: ${input.id}, tag: "${input.name}"})
        </script>
        `

        const script = this.convert("text/script", text)

        const create = document.createElement("script")
        create.id = script.id
        create.type = script.type
        create.innerHTML = script.innerHTML

        if (parent !== undefined) {

          if (parent.querySelector(`#${create.id}`) !== null) {
            parent.querySelector(`#${create.id}`).remove()
          }

          if (parent.querySelector(`#${create.id}`) === null) {
            parent.append(create)
          }

        }

        return create
      }

    }

    if (event === "match-maker/buttons") {

      parent.innerHTML = ""
      for (let i = 0; i < input.length; i++) {
        const matchMaker = input[i]

        const button = this.create("button/left-right", parent)
        button.right.innerHTML = matchMaker.id
        button.left.innerHTML = matchMaker.name

        button.onclick = () => {

          this.overlay("toolbox", async overlay => {
            this.add("button/remove-overlay", overlay)
            this.add("button/register-html", overlay)
            const info = this.create("header/info", overlay)
            info.innerHTML = `.match-maker.${matchMaker.name}`

            {
              const button = this.create("button/left-right", overlay)
              button.left.innerHTML = ".action"
              button.right.innerHTML = "Optimiere deinen Match Maker"

              button.onclick = () => {
                this.overlay("toolbox", overlay => {
                  this.add("button/remove-overlay", overlay)
                  this.add("button/register-html", overlay)
                  const info = this.create("header/info", overlay)
                  info.innerHTML = `.${matchMaker.name}.action`

                  const content = this.create("div/scrollable", overlay)
                  const actionField = this.create("field/select", content)
                  actionField.label.innerHTML = "Wenn alle Bedingungen erfüllt sind dann .."
                  actionField.input.add(["get users", "remove", "show", "onclick", "onload", "get list", "get keys"])
                  this.verify("input/value", actionField.input)

                  const dataMirrorField = this.create("field/trees", content)
                  dataMirrorField.label.innerHTML = "Gebe eine JavaScript Liste mit Datenstrukturen ein und spiegel deine Nutzerliste mit den angefragten Daten"
                  dataMirrorField.input.style.fontSize = "13px"
                  dataMirrorField.input.placeholder = `["getyour.expert.name", "getyour.funnel.name"]`
                  dataMirrorField.input.oninput = () => this.verify("input/value", dataMirrorField.input)
                  this.verify("input/value", dataMirrorField.input)

                  const jsField = this.create("field/js")
                  jsField.label.innerHTML = "JavaScript Browser Funktionen + Plattform Helper Funktionen (javascript)"
                  jsField.input.oninput = () => this.verify("input/value", jsField.input)

                  const treeField = this.create("field/tree")
                  treeField.input.placeholder = "getyour.expert.platforms"
                  treeField.label.innerHTML = "Welche Liste möchtest du anzeigen lassen (text/tree)"
                  treeField.input.oninput = () => this.verify("input/value", treeField.input)


                  actionField.input.oninput = (event) => {
                    const selected = this.convert("select/selected", event.target)

                    dataMirrorField.remove()
                    jsField.remove()
                    treeField.remove()


                    if (selected === "get users") {
                      actionField.after(dataMirrorField)
                      this.verify("input/value", dataMirrorField.input)
                    }

                    if (selected === "onclick") {
                      actionField.after(jsField)
                      this.verify("input/value", jsField.input)
                    }

                    if (selected === "onload") {
                      actionField.after(jsField)
                      this.verify("input/value", jsField.input)
                    }

                    if (selected === "get keys") {
                      actionField.after(dataMirrorField)
                      this.verify("input/value", dataMirrorField.input)
                    }

                    if (selected === "get list") {
                      actionField.after(treeField)
                      this.verify("input/value", treeField.input)
                    }
                  }


                  const submit = this.create("button/action", content)
                  submit.innerHTML = "Match Maker jetzt anhängen"
                  submit.onclick = async () => {

                    const selected = this.convert("select/selected", actionField.input)

                    if (selected === "onload") {

                      await this.verify("input/value", jsField.input)

                      const map = {}
                      map.name = matchMaker.name
                      map.conditions = conditions
                      map.js = jsField.input.value

                      const onloadScript = this.create("script/match-maker-onload", map)

                      await this.render("script/onbody", onloadScript)

                    }

                    if (selected === "onclick") {

                      await this.verify("input/value", jsField.input)

                      const map = {}
                      map.name = matchMaker.name
                      map.conditions = conditions
                      map.js = jsField.input.value

                      const onclickScript = this.create("script/match-maker-onclick", map)

                      await this.render("script/onbody", onclickScript)

                    }


                    if (selected === "show") {

                      const map = {}
                      map.name = matchMaker.name
                      map.conditions = conditions

                      const showScript = this.create("script/match-maker-show", map)

                      await this.render("script/onbody", showScript)

                    }

                    if (selected === "remove") {

                      const map = {}
                      map.name = matchMaker.name
                      map.conditions = conditions

                      const removeScript = this.create("script/match-maker-remove", map)

                      await this.render("script/onbody", removeScript)

                    }

                    if (selected === "get list") {

                      await this.verify("input/value", treeField.input)

                      const map = {}
                      map.name = matchMaker.name
                      map.conditions = conditions
                      map.tree = treeField.input.value

                      const getterScript = this.create("script/match-maker-get-list", map)

                      await this.render("script/onbody", getterScript)

                    }

                    if (selected === "get keys") {

                      await this.verify("input/value", dataMirrorField.input)

                      const map = {}
                      map.name = matchMaker.name
                      map.conditions = conditions

                      try {
                        map.mirror = JSON.parse(dataMirrorField.input.value)
                        if (map.mirror.length === 0) throw new Error("mirror is empty")
                      } catch (error) {
                        this.setNotValidStyle(dataMirrorField.input)
                        throw error
                      }

                      const getterScript = this.create("script/match-maker-get-keys", map)

                      await this.render("script/onbody", getterScript)

                    }

                    if (selected === "get users") {

                      await this.verify("input/value", dataMirrorField.input)

                      const map = {}
                      map.name = matchMaker.name
                      map.conditions = conditions

                      try {
                        map.mirror = JSON.parse(dataMirrorField.input.value)
                        if (map.mirror.length === 0) throw new Error("mirror is empty")
                      } catch (error) {
                        this.setNotValidStyle(dataMirrorField.input)
                        throw error
                      }

                      const getterScript = this.create("script/match-maker-get-users", map)

                      await this.render("script/onbody", getterScript)

                    }

                    window.alert("Skript wurde erfolgreich angehängt.")

                  }

                })
              }


            }

            const conditionsContainer = this.create("info/loading", overlay)

            const res = await this.get("conditions/match-maker/closed", matchMaker.id)

            let conditions
            if (res.status === 200) {
              conditions = JSON.parse(res.response)

              this.convert("element/reset", conditionsContainer)
              this.render("text/hr", `Bedingungen von ${matchMaker.name}`, conditionsContainer)
              for (let i = 0; i < conditions.length; i++) {
                const condition = conditions[i]
                this.render("text/code", `(${condition.left} ${condition.operator} ${condition.right})`, conditionsContainer)
              }

            }

            if (res.status !== 200) {
              const res = await this.get("conditions/match-maker/writable-closed", matchMaker.id)

              if (res.status === 200) {
                conditions = JSON.parse(res.response)

                this.convert("element/reset", conditionsContainer)
                this.render("text/hr", `Bedingungen von ${matchMaker.name}`, conditionsContainer)
                for (let i = 0; i < conditions.length; i++) {
                  const condition = conditions[i]
                  this.render("text/code", `(${condition.left} ${condition.operator} ${condition.right})`, conditionsContainer)
                }

              }

              if (res.status !== 200) {
                this.convert("parent/info", conditionsContainer)
                conditionsContainer.innerHTML = "Keine Bedingungen definiert."
                throw new Error("conditions not found")
              }
            }




          })

        }


      }

    }

    if (event === "value/input") {

      if (parent.tagName === "INPUT") {

        if (parent.type === "text") {
          parent.value = input
        }

        if (parent.type === "email") {
          parent.value = input
        }

        if (parent.type === "tel") {
          parent.value = input
        }

        if (parent.type === "range") {
          parent.value = input
        }

        if (parent.type === "password") {
          parent.value = input
        }

        if (parent.type === "number") {
          parent.value = input
        }

        if (parent.type === "date") {
          parent.value = input
        }

        if (parent.type === "checkbox") {
          parent.checked = input
        }

      }

      if (parent.tagName === "TEXTAREA") {
        parent.value = input
      }

      if (parent.tagName === "SELECT") {
        for (let i = 0; i < input.length; i++) {
          const text = input[i]

          for (let i = 0; i < parent.options.length; i++) {
            const option = parent.options[i]

            if (option.value === text) option.selected = true
          }

        }
      }

    }

    if (event === "user/selector/all") {

      const node = document.querySelector(parent)

      if (node) {

        let list = document.querySelector(`.${node.className}-list`)
        if (!list) {
          list = this.create("div", document.body)
          list.className = `${node.className}-list`
        }
        list.style.paddingBottom = "144px"

        const clone = node.cloneNode(true)
        node.style.display = "none"

        Object.entries(input).forEach(([key, value]) => {
          if (this.verifyIs("array", value)) {
            for (let i = 0; i < value.length; i++) {
              const item = value[i]
              if (item.created) clone.id = item.created

              this.render("item/node/all", item, clone)

              const itemNode = clone.cloneNode(true)
              list.append(itemNode)

            }
          }
        })


        for (let i = 0; i < list.children.length; i++) {
          const item = list.children[i]

          const singlePrice = item.querySelector("span.single-price")
          const totalAmount = item.querySelector("span.total-amount")
          const quantityInput = item.querySelector("input.quantity")
          if (singlePrice && totalAmount && quantityInput) {
            quantityInput.value = 1
            totalAmount.innerHTML = `${Number(singlePrice.innerHTML) * Number(quantityInput.value)}`

            quantityInput.oninput = () => {
              totalAmount.innerHTML = `${Number(singlePrice.innerHTML) * Number(quantityInput.value)}`

              if (this.verifyIs("text/+int", quantityInput.value)) {
                this.setValidStyle(quantityInput)
              } else {
                this.setNotValidStyle(quantityInput)
              }

            }
          }



          for (let i = 0; i < item.querySelectorAll("*").length; i++) {
            const child = item.querySelectorAll("*")[i]

            if (child.tagName === "INPUT") {
              this.add("outline-hover/node", child)
            }

            if (child.hasAttribute("popup-details")) {

              this.add("outline-hover/node", child)
              Object.entries(input).forEach(([key, value]) => {
                if (this.verifyIs("array", value)) {
                  for (let i = 0; i < value.length; i++) {
                    const locationListItem = value[i]
                    if (item.id === `${locationListItem.created}`) {
                      if (locationListItem["pdf-product"] !== undefined) {
                        child.onclick = () => window.open(locationListItem["pdf-product"], "_blank")
                      } else {
                        this.render("object/node/popup-details", locationListItem, child)
                      }
                    }
                  }
                }
              })

            }

            if (child.hasAttribute("open-cart")) {

              this.add("outline-hover/node", child)
              child.onclick = () => {

                const quantityInput = item.querySelector("input.quantity")
                if (this.verifyIs("text/+int", quantityInput.value)) {

                  const cart = JSON.parse(window.localStorage.getItem("cart")) || []

                  let found = false
                  for (let i = 0; i < cart.length; i++) {
                    const cartItem = cart[i]

                    if (item.id === `${cartItem.id}`) {
                      cartItem.quantity = Number(cartItem.quantity) + Number(quantityInput.value)
                      window.localStorage.setItem("cart", JSON.stringify(cart))
                      found = true
                    }

                  }

                  if (found === false) {
                    const map = {}
                    map.id = item.id
                    map.quantity = Number(quantityInput.value)
                    map.titel = item.querySelector(".titel").textContent
                    map.image = item.querySelector(".image").src
                    map.price = item.querySelector(".price").textContent
                    cart.unshift(map)
                  }
                  window.localStorage.setItem("cart", JSON.stringify(cart))

                  this.overlay("popup", overlay => {
                    this.render("text/h1", "Mein Angebot", overlay)
                    this.render("text/right-hr", "Preis", overlay)
                    const cart = JSON.parse(window.localStorage.getItem("cart")) || []
                    this.render("cart/node/open", cart, overlay)
                  })

                } else {
                  this.setNotValidStyle(quantityInput)
                }

              }
            }

          }

        }

      }
    }

    if (event === "mirror/match-maker-get-keys") {

      return new Promise(async(resolve, reject) => {

        try {

          document.querySelectorAll(`[match-maker="${parent}"]`).forEach(matchMaker => {

            Object.entries(input).forEach(([key, value]) => {
              matchMaker.querySelectorAll(`.${key}`).forEach(element => {

                if (element.classList.contains(key)) {
                  element.innerHTML = value
                }

              })

            })

          })

          resolve()

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "mirror/match-maker-get-list") {

      return new Promise(async(resolve, reject) => {

        try {

          const map = {}
          map.list = input
          map.name = parent
          const mirror = await this.create("div/match-maker-list", map)

          // add events to the mirror
          for (let i = 0; i < mirror.children.length; i++) {
            const child = mirror.children[i]

            // default events
            const quantityInput = child.querySelector("input.quantity")
            this.add("oninput/verify-positive-integer", quantityInput)

            // search and find events
            child.querySelectorAll("*").forEach(element => {

              if (element.hasAttribute("write-details")) {

                const funnel = input.filter(it => `${it.id}` === child.id)[0].funnel

                this.render("object/node/write-details", funnel, element)

              }

              if (element.hasAttribute("popup-details")) {

                const design = document.querySelector(`[popup-details-design="${parent}"]`)
                if (design !== null) design.style.display = "none"

                element.style.cursor = "pointer"
                element.onclick = () => {

                  const funnel = input.filter(it => `${it.id}` === child.id)[0].funnel

                  if (design === null) {

                    this.overlay("toolbox", overlay => {

                      this.add("button/remove-overlay", overlay)

                      this.render("text/title", "Detailansicht", overlay)

                      const content = this.create("div/scrollable", overlay)
                      content.style.display = "grid"
                      content.style.gridTemplateColumns = "repeat(auto-fit, minmax(300px, 1fr))"
                      content.style.gap = "21px"
                      content.style.margin = "21px 34px"

                      Object.entries(funnel).forEach(([key, value]) => {

                        const keyValuePair = document.createElement("div")
                        keyValuePair.classList.add("key-value-pair")

                        keyValuePair.style.backgroundColor = this.colors.gray[0]
                        keyValuePair.style.border = this.colors.light.border
                        keyValuePair.style.color = this.colors.light.text
                        keyValuePair.style.boxShadow = this.colors.light.boxShadow
                        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                          keyValuePair.style.backgroundColor = this.colors.matte.black
                          keyValuePair.style.border = this.colors.dark.border
                          keyValuePair.style.boxShadow = this.colors.dark.boxShadow
                          keyValuePair.style.color = this.colors.dark.text
                        }
                        keyValuePair.style.display = "flex"
                        keyValuePair.style.flexDirection = "column"
                        keyValuePair.style.padding = "1rem"
                        keyValuePair.style.borderRadius = "5px"
                        content.append(keyValuePair)

                        const keyDiv = document.createElement("key")
                        keyDiv.classList.add("key")
                        keyDiv.style.fontWeight = "bold"
                        keyDiv.style.marginBottom = "0.5rem"
                        keyDiv.innerHTML = key
                        keyDiv.style.color = this.colors.key
                        keyValuePair.append(keyDiv)

                        const valueDiv = document.createElement("div")
                        valueDiv.innerHTML = value
                        valueDiv.classList.add("value")
                        valueDiv.style.color = this.colors.value
                        keyValuePair.append(valueDiv)


                      })


                    })

                  }

                  if (design !== null) {

                    this.overlay("popup", overlay => {

                      this.add("button/remove-overlay", overlay)

                      const content = this.create("div/scrollable", overlay)

                      const clone = design.cloneNode(true)

                      clone.style.display = null

                      content.append(clone)

                      Object.entries(funnel).forEach(([key, value]) => {
                        content.querySelectorAll(`.${key}`).forEach(element => {

                          if (element.tagName === "IMG") {
                            element.src = value
                          } else {
                            element.innerHTML = value
                          }

                        })

                      })


                    })

                  }

                }

              }

              if (element.hasAttribute("add-to-cart")) {

                element.style.cursor = "pointer"
                element.onclick = () => {

                  const quantityInput = child.querySelector("input.quantity")

                  const quantity = quantityInput.value

                  if (this.verifyIs("text/+int", quantity)) {

                    this.setValidStyle(quantityInput)

                    this.overlay("security", async securityOverlay => {

                      const item = {}
                      item.id = child.id
                      item.quantity = quantity
                      const res = await this.register("item/location-cart/self", item)

                      if (res.status === 200) {
                        window.alert("Artikel erfolgreich gespeichert.")
                        this.remove("overlay", securityOverlay)
                      }

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", securityOverlay)
                      }

                    })


                  } else {
                    this.setNotValidStyle(quantityInput)
                  }


                }

              }

            })
          }

          resolve(mirror)

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "mirror/match-maker-get-users") {

      return new Promise(async(resolve, reject) => {

        try {

          const sortedUsers = input
          sortedUsers.sort((a, b) => {
            return b.reputation - a.reputation // Descending order, for ascending use: a.reputation - b.reputation
          })

          const userList = this.create("div/scrollable")
          userList.setAttribute("id", `user-list-${parent}`)

          document.querySelectorAll(`[match-maker="${parent}"]`).forEach(matchMaker => {

            for (let i = 0; i < sortedUsers.length; i++) {
              const user = sortedUsers[i]

              const clone = document.createElement("div")
              clone.innerHTML = matchMaker.innerHTML
              clone.setAttribute("id", `user-${i + 1}`)
              clone.style.marginBottom = "34px"

              for (let i = 0; i < user.treeValues.length; i++) {
                const treeValuePair = user.treeValues[i]

                const className = treeValuePair.tree.replace(/\./g, "-")

                for (let i = 0; i < clone.children.length; i++) {
                  const child = clone.children[i]
                  if (child.classList.contains(className)) {
                    child.innerHTML = treeValuePair.value
                  }
                }

              }

              userList.append(clone)

            }

            const userLists = document.querySelectorAll(`#user-list-${parent}`)

            if (userLists.length === 0) {
              matchMaker.before(userList)
              matchMaker.style.display = "none"
            }

            userLists.forEach(list => {
              this.convert("parent/scrollable", list)
              list.innerHTML = userList.innerHTML
              matchMaker.style.display = "none"
            })


          })

          resolve(userList)

        } catch (error) {
          reject(error)
        }

      })





    }

    if (event === "object/node/svg") {
      const object = document.createElement("object")
      object.type = "image/svg+xml"
      object.data = input
      parent?.appendChild(object)
      return object
    }

    if (event === "id-map/field-funnel") {

      return new Promise(async(resolve, reject) => {

        try {

          Object.entries(input).forEach(([key, value]) => {
            parent.querySelectorAll(`#${key}`).forEach(async field => {

              const input = field.querySelector(".field-input")

              this.render("value/input", value, input)

            })

          })

          this.verifyIs("field-funnel/valid", parent)

          resolve()

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "tree-map/field-funnel") {

      return new Promise(async(resolve, reject) => {

        try {

          Object.entries(input).forEach(([key, value]) => {
            const fieldId = key.split(".")[2]
            parent.querySelectorAll(`#${fieldId}`).forEach(async field => {

              const input = field.querySelector(".field-input")

              this.render("value/input", value, input)

            })

          })

          this.verifyIs("field-funnel/valid", parent)

          resolve()

        } catch (error) {
          reject(error)
        }

      })

    }

    if (event === "map/div") {

      return new Promise(async(resolve, reject) => {

        const div = this.create("div", parent)
        div.classList.add("json")
        div.style.margin = "21px 34px"

        const buttons = document.createElement("div")
        buttons.classList.add("buttons")
        buttons.style.display = "flex"
        buttons.style.justifyContent = "space-between"
        buttons.style.alignItems = "center"
        div.append(buttons)

        const foldAllButton = this.create("div/action", buttons)
        foldAllButton.innerHTML = "fold"

        foldAllButton.addEventListener("click", function() {
          toggleAllValues("none");
        });

        const unfoldAllButton = this.create("div/action", buttons)
        unfoldAllButton.innerHTML = "unfold"
        unfoldAllButton.addEventListener("click", function() {
          toggleAllValues("block");
        });

        function toggleAllValues(displayValue) {
          const valueElements = div.querySelectorAll(".key-value");
          valueElements.forEach(element => {
            element.style.display = displayValue;
          });
        }

        function toggleValue(event) {
          const element = event.target.nextSibling
          if (element !== null) {
            element.style.display = element.style.display === "none" ? "block" : "none";
          }
        }

        function processObject(container, obj) {
          for (const key in obj) {
            const value = obj[key];

            const keyElement = Helper.convert("key/div", key)
            const valueElement = Helper.convert("value/div", value)


            if (Helper.verifyIs("string", value)) {
              valueElement.setAttribute("value-type", "string")
            }


            if (Helper.verifyIs("boolean", value)) {
              valueElement.setAttribute("value-type", "boolean")
            }

            const keyName = document.createElement("div")
            keyName.classList.add("key-name")
            keyName.textContent = key

            keyElement.appendChild(keyName)
            container.appendChild(keyElement);
            keyElement.appendChild(valueElement);

            keyElement.addEventListener("click", toggleValue);

            if (typeof value === "object") {
              processObject(valueElement, value);
              valueElement.addEventListener("click", toggleValue);

            } else {
              valueElement.textContent = JSON.stringify(value);
            }
          }
        }


        try {

          processObject(div, input);

          return resolve(div)
        } catch (error) {
          await this.add("ms/timeout", 3000)
          await this.render(event, input, parent)
        }

      })


    }

    if (event === "script/role-login") {

      const text = /*html*/`
        <script id="role-login-event" type="module">
import {Helper} from "/js/Helper.js"

Helper.add("event/role-login", ${JSON.stringify(input)})
        </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      if (parent !== undefined) {

        parent.querySelectorAll(`#${create.id}`).forEach(element => element.remove())
        parent.append(create)

      }

      return create

    }

    if (event === "script/onbody") {

      return new Promise(async resolve => {

        if (document.body) {
          document.querySelectorAll(`#${input.id}`).forEach(script => script.remove())
          if (document.getElementById(`#${input.id}`) === null) {
            document.body.append(input)
            return resolve(input)
          }
        } else {
          await this.add("ms/timeout", 3000)
          await this.add("script/onbody", input)
        }


      })

    }

    if (event === "checklist/items") {
      const checklist = this.create("div/scrollable", parent)
      checklist.id = "checklist"

      for (let i = 0; i < input.length; i++) {
        const item = input[i]

        item.index = i + 1
        this.render("checklist/item", item, checklist)

      }


      return checklist
    }

    if (event === "checklist/item") {

      const item = document.createElement("div")
      item.classList.add("item")
      item.style.margin = "34px"

      item.header = document.createElement("div")
      item.header.classList.add("header")
      item.header.style.display = "flex"
      item.header.style.borderTopRightRadius = "21px"
      item.header.style.borderTopLeftRadius = "21px"
      item.header.style.borderBottomLeftRadius = "21px"
      item.header.style.backgroundColor = "#d1d0d0"
      item.append(item.header)

      item.header.state = document.createElement("div")
      item.header.state.classList.add("state")
      item.header.state.style.display = "flex"
      item.header.state.style.justifyContent = "center"
      item.header.state.style.alignItems = "center"
      item.header.state.style.width = "89px"
      item.header.state.style.height = "89px"
      item.header.state.style.backgroundColor = "#c6c6c6"
      item.header.state.style.fontSize = "34px"
      item.header.state.style.borderTopLeftRadius = "21px"
      item.header.state.style.borderBottomLeftRadius = "21px"
      item.header.append(item.header.state)

      item.header.state.index = document.createElement("div")
      item.header.state.index.classList.add("index")
      item.header.state.index.innerHTML = input.index
      item.header.state.append(item.header.state.index)

      item.header.text = document.createElement("div")
      item.header.text.classList.add("title")
      item.header.text.style.alignSelf = "center"
      item.header.text.style.marginLeft = "13px"
      item.header.text.innerHTML = input.title
      item.header.text.style.fontSize = "21px"
      item.header.append(item.header.text)

      item.body = document.createElement("div")
      item.body.classList.add("body")
      item.body.style.marginLeft = "8%"
      item.body.style.backgroundColor = "#dbdbdb"
      item.body.style.borderBottomRightRadius = "21px"
      item.body.style.borderBottomLeftRadius = "21px"
      item.body.style.padding = "21px"
      item.body.style.display = "flex"
      item.body.style.flexDirection = "column"
      item.body.style.boxShadow = "0 3px 5px rgba(0, 0, 0, 0.13)"
      item.append(item.body)

      item.body.text = document.createElement("div")
      item.body.text.classList.add("description")
      item.body.text.innerHTML = input.description
      item.body.text.style.marginBottom = "34px"
      item.body.append(item.body.text)

      item.body.button = document.createElement("div")
      item.body.button.classList.add("button")
      item.body.button.innerHTML = "Zur Übersicht"
      item.body.button.style.borderRadius = "13px"
      item.body.button.style.width = "233px"
      item.body.button.style.height = "55px"
      item.body.button.style.display = "flex"
      item.body.button.style.justifyContent = "center"
      item.body.button.style.alignItems = "center"
      item.body.button.style.alignSelf = "flex-end"
      item.body.button.style.backgroundColor = "#f7aa20"
      item.body.button.style.fontSize = "21px"
      item.body.button.style.margin = "8px"
      item.body.button.style.cursor = "pointer"
      item.body.append(item.body.button)

      parent?.append(item)
      return item
    }

    if (event === "scripts/update-buttons") {

      parent.innerHTML = ""
      for (let i = 0; i < input.length; i++) {
        const script = input[i]

        const scriptButton = this.create("button/left-right", parent)
        scriptButton.right.innerHTML = script.name
        scriptButton.left.innerHTML = `Skript ${input.length - i}`

        scriptButton.addEventListener("click", () => {
          this.overlay("toolbox", overlay => {
            this.add("button/remove-overlay", overlay)
            const info = this.create("header/info", overlay)
            info.innerHTML = `.${script.name}`

            const content = this.create("div/scrollable", overlay)

            {

              const button = this.create("button/left-right", content)
              button.left.innerHTML = ".update"
              button.right.innerHTML = "Skript bearbeiten"
              button.onclick = () => {
                this.overlay("toolbox", overlay => {
                  this.add("button/remove-overlay", overlay)

                  const info = this.create("header/info", overlay)
                  info.innerHTML = `.${script.name}.update`

                  const funnel = this.create("div/scrollable", overlay)

                  const nameField = this.create("field/name", funnel)
                  nameField.input.placeholder = "mein-skript"
                  nameField.input.value = script.name
                  this.verify("input/value", nameField.input)
                  nameField.input.addEventListener("input", () => this.verify("input/value", nameField.input))

                  const scriptField = this.create("field/script", funnel)
                  scriptField.input.style.height = "100vh"
                  scriptField.input.value = script.script
                  this.verify("input/value", scriptField.input)
                  scriptField.input.addEventListener("input", () => this.verify("input/value", scriptField.input))

                  const button = this.create("button/action", funnel)
                  button.innerHTML = "Skript jetzt speichern"
                  button.addEventListener("click", async () => {

                    await this.verify("field-funnel", funnel)

                    const map = {}
                    map.id = script.id
                    map.script = scriptField.input.value
                    map.name = nameField.input.value

                    this.overlay("security", async securityOverlay => {

                      const res = await this.update("script/closed", map)

                      if (res.status === 200) {

                        window.alert("Skript erfolgreich gespeichert.")

                        this.convert("parent/loading", parent)
                        await this.add("scripts/update-buttons", parent)

                        this.remove("overlay", securityOverlay)
                        this.remove("overlay", overlay.previousSibling)
                        this.remove("overlay", overlay)

                      }

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", securityOverlay)
                      }

                    })

                  })


                })
              }

            }

            {

              const button = this.create("button/left-right", content)
              button.left.innerHTML = ".delete"
              button.right.innerHTML = "Skript entfernen"
              button.addEventListener("click", () => {

                this.overlay("security", async securityOverlay => {

                  const res = await this.delete("script/closed", script.id)

                  if (res.status === 200) {
                    window.alert("Skript erfolgreich entfernt.")
                    this.remove("element", scriptButton)
                    this.remove("overlay", securityOverlay)
                    this.remove("overlay", overlay)
                  }

                  if (res.status !== 200) {
                    window.alert("Fehler.. Bitte wiederholen.")
                    this.remove("overlay", securityOverlay)
                  }


                })


              })

            }


          })
        })

      }

    }

    if (event === "scripts/toolbox") {
      for (let i = 0; i < input.length; i++) {
        const script = input[i]

        const item = document.createElement("div")
        item.style.margin = "34px"

        const itemHeader = document.createElement("div")
        itemHeader.style.display = "flex"
        itemHeader.style.borderTopRightRadius = "21px"
        itemHeader.style.borderTopLeftRadius = "21px"
        itemHeader.style.borderBottomLeftRadius = "21px"
        itemHeader.style.fontFamily = "sans-serif"

        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          itemHeader.style.backgroundColor = this.colors.matte.charcoal
          itemHeader.style.color = this.colors.dark.text

        } else {
          itemHeader.style.color = this.colors.light.text
          itemHeader.style.backgroundColor = this.colors.gray[1]
        }

        const itemState = document.createElement("div")
        itemState.classList.add("item-state")
        itemState.style.display = "flex"
        itemState.style.justifyContent = "center"
        itemState.style.alignItems = "center"
        itemState.style.width = "89px"
        itemState.style.height = "89px"
        itemState.style.fontSize = "34px"

        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          itemState.style.backgroundColor = this.colors.dark.foreground
        } else {
          itemState.style.backgroundColor = this.colors.light.foreground
        }

        if (document.getElementById(script.name) !== null) {
          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            itemState.style.backgroundColor = this.colors.dark.success
          } else {
            itemState.style.backgroundColor = this.colors.light.success
          }
        }

        itemState.style.borderTopLeftRadius = "21px"
        itemState.style.borderBottomLeftRadius = "21px"

        const itemTitle = document.createElement("div")
        itemTitle.style.alignSelf = "center"
        itemTitle.style.marginLeft = "13px"

        {
          const name = document.createElement("div")
          name.innerHTML = script.name
          name.style.fontSize = "21px"
          itemTitle.append(name)
        }

        itemHeader.append(itemState, itemTitle)
        item.append(itemHeader)


        const itemBody = document.createElement("div")
        itemBody.classList.add("item-body")
        itemBody.style.marginLeft = "8%"


        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          itemBody.style.backgroundColor = this.colors.matte.slate
          itemBody.style.boxShadow = `0 1px ${this.colors.gray[4]}`
        } else {
          itemBody.style.boxShadow = `0 1px ${this.colors.gray[2]}`
          itemBody.style.backgroundColor = this.colors.gray[0]
        }

        itemBody.style.borderBottomRightRadius = "21px"
        itemBody.style.borderBottomLeftRadius = "21px"
        itemBody.style.padding = "21px"
        itemBody.style.display = "flex"
        itemBody.style.flexDirection = "column"

        const buttons = document.createElement("div")
        buttons.style.display = "flex"
        buttons.style.alignItems = "center"
        buttons.style.justifyContent = "space-around"


        {
          const button = this.create("div", buttons)
          this.render("icon/node/path", "/public/arrow-repeat-1.svg", button)
          button.style.width = "55px"
          button.style.cursor = "pointer"
          button.addEventListener("click", async () => {

            await this.add("script/always", script)

            const removalScript = document.createElement("script")
            removalScript.id = "script-to-remove"
            removalScript.textContent = `
              document.getElementById("${script.name}").remove();
              document.getElementById("${removalScript.id}").remove();
            `
            document.body.appendChild(removalScript)
            itemState.style.backgroundColor = this.colors.matte.black


          })
        }

        {
          const button = this.create("div", buttons)
          this.render("icon/node/path", "/public/arrow-repeat.svg", button)
          button.style.width = "55px"
          button.style.cursor = "pointer"
          button.addEventListener("click", async () => {


            if (document.getElementById(script.name) === null) {
              await this.add("script/always", script)
            } else {
              window.alert("Skript existiert bereits.")
            }

            if (document.getElementById(script.name) !== null) {
              if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                itemState.style.backgroundColor = this.colors.dark.success
              } else {
                itemState.style.backgroundColor = this.colors.light.success
              }
            }

          })
        }

        {
          const button = this.create("button/branch", buttons)
          button.counter.innerHTML = script.feedbackLength
          button.onclick = () => {

            this.overlay("toolbox", async overlay => {
              const feedbackOverlay = overlay

              this.add("button/remove-overlay", overlay)

              const info = this.create("header/info", overlay)

              info.append(this.convert("element/alias", document.body))
              info.append(this.convert("text/span", `.${script.name}.feedback`))

              const content = this.create("div/scrollable", overlay)

              const feedbackContainer = this.create("info/loading", content)
              feedbackContainer.info.remove()

              feedbackContainer.style.margin = "21px 34px"
              feedbackContainer.style.overflowY = "auto"
              feedbackContainer.style.overscrollBehavior = "none"
              feedbackContainer.style.fontFamily = "monospace"
              feedbackContainer.style.fontSize = "13px"
              feedbackContainer.style.height = `${window.innerHeight * 0.4}px`


              if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                feedbackContainer.style.color = this.colors.dark.text
              } else {
                feedbackContainer.style.color = this.colors.light.text
              }

              const res = await this.get("feedback/script/location", script.id)

              if (res.status !== 200) {
                feedbackContainer.innerHTML = `<span style="margin: 21px 34px;">Kein Feedback gefunden.</span>`
              }

              getFeedbackSuccess: if (res.status === 200) {
                const feedback = JSON.parse(res.response)

                console.log(feedback);

                if (feedback.length === 0) {
                  feedbackContainer.innerHTML = `<span style="margin: 21px 34px;">Kein Feedback gefunden.</span>`
                  break getFeedbackSuccess
                }

                this.convert("element/reset", feedbackContainer)
                feedbackContainer.style.margin = "21px 34px"
                feedbackContainer.style.overflowY = "auto"
                feedbackContainer.style.overscrollBehavior = "none"
                feedbackContainer.style.fontFamily = "monospace"
                feedbackContainer.style.fontSize = "13px"
                feedbackContainer.style.height = `${window.innerHeight * 0.4}px`

                if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                  feedbackContainer.style.color = this.colors.dark.text
                } else {
                  feedbackContainer.style.color = this.colors.light.text
                }


                for (let i = 0; i < feedback.length; i++) {
                  const value = feedback[i]

                  const div = document.createElement("div")
                  div.style.display = "flex"
                  div.style.justifyContent = "space-between"
                  div.style.alignItems = "center"

                  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {

                    if (i % 2 === 0) {
                      div.style.background = this.colors.light.foreground
                      div.style.color = this.colors.light.text
                    } else {
                      div.style.background = this.colors.dark.foreground
                      div.style.color = this.colors.dark.text
                    }

                  } else {

                    if (i % 2 === 1) {
                      div.style.background = this.colors.light.foreground
                      div.style.color = this.colors.light.text
                    } else {
                      div.style.background = this.colors.dark.foreground
                      div.style.color = this.colors.dark.text
                    }

                  }

                  const left = document.createElement("span")
                  left.innerHTML = `${this.convert("millis/dd.mm.yyyy hh:mm", value.id)}`
                  div.append(left)

                  const nextToLeft = document.createElement("span")
                  nextToLeft.style.width = "100%"
                  nextToLeft.style.margin = "0 13px"
                  nextToLeft.innerHTML = value.content
                  div.append(nextToLeft)

                  const right = document.createElement("span")
                  right.style.padding = "13px"
                  right.innerHTML = value.importance
                  div.append(right)

                  feedbackContainer.append(div)

                  div.style.cursor = "pointer"
                  div.addEventListener("click", () => {

                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)

                      const button = this.create("button/left-right", overlay)
                      this.render("icon/node/path", "/public/bucket.svg", button.left).then(icon => {
                        icon.style.width = "34px"
                      })
                      button.right.innerHTML = "Feedback löschen"

                      button.addEventListener("click", async () => {
                        const confirm = window.confirm("Möchtest du diesen Beitrag wirklich löschen?")

                        if (confirm === true) {
                          const del = {}
                          del.url = "/delete/feedback/location/"
                          del.type = "script"
                          del.scriptId = script.id
                          del.feedbackId = value.id
                          const res = await this.request("location/json", del)

                          if (res.status === 200) {
                            button.counter.innerHTML = parseInt(button.counter.innerHTML) - 1
                            this.remove("overlay", overlay)
                            this.remove("overlay", feedbackOverlay)
                          } else {
                            window.alert("Fehler.. Bitte wiederholen.")
                            this.remove("overlay", overlay)
                          }


                        }

                      })
                    })

                  })
                }


              }

              const contentField = this.create("field/textarea", content)
              contentField.label.innerHTML = "Feedback"
              contentField.input.setAttribute("required", "true")
              contentField.input.maxLength = "377"
              contentField.input.style.fontSize = "13px"
              contentField.input.placeholder = "Schreibe ein Feedback an unsere Web-Entwickler"

              this.verify("input/value", contentField.input)
              contentField.input.addEventListener("input", () => this.verify("input/value", contentField.input))


              const importanceField = this.create("field/range", content)
              importanceField.input.min = "0"
              importanceField.input.max = "13"
              importanceField.input.step = "1"
              importanceField.input.value = "0"
              importanceField.label.innerHTML = `Wichtigkeit - ${importanceField.input.value}`

              this.verify("input/value", importanceField.input)

              importanceField.input.addEventListener("input", (event) => {
                this.verify("input/value", importanceField.input)
                importanceField.label.innerHTML = `Wichtigkeit - ${event.target.value}`
              })

              const submit = this.create("button/action", content)
              submit.innerHTML = "Feedback jetzt speichern"
              submit.addEventListener("click", async () => {

                await this.verify("input/value", contentField.input)

                this.overlay("security", async securityOverlay => {

                  const register = {}
                  register.id = script.id
                  register.importance = importanceField.input.value
                  register.content = contentField.input.value
                  const res = await this.register("feedback/script/location", register)

                  if (res.status === 200) {
                    window.alert("Vielen Dank für dein Feedback.\n\nDein Feedback ist vollkommen anonym, dynamisch und hilft dabei dieses Skript, noch besser für dich, zu optimieren.")
                    this.remove("overlay", securityOverlay)
                    this.remove("overlay", overlay)
                    button.counter.innerHTML = parseInt(button.counter.innerHTML) + 1
                  } else {
                    window.alert("Fehler.. Bitte wiederholen.")
                    this.remove("overlay", securityOverlay)
                  }

                })

              })



            })

          }
        }


        itemBody.append(buttons)
        item.append(itemBody)
        parent.append(item)
      }


    }

    if (event === "value/button") {

      const button = this.create("button/top-bottom", parent)
      button.bottom.innerHTML = input.alias
      button.bottom.classList.add("value")
      button.bottom.style.margin = "21px 34px"
      button.bottom.style.textAlign = "center"
      button.bottom.style.fontSize = "13px"
      button.bottom.style.fontFamily = "sans-serif"

      if (input.image !== undefined) {
        button.top.classList.add("image")

        if (input.image.svg !== undefined) {
          const svg = this.convert("text/svg", input.image.svg)
          svg.setAttribute("width", "100%")
          button.top.append(svg)
        }

        if (input.image.dataUrl !== undefined) {
          const img = document.createElement("img")
          img.src = input.image.dataUrl
          img.alt = input.image.name
          img.style.width = "100%"
          button.top.append(img)
        }

        if (input.image.url !== undefined) {
          const img = document.createElement("img")
          img.src = input.image.url
          img.style.width = "100%"
          button.top.append(img)
        }




      }

      return button
    }

    if (event === "platform/button") {

      const button = this.create("button/top-bottom", parent)
      button.bottom.classList.add("platform")
      button.bottom.innerHTML = input.name
      button.bottom.style.margin = "21px 34px"
      button.bottom.style.textAlign = "center"
      button.bottom.style.fontSize = "13px"
      button.bottom.style.fontFamily = "sans-serif"

      if (input.image !== undefined) {
        button.top.classList.add("image")

        if (input.image.svg !== undefined) {
          const svg = this.convert("text/svg", input.image.svg)
          svg.setAttribute("width", "100%")
          button.top.append(svg)
        }

        if (input.image.dataUrl !== undefined) {
          const img = document.createElement("img")
          img.src = input.image.dataUrl
          img.alt = input.image.name
          img.style.width = "100%"
          button.top.append(img)
        }

        if (input.image.url !== undefined) {
          const img = document.createElement("img")
          img.src = input.image.url
          img.style.width = "100%"
          button.top.append(img)
        }

      }

      return button
    }

    if (event === "/get/user-json/verified/2/") {

      return new Promise(async (resolve, reject) => {

        const get = {}
        get.url = event
        get.email = input
        const res = await this.request("closed/json", get)

        if (res.status === 200) {

          const div = this.convert("json/div", res.response)
          div.classList.add("user-json")
          parent.append(div)

          return resolve()

        } else {
          return reject()
        }

      })

    }

    if (event === "user-keys/closed") {


      if (parent === undefined) {
        document.querySelectorAll(".expert-templates").forEach(div => {
          this.render(event, input, div)
        })
      }

      if (parent !== undefined) {
        if (!parent.classList.contains("expert-templates")) {
          parent.classList.add("expert-templates")
        }
      }

      if (parent !== undefined) {
        parent.innerHTML = ""
      }


      return new Promise(async (resolve, reject) => {

        const res = await this.get("keys/user/closed")

        if (res.status === 200) {
          const keys = JSON.parse(res.response)


          return resolve()

        } else {
          return reject()
        }






      })



    }

    if (event === "select/options") {

      if (parent === undefined) {
        document.querySelectorAll(".select-options").forEach(div => {
          this.render(event, input, div)
        })
      }

      if (parent !== undefined) {
        if (!parent.classList.contains("select-options")) {
          parent.classList.add("select-options")
        }
      }

      if (parent !== undefined) {
        parent.innerHTML = ""
      }

      for (let i = 0; i < input.children.length; i++) {
        const option = input.children[i]

        const button = this.create("button/left-right", parent)
        button.left.innerHTML = `Option ${i + 1}`
        button.right.innerHTML = option.value

        button.addEventListener("click", () => {
          this.overlay("toolbox", overlay => {
            this.add("button/remove-overlay", overlay)
            this.add("button/register-html", overlay)

            const info = this.create("header/info", overlay)
            info.append(this.convert("element/alias", option))

            option.ok = () => {
              this.render("select/options", input)
              this.remove("overlay", overlay)
            }

            this.get("funnel/select-option", overlay, option)

          })
        })

      }


    }

    if (event === "templates/node/selected-node") {
      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.templates.length; i++) {
        const template = input.templates[i]

        const templateButton = this.create("button/left-right", parent)
        templateButton.left.innerHTML = template.html
        templateButton.right.style.fontSize = "21px"
        if (template.alias) templateButton.right.innerHTML = template.alias
        templateButton.onclick = () => {
          this.overlay("popup", overlay => {
            if (template.alias) this.render("text/bottom-left", template.alias, overlay)

            const buttons = this.create("div/scrollable", overlay)

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".append-to-selected"
              button.right.innerHTML = "Hänge dein Template an das ausgewählte Element"
              button.onclick = () => {
                const parser = document.createElement("div")
                parser.innerHTML = template.html
                input.selectedNode.appendChild(parser.firstChild)
                window.alert("Templete erfolgreich angehängt.")
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".alias"
              button.right.innerHTML = "Gebe deinem Template einen alternativen Namen"
              button.onclick = () => {
                this.overlay("popup", overlay => {
                  if (template.alias) this.create("header/info", overlay).innerHTML = template.alias

                  const funnel = this.create("div/scrollable", overlay)

                  const aliasField = this.create("field/text", funnel)
                  aliasField.label.innerHTML = "Alternative Bezeichnung für deine Template"
                  aliasField.input.setAttribute("required", "true")
                  if (template.alias !== undefined) {
                    aliasField.input.value = template.alias
                  }
                  this.verify("input/value", aliasField.input)
                  this.add("outline-hover/node", aliasField.input)
                  aliasField.input.oninput = () => this.verify("input/value", aliasField.input)


                  const submit = this.create("button/action", funnel)
                  this.add("outline-hover/node", submit)
                  submit.innerHTML = "Alias jetzt speichern"
                  submit.onclick = async () => {

                    await this.verify("input/value", aliasField.input)

                    this.overlay("security", async securityOverlay => {
                      const res = await this.register("alias/templates/self", {id: template.created, alias: aliasField.input.value})

                      if (res.status !== 200) {
                        window.alert("Fehler.. Bitte wiederholen.")
                        securityOverlay.remove()
                      }

                      if (res.status === 200) {
                        window.alert("Alias erfolgreich gespeichert.")

                        const res = await this.get("templates/getyour/self")
                        if (res.status !== 200) {
                          this.convert("parent/info", parent)
                          parent.innerHTML = "Keine Kontakte gefunden"
                        }
                        if (res.status === 200) {
                          const templates = JSON.parse(res.response)
                          this.render(event, {templates, selectedNode: input.selectedNode}, parent)
                        }

                        overlay.remove()
                        securityOverlay.remove()
                      }
                    })

                  }

                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".delete"
              button.right.innerHTML = "Template entfernen"
              button.onclick = () => {

                const confirm = window.confirm("Möchtest du dein Template wirklich entfernen?")
                if (confirm === true) {

                  this.overlay("security", async securityOverlay => {
                    const res = await this.delete("id/templates/self", template.created)

                    if (res.status === 200) {
                      window.alert("Template erfolgreich entfernt.")
                      templateButton.remove()
                      overlay.remove()
                      securityOverlay.remove()
                    }

                    if (res.status !== 200) {
                      window.alert("Fehler.. Bitte wiederholen.")
                      securityOverlay.remove()
                    }
                  })


                }
              }
            }

          })
        }

      }
    }

    if (event === "templates/node/send-html") {
      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.length; i++) {
        const template = input[i]

        const templateButton = this.create("button/left-right", parent)
        templateButton.left.innerHTML = template.html
        templateButton.right.style.fontSize = "21px"
        templateButton.onclick = () => {
          this.overlay("popup", async overlay => {

            const funnel = this.create("div/scrollable", overlay)

            const searchField = this.create("field/text", funnel)
            searchField.label.innerHTML = "Filter deine Kontakte nach E-Mail Adressen"
            searchField.input.placeholder = "domain.de"
            searchField.style.margin = "21px 34px"
            this.verify("input/value", searchField.input)
            this.add("outline-hover/node", searchField.input)

            const selectField = this.create("field/select", funnel)
            selectField.label.innerHTML = "An welche E-Mail Adressen möchtest du dein Template senden"
            selectField.input.setAttribute("multiple", "true")
            selectField.input.style.height = "34vh"
            this.verify("input/value", selectField.input)
            this.add("outline-hover/node", selectField.input)

            const res = await this.get("contacts/user/self")
            if (res.status !== 200) {
              this.convert("parent/info", contactsDiv)
              parent.innerHTML = "Keine Kontakte gefunden"
            }
            if (res.status === 200) {
              const contacts = JSON.parse(res.response)

              let filtered
              searchField.input.oninput = (ev) => {
                filtered = contacts.filter(it => it.email.toLowerCase().includes(ev.target.value.toLowerCase()))

                let emails
                if (filtered) {
                  emails = filtered.map(it => it.email)
                } else {
                  emails = contacts.map(it => it.email)
                }
                selectField.input.add(emails)

              }
              selectField.input.add(contacts.map(it => it.email))

              let selectedEmails
              let sendTemplateButton
              selectField.oninput = (ev) => {
                selectedEmails = Array.from(ev.target.selectedOptions).map(option => option.value)

                if (!sendTemplateButton) {
                  sendTemplateButton = this.create("button/action", buttons)
                  sendTemplateButton.className = "send-template-button"
                  this.add("outline-hover/node", sendTemplateButton)
                  sendTemplateButton.innerHTML = "Template senden"
                  sendTemplateButton.style.width = "34vw"
                  sendTemplateButton.onclick = async () => {

                    await this.verify("input/value", subjectField.input)
                    const emails = Array.from(selectField.input.selectedOptions).map(option => option.value)

                    this.overlay("security", async securityOverlay => {

                      try {
                        securityOverlay.innerHTML = ""
                        securityOverlay.style.display = "flex"
                        securityOverlay.style.flexDirection = "column"
                        securityOverlay.style.justifyContent = "center"

                        const promises = []
                        for (let i = 0; i < emails.length; i++) {
                          const email = emails[i]

                          const container = this.create("div", securityOverlay)
                          container.style.display = "flex"
                          container.style.margin = "21px 34px"
                          container.style.fontSize = "21px"
                          container.style.fontFamily = "sans-serif"

                          container.style.color = this.colors.light.text
                          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                            container.style.color = this.colors.dark.text
                          }

                          const emailDiv = this.create("div", container)
                          emailDiv.innerHTML = email

                          const signDiv = this.create("div", container)
                          signDiv.style.marginLeft = "34px"
                          this.render("icon/node/path", "/public/loading.svg", signDiv)

                          const send = {}
                          send.template = template.html
                          send.subject = subjectField.input.value
                          send.email = email
                          const promise = this.send("email/user/send-template", send)
                          .then((res) => {
                             if (res.status === 200) {
                               signDiv.style.color = this.colors.dark.success
                               signDiv.innerHTML = "Erfolgreich gesendet.."
                             } else {
                               signDiv.style.color = this.colors.dark.error
                               signDiv.innerHTML = "Fehler beim Senden.."
                             }
                           })
                           .catch((error) => {
                             signDiv.style.color = this.colors.dark.error
                             signDiv.innerHTML = "Fehler beim Senden.."
                           })

                          promises.push(promise)
                        }

                        await Promise.all(promises)
                        this.add("button/remove-overlay", securityOverlay)

                      } catch (error) {
                        window.alert("sadf")
                      }

                    })

                  }
                }

              }

              const subjectField = this.create("field/text", funnel)
              subjectField.label.innerHTML = "Betreff"
              subjectField.input.setAttribute("required", "true")
              subjectField.style.margin = "21px 34px"
              subjectField.input.oninput = () => this.verify("input/value", subjectField.input)
              this.verify("input/value", subjectField.input)
              this.add("outline-hover/node", subjectField.input)

              const buttons = this.create("div", funnel)
              buttons.style.display = "flex"
              buttons.style.justifyContent = "space-between"
              buttons.style.width = "100%"

              const testTemplateButton = this.create("button/action", buttons)
              this.add("outline-hover/node", testTemplateButton)
              testTemplateButton.innerHTML = "Test senden"
              testTemplateButton.style.background = this.colors.light.success
              testTemplateButton.style.width = "34vw"
              testTemplateButton.onclick = async () => {

                await this.verify("input/value", subjectField.input)

                this.overlay("security", async securityOverlay => {
                  securityOverlay.remove()

                  const send = {}
                  send.template = template.html
                  send.subject = subjectField.input.value
                  const res = await this.send("email/user/test-template", send)
                  if (res.status === 200) {
                    window.alert("Template erfolgreich gesendet.")
                    securityOverlay.remove()
                  }
                })

              }

            }

          })
        }

      }
    }

    if (event === "text/bottom-left") {

      let bottomLeft = parent.querySelector(".bottom-left-text")

      if (bottomLeft !== null) {
        bottomLeft.append(input)
      }

      if (bottomLeft === null) {
        bottomLeft = this.create("div/bottom-left", parent)
        bottomLeft.classList.add("bottom-left-text")
        bottomLeft.innerHTML = input
      }

      return bottomLeft

    }

    if (event === "text/info") {
      this.convert("parent/info", parent)
      parent.innerHTML = input
    }

    if (event === "text/error-stack") {

      const code = this.convert("error-stack-text/div", input)

      code.style.fontSize = "13px"
      code.style.fontFamily = "monospace"
      code.style.margin = "21px 34px"
      code.style.overflow = "auto"

      code.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        code.style.color = this.colors.dark.text
      }

      if (parent !== undefined) parent.append(code)
      return code
    }

    if (event === "text/code") {

      const code = document.createElement("div")
      code.innerHTML = input
      code.style.fontSize = "13px"
      code.style.fontFamily = "monospace"
      code.style.margin = "21px 34px"
      code.style.overflow = "auto"

      code.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        code.style.color = this.colors.dark.text
      }

      if (parent !== undefined) parent.append(code)
      return code
    }

    if (event === "text/link") {

      const link = this.create("div")
      link.innerHTML = input
      link.style.fontFamily = "sans-serif"
      link.style.padding = "13px 21px"
      link.style.display = "flex"
      link.style.justifyContent = "center"
      link.style.alignItems = "center"
      link.style.cursor = "pointer"
      link.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        link.style.color = this.colors.dark.text
      }
      link.onmouseover = () => {
        link.style.outline = "3px solid #999"
      }
      link.onmouseout = () => {
        link.style.outline = null
      }
      parent?.append(link)
      return link

    }

    if (event === "text/div") {
      const div = this.create("div")
      div.innerHTML = input
      div.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        div.style.color = this.colors.dark.text
      }
      parent?.append(div)
      return div
    }

    if (event === "text/h3") {

      const h3 = this.create("h3")
      h3.innerHTML = input

      h3.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        h3.style.color = this.colors.dark.text
      }

      if (parent !== undefined) parent.append(h3)
      return h3
    }

    if (event === "text/h2") {

      const h2 = this.create("h2")
      h2.innerHTML = input

      h2.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        h2.style.color = this.colors.dark.text
      }

      if (parent !== undefined) parent.append(h2)
      return h2
    }

    if (event === "text/h1") {

      const h1 = this.create("h1")
      h1.innerHTML = input

      h1.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        h1.style.color = this.colors.dark.text
      }

      if (parent !== undefined) parent.append(h1)
      return h1
    }

    if (event === "platform/roles") {

      return new Promise(async (resolve, reject) => {


        const content = this.create("info/loading", parent)

        const {platform, onclick} = input

        const get = {}
        get.url = "/get/platform/closed"
        get.type = "roles"
        get.platform = platform
        const res = await this.request("closed/json", get)


        if (res.status === 200) {
          const roles = JSON.parse(res.response)

          this.convert("parent/scrollable", content)

          for (let i = 0; i < roles.length; i++) {
            const role = roles[i]

            const button = this.create("button/left-right", content)
            button.left.innerHTML = role.name
            button.right.innerHTML = "Rolle"

            if (onclick !== undefined) button.addEventListener("click", event => onclick(role, event))


          }

          return resolve(content)

        }

      })
    }

    if (event === "text/hr") {

      const container = document.createElement("div")
      const text = document.createElement("div")
      text.innerHTML = input
      container.append(text)
      const hr = document.createElement("hr")
      container.append(hr)
      text.style.fontFamily = "sans-serif"
      text.style.fontSize = "13px"
      text.style.margin = "0 34px"
      hr.style.margin = "0 21px"
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        text.style.color = this.colors.dark.text
        hr.style.border = `1px solid ${this.colors.dark.text}`
      } else {
        text.style.color = this.colors.light.text
        hr.style.border = `1px solid ${this.colors.light.text}`
      }
      parent?.append(container)
      return container

    }

    if (event === "text/node/bottom-right-onhover") {

      const text = document.createElement("div")
      text.innerHTML = input
      text.style.opacity = "0"
      text.style.position = "absolute"
      text.style.bottom = "0"
      text.style.right = "0"
      text.style.margin = "3px 13px"
      parent.style.position = "relative"
      parent.style.fontFamily = "sans-serif"
      parent.append(text)
      parent.addEventListener("mouseover", () => {
        text.style.opacity = "1"
      })
      parent.addEventListener("mouseout", () => {
        text.style.opacity = "0"
      })
      return parent

    }

    if (event === "text/right-hr") {

      const container = document.createElement("div")

      container.text = document.createElement("div")
      container.text.innerHTML = input
      container.text.style.display = "flex"
      container.text.style.justifyContent = "flex-end"
      container.append(container.text)

      container.hr = document.createElement("hr")
      container.append(container.hr)

      container.text.style.fontFamily = "sans-serif"
      container.text.style.fontSize = "21px"
      container.text.style.margin = "0 34px"

      container.hr.style.margin = "0 21px"

      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        container.text.style.color = this.colors.dark.text
        container.hr.style.border = `1px solid ${this.colors.dark.text}`
      } else {
        container.text.style.color = this.colors.light.text
        container.hr.style.border = `1px solid ${this.colors.light.text}`
      }

      parent?.append(container)
      return container
    }

    if (event === "visibility/platform-value-closed") {

      this.convert("parent/scrollable", parent)

      const visibilityField = this.create("field/select", parent)
      visibilityField.label.innerHTML = "Sichtbarkeit"
      this.verify("input/value", visibilityField.input)
      visibilityField.input.addEventListener("input", () => {
        const value = visibilityField.input.value
        input.visibility = value
        this.render(event, input, parent)
      })

      if (input.visibility === "open") {
        visibilityField.input.add(["open", "closed"])

        const button = this.create("button/action", parent)
        button.innerHTML = "Sichtbarkeit jetzt ändern"
        button.addEventListener("click", async () => {

          const visibility = visibilityField.input.value

          this.overlay("security", async securityOverlay => {

            const res = await this.register("visibility/platform-value/closed", {path: input.path, visibility})

            if (res.status === 200) {
              window.alert("Sichtbarkeit erfolgreich geändert.")
              this.remove("overlay", parent.parentElement.previousSibling.previousSibling)
              this.remove("overlay", parent.parentElement.previousSibling)
              this.remove("overlay", parent.parentElement)
              this.remove("overlay", securityOverlay)
            } else {
              window.alert("Fehler.. Bitte wiederholen.")
              this.remove("overlay", securityOverlay)
            }

          })

        })

      }

      if (input.visibility === "closed") {

        visibilityField.input.add(["closed", "open"])

        const rolesField = this.create("field/select", parent)
        rolesField.label.innerHTML = "Nutzer mit diesen Rollen dürfen mit deiner Werteinheit interagieren"
        rolesField.input.multiple = true

        const array = []

        if (input.roles !== undefined) {
          if (input.roles.available !== undefined) {

            for (let i = 0; i < input.roles.available.length; i++) {
              const role = input.roles.available[i]
              array.push(role.name)
            }

          }
        }


        rolesField.input.add(array)

        this.verify("input/value", rolesField.input)

        const selected = []
        for (let i = 0; i < input.roles.selected.length; i++) {
          const roleId = input.roles.selected[i]

          if (input.roles !== undefined) {
            if (input.roles.available !== undefined) {
              for (let i = 0; i < input.roles.available.length; i++) {
                const role = input.roles.available[i]

                if (role.id === roleId) {
                  selected.push(role.name)
                }

              }
            }
          }


        }

        for (let i = 0; i < selected.length; i++) {
          const value = selected[i]

          for (let i = 0; i < rolesField.input.options.length; i++) {
            const option = rolesField.input.options[i]

            if (option.value === value) {
              option.selected = true
            }

          }

        }

        const authorizedField = this.create("field/emails", parent)
        authorizedField.label.innerHTML = "Nutzer mit diesen E-Mail Adressen dürfen mit deiner Werteinheit interagieren"
        authorizedField.input.value = JSON.stringify(input.authorized)
        this.verify("input/value", authorizedField.input)
        authorizedField.input.addEventListener("input", () => this.verify("input/value", authorizedField.input))

        const button = this.create("button/action", parent)
        button.innerHTML = "Sichtbarkeit jetzt ändern"
        button.addEventListener("click", async () => {

          await this.verify("field-funnel", parent)

          const visibility = visibilityField.input.value

          const roles = []
          for (let i = 0; i < rolesField.input.options.length; i++) {
            const option = rolesField.input.options[i]

            if (option.selected === true) {
              if (input.roles !== undefined) {
                if (input.roles.available !== undefined) {
                  for (let i = 0; i < input.roles.available.length; i++) {
                    const role = input.roles.available[i]
                    if (role.name === option.value) {
                      roles.push(role.id)
                    }
                  }
                }
              }
            }


          }

          const authorized = JSON.parse(authorizedField.input.value)

          this.overlay("security", async securityOverlay => {

            const res = await this.register("visibility/platform-value/closed", {visibility, roles, authorized, path: input.path})

            if (res.status === 200) {
              window.alert("Sichtbarkeit erfolgreich geändert.")
              this.remove("overlay", parent.parentElement.previousSibling.previousSibling)
              this.remove("overlay", parent.parentElement.previousSibling)
              this.remove("overlay", parent.parentElement)
              this.remove("overlay", securityOverlay)

            } else {
              window.alert("Fehler.. Bitte wiederholen.")
              this.remove("overlay", securityOverlay)
            }

          })


        })
      }

    }

    if (event === "experts/open") {

      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.length; i++) {
        const expert = input[i]
        const button = this.create("button/left-right", parent)
        button.left.innerHTML = expert
        button.addEventListener("click", () => window.open(`/${expert}/`, "_blank"))
      }

    }

    if (event === "text/p") {
      const p = document.createElement("p")
      p.innerHTML = input
      p.style.margin = "21px 34px"
      p.style.fontFamily = "sans-serif"

      p.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        p.style.color = this.colors.dark.text
      }

      if (parent !== undefined) parent.append(p)

      return p
    }

    if (event === "text/title") {
      const title = document.createElement("div")
      title.textContent = input
      title.style.margin = "21px 34px"
      title.style.fontSize = "21px"
      title.style.fontFamily = "sans-serif"

      title.style.color = this.colors.light.text
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        title.style.color = this.colors.dark.text
      }

      if (parent !== undefined) parent.append(title)

      return title
    }

    if (event === "platform-values/closed") {

      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.length; i++) {
        const value = input[i]

        const item = document.createElement("div")
        item.classList.add("checklist-item")
        item.style.margin = "34px"

        const itemHeader = document.createElement("div")
        itemHeader.classList.add("item-header")
        itemHeader.style.display = "flex"
        itemHeader.style.borderTopRightRadius = "21px"
        itemHeader.style.borderTopLeftRadius = "21px"
        itemHeader.style.borderBottomLeftRadius = "21px"

        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          itemHeader.style.backgroundColor = this.colors.matte.charcoal
        } else {
          itemHeader.style.backgroundColor = this.colors.gray[1]
        }

        itemHeader.style.cursor = "pointer"

        itemHeader.addEventListener("click", async () => {

          this.overlay("toolbox", overlay => {
            this.add("button/remove-overlay", overlay)
            const info = this.create("header/info", overlay)
            info.append(this.convert("text/span", value.path))

            {
              const buttons = this.create("div/scrollable", overlay)

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".toolbox"
                button.right.innerHTML = "Bearbeite deine Werteinheit"
                button.addEventListener("click", () => window.location.assign(value.path))
              }

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".path"
                button.right.innerHTML = "Pfad ändern"

                button.addEventListener("click", () => {

                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)
                    const info = this.create("header/info", overlay)
                    info.append(this.convert("text/span", ".value.path"))


                    const funnel = this. create("div/scrollable", overlay)

                    {
                      const pathField = this.create("field/tag", funnel)
                      pathField.input.value = value.path.split("/")[3]
                      pathField.label.innerHTML = "Pfad"
                      pathField.input.maxLength = "144"
                      pathField.input.placeholder = "Meine Werteinheit"
                      pathField.input.addEventListener("input", (event) => this.verify("input/value", pathField.input))
                      this.verify("input/value", pathField.input)

                      const button = this.create("button/action", funnel)
                      button.innerHTML = "Pfad jetzt ändern"
                      button.addEventListener("click", async () => {

                        await this.verify("input/value", pathField.input)
                        const path = pathField.input.value

                        this.overlay("security", async securityOverlay => {

                          {
                            const verify = {}
                            verify.url = "/verify/platform-value/open/"
                            verify.type = "path"
                            verify.path = `/${value.path.split("/")[1]}/${value.path.split("/")[2]}/${path}/`
                            const res = await this.request("closed/json", verify)

                            if (res.status === 200) {
                              window.alert("Pfad existiert bereits.")
                              this.setNotValidStyle(pathField.input)
                              pathField.scrollIntoView({behavior: "smooth"})
                              this.remove("overlay", securityOverlay)
                              throw new Error("path exist")
                            }
                          }



                          const register = {}
                          register.url = "/register/platform-value/closed/"
                          register.type = "path"
                          register.oldPath = value.path
                          register.newPath = path
                          const res = await this.request("closed/json", register)

                          if (res.status === 200) {
                            window.alert("Pfad erfolgreich geändert.")

                            this.remove("overlay", overlay.previousSibling.previousSibling)
                            this.remove("overlay", overlay.previousSibling)
                            this.remove("overlay", overlay)

                            this.remove("overlay", securityOverlay)

                          } else {
                            window.alert("Fehler.. Bitte wiederholen.")
                            this.remove("overlay", securityOverlay)
                          }
                        })

                      })

                    }

                  })
                })

              }

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".alias"
                button.right.innerHTML = "Alias ändern"

                button.addEventListener("click", () => {

                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)
                    const info = this.create("header/info", overlay)
                    info.append(this.convert("text/span", ".value.alias"))

                    {
                      const funnel = this.create("div/scrollable", overlay)

                      const valueAliasField = this.create("field/text", funnel)
                      valueAliasField.input.value = value.alias
                      valueAliasField.label.innerHTML = "Alias"
                      valueAliasField.input.maxLength = "144"
                      valueAliasField.input.setAttribute("required", "true")
                      valueAliasField.input.placeholder = "Meine Werteinheit"
                      valueAliasField.input.addEventListener("input", () => this.verify("input/value", valueAliasField.input))
                      this.verify("input/value", valueAliasField.input)

                      const button = this.create("button/action", funnel)
                      button.innerHTML = "Alias jetzt ändern"
                      button.addEventListener("click", async () => {

                        await this.verify("input/value", valueAliasField.input)
                        const alias = valueAliasField.input.value

                        this.overlay("security", async securityOverlay => {

                          const res = await this.register("alias/platform-value/closed", {alias, path: value.path})

                          if (res.status === 200) {
                            window.alert("Alias erfolgreich geändert..")

                            this.remove("overlay", overlay.previousSibling.previousSibling)
                            this.remove("overlay", overlay.previousSibling)
                            this.remove("overlay", overlay)

                            this.remove("overlay", securityOverlay)

                          } else {
                            alert("Fehler.. Bitte wiederholen.")
                            this.remove("overlay", securityOverlay)
                          }
                        })


                      })
                    }

                  })
                })

              }

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".image"
                button.right.innerHTML = "Bild ändern"

                button.addEventListener("click", () => {

                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)
                    const info = this.create("header/info", overlay)
                    info.append(this.convert("text/span", ".value.image"))

                    this.update("image/platform-value/closed", overlay, value)

                  })
                })

              }


              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".lang"
                button.right.innerHTML = "Sprache ändern"

                button.addEventListener("click", () => {

                  this.overlay("toolbox", async overlay => {


                    this.add("button/remove-overlay", overlay)
                    const info = this.create("header/info", overlay)
                    info.append(this.convert("text/span", ".value.lang"))

                    const funnel = this.create("div/scrollable", overlay)

                    const langField = this.create("field/lang", funnel)

                    const button = this.create("button/action", funnel)
                    button.innerHTML = "Sprache jetzt ändern"
                    button.addEventListener("click", async () => {

                      const lang = langField.validValue()[0].value

                      this.overlay("security", async securityOverlay => {

                        const res = await this.register("lang/platform-value/closed", {lang, path: value.path})

                        if (res.status === 200) {
                          window.alert("Sprache erfolgreich geändert..")

                          this.remove("overlay", overlay)

                          this.remove("overlay", securityOverlay)

                        } else {
                          window.alert("Fehler.. Bitte wiederholen.")
                          this.remove("overlay", securityOverlay)
                        }


                      })

                    })

                  })
                })

              }


              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".visibility"
                button.right.innerHTML = "Sichtbarkeit der Werteinheit"

                button.addEventListener("click", () => {


                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)
                    const info = this.create("header/info", overlay)
                    info.append(this.convert("text/span", ".visibility"))

                    const funnel = this.create("div/scrollable", overlay)




                    {
                      const get = {}
                      get.url = "/get/platform-value/closed/"
                      get.type = "visibility"
                      get.path = value.path
                      const res = await this.request("closed/json", get)

                      if (res.status === 200) {
                        const map = JSON.parse(res.response)
                        map.path = value.path

                        this.render("visibility/platform-value-closed", map, funnel)
                      }


                    }

                  })

                })

              }


              {
                const button = this.create("button/left-right", buttons)
                button.right.innerHTML = "Schreibrechte an Teammitglieder vergeben"
                button.left.innerHTML = ".writability"

                button.onclick = () => {
                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)

                    const info = this.create("header/info", overlay)
                    info.innerHTML = `.${value.path}.writability`

                    const funnel = this.create("div/scrollable", overlay)

                    const textAreaField = this.create("field/emails", funnel)
                    textAreaField.label.innerHTML = "Gebe eine Liste mit E-Mail Adressen an und erlaube diesen Nutzern, an deiner Werteinheit mitzuarbeiten"
                    this.verify("input/value", textAreaField.input)
                    textAreaField.input.oninput = async () => this.verify("input/value", textAreaField.input)

                    const res = await this.get("writability/platform-value/closed", value.path)
                    if (res.status === 200) {
                      textAreaField.input.value = res.response
                      this.verify("input/value", textAreaField.input)
                    }

                    const submit = this.create("button/action", funnel)
                    submit.innerHTML = "Schreibrechte jetzt vergeben"
                    let clickCounter = 0
                    submit.onclick = () => {

                      try {

                        const array = JSON.parse(textAreaField.input.value)

                        for (let i = 0; i < array.length; i++) {
                          const item = array[i]

                          if (!this.verifyIs("text/email", item)) throw new Error("not an email")
                        }

                        this.setValidStyle(textAreaField.input)

                        this.overlay("security", async securityOverlay => {

                          const map = {}
                          map.writability = array
                          map.path = value.path
                          const res = await this.register("writability/platform-value/closed", map)

                          if (res.status === 200) {
                            window.alert("Schreibrechte erfolgreich gespeichert.")
                            this.remove("overlay", securityOverlay)
                            this.remove("overlay", overlay)
                          }

                          if (res.status !== 200) {
                            window.alert("Fehler.. Bitte wiederholen.")
                            this.remove("overlay", securityOverlay)
                          }


                        })


                      } catch (error) {
                        this.setNotValidStyle(textAreaField.input)

                        if (clickCounter === 3) {
                          window.alert("Deine E-Mail Liste ist ungültig.")
                          clickCounter = 0
                        }
                        clickCounter++
                      }



                    }


                  })
                }

              }

              {
                const button = this.create("button/left-right", buttons)
                button.right.innerHTML = "Aktualisiere deine Toolbox"
                button.left.innerHTML = ".update-toolbox"
                button.onclick = async () => {
                  const res = await this.update("toolbox/html/path", value.path)

                  if (res.status === 200) {
                    window.alert("Toolbox wurde erfolgreich aktualisiert.")
                  } else {
                    window.alert("Fehler.. Bitte wiederholen.")
                  }
                }
              }

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".delete"
                button.right.innerHTML = "Werteinheit löschen"

                button.addEventListener("click", async () => {

                  const confirm = window.confirm("Möchtest du deine Werteinheit wirklich löschen? Alle enthaltenen Daten werden ebenfalls gelöscht.")
                  if (confirm === true) {

                    this.overlay("security", async securityOverlay => {
                      const del = {}
                      del.url = "/delete/platform-value/closed/"
                      del.path = value.path
                      const res = await this.request("closed/json", del)

                      if (res.status === 200) {
                        window.alert("Werteinheit erfolgreich gelöscht..")

                        this.remove("overlay", overlay.previousSibling)
                        this.remove("overlay", overlay)

                        this.remove("overlay", securityOverlay)

                      } else {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", securityOverlay)
                      }
                    })

                  }

                })

              }

            }

          })
        })

        const itemState = document.createElement("div")
        itemState.classList.add("item-state")
        itemState.style.display = "flex"
        itemState.style.justifyContent = "center"
        itemState.style.alignItems = "center"
        itemState.style.width = "89px"
        itemState.style.height = "89px"
        itemState.style.fontSize = "34px"


        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          itemState.style.backgroundColor = this.colors.matte.black
        } else {
          itemState.style.backgroundColor = this.colors.gray[2]
        }

        if (value.visibility === "closed") {
          if (value.roles.length === 0) {
            if (value.authorized.length === 0) {
              this.render("icon/node/path", "/public/eye-crossed.svg", itemState).then(icon => {
                icon.style.width = "34px"
              })
            }
          }
        }

        if (value.visibility === "open") {
          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            itemState.style.backgroundColor = this.colors.matte.seaGreen
          } else {
            itemState.style.backgroundColor = this.colors.matte.lime
          }

          this.render("icon/node/path", "/public/eye-open.svg", itemState).then(icon => {
            icon.style.width = "34px"
          })
        }

        if (value.visibility === "closed") {
          if (value.roles.length !== 0 || value.authorized.length !== 0) {
            itemState.style.backgroundColor = "#eed202"
            const stateIcon = document.createElement("img")
            stateIcon.src = "/public/shield-locked.svg"
            stateIcon.style.width = "34px"
            itemState.append(stateIcon)
          }
        }

        itemState.style.borderTopLeftRadius = "21px"
        itemState.style.borderBottomLeftRadius = "21px"

        const itemTitle = document.createElement("div")
        itemTitle.classList.add("item-title")
        itemTitle.style.padding = "21px 34px"
        itemTitle.style.fontSize = "21px"
        itemTitle.style.overflow = "auto"

        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          itemTitle.style.color = this.colors.dark.text
        } else {
          itemTitle.style.color = this.colors.light.text
        }

        {
          const alias = document.createElement("div")
          alias.innerHTML = `${value.alias}`
          alias.classList.add("alias")
          alias.style.fontSize = "21px"
          itemTitle.append(alias)
        }

        {
          const path = document.createElement("div")
          path.classList.add("path")
          path.innerHTML = `${value.path}`
          path.style.fontSize = "13px"
          itemTitle.append(path)
        }

        itemHeader.append(itemState, itemTitle)
        item.append(itemHeader)


        const itemBody = document.createElement("div")
        itemBody.classList.add("item-body")
        itemBody.style.marginLeft = "8%"


        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          itemBody.style.backgroundColor = this.colors.matte.slate
          itemBody.style.boxShadow = `0 1px ${this.colors.gray[4]}`
        } else {
          itemBody.style.boxShadow = `0 1px ${this.colors.gray[2]}`
          itemBody.style.backgroundColor = this.colors.gray[0]
        }

        itemBody.style.borderBottomRightRadius = "21px"
        itemBody.style.borderBottomLeftRadius = "21px"
        itemBody.style.padding = "21px"
        itemBody.style.display = "flex"
        itemBody.style.flexDirection = "column"

        const buttons = document.createElement("div")
        buttons.style.display = "flex"
        buttons.style.alignItems = "center"

        {
          const button = this.create("div", buttons)
          this.render("icon/node/path", "/public/window-layout-14.svg", button)
          button.style.width = "55px"
          button.style.cursor = "pointer"
          button.onclick = () => window.open(value.path, "_blank")
        }


        {
          const button = this.create("div")
          button.style.width = "55px"
          button.style.margin = "0 13px"
          buttons.append(button)
          button.style.cursor = "pointer"
          button.onclick = () => {

            navigator.clipboard.writeText(value.path)
            .then(() => window.alert(`Der Pfad '${value.path}' wurde erfolgreich in den Zwischenspeicher kopiert.`))
            .catch(() => window.alert("Fehler.. Bitte wiederholen."))

          }

          this.render("icon/node/path", "/public/window-chain.svg", buttons).then(icon => {
            button.append(icon)
          })
        }


        itemBody.append(buttons)
        item.append(itemBody)
        parent.append(item)
      }

    }

    if (event === "platform-values/location") {

      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.length; i++) {
        const value = input[i]

        const button = this.render("value/button", value, parent)

        button.addEventListener("click", () => window.location.assign(value.path))

      }

    }

    if (event === "platforms/closed") {


      parent.innerHTML = ""

      for (let i = 0; i < input.length; i++) {
        const platform = input[i]

        const button = this.render("platform/button", platform, parent)

        button.addEventListener("click", () => {

          this.overlay("toolbox", async overlay => {

            this.add("button/remove-overlay", overlay)
            const info = this.create("header/info", overlay)
            info.innerHTML = platform.name

            const buttons = this.create("div/scrollable", overlay)

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".create"
              button.right.innerHTML = "Neue Werteinheit erstellen"
              button.addEventListener("click", () => {

                this.overlay("toolbox", overlay => {


                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.innerHTML = platform.name

                  {
                    const span = document.createElement("span")
                    span.innerHTML = `.value`
                    info.append(span)
                  }



                  {
                    const funnel = this.create("div/scrollable", overlay)

                    const valuePathField = this.create("field/tag", funnel)
                    valuePathField.label.innerHTML = "Pfad"
                    valuePathField.input.maxLength = "144"
                    valuePathField.input.placeholder = "meine-werteinheit"
                    this.verify("input/value", valuePathField.input)
                    valuePathField.input.addEventListener("input", () => this.verify("input/value", valuePathField.input))

                    const valueAliasField = this.create("field/text", funnel)
                    valueAliasField.label.innerHTML = "Alias"
                    valueAliasField.input.maxLength = "144"
                    valueAliasField.input.setAttribute("required", "true")
                    valueAliasField.input.placeholder = "Meine Werteinheit"
                    valueAliasField.input.addEventListener("input", () => this.verify("input/value", valueAliasField.input))
                    this.verify("input/value", valueAliasField.input)

                    const button = this.create("button/action", funnel)
                    button.innerHTML = "Werteinheit jetzt speichern"
                    button.addEventListener("click", async () => {

                      await this.verify("field-funnel", funnel)

                      const path = valuePathField.input.value
                      const alias = valueAliasField.input.value

                      const verify = {}
                      verify.url = "/verify/platform-value/open/"
                      verify.type = "path"
                      verify.path = `/${window.location.pathname.split("/")[1]}/${platform.name}/${path}/`
                      const res = await this.request("closed/json", verify)

                      if (res.status === 200) {
                        window.alert("Pfad existiert bereits.")
                        this.setNotValidStyle(valuePathField.input)
                        valuePathField.scrollIntoView({behavior: "smooth"})
                        throw new Error("path exist")
                      }

                      this.overlay("toolbox", async securityOverlay => {
                        this.create("info/loading", securityOverlay)

                        const res = await this.register("value/platform/closed", {path, alias, platform: platform.name})

                        if (res.status === 200) {
                          alert("Werteinheit erfolgreich gespeichert.")
                          this.remove("overlay", securityOverlay)
                          this.remove("overlay", overlay)
                        } else {
                          alert("Fehler.. Bitte wiederholen.")
                          this.remove("overlay", securityOverlay)
                        }


                      })

                    })

                  }

                })

              })
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".values"
              button.right.innerHTML = "Meine Werteinheiten"
              button.addEventListener("click", () => {

                this.overlay("toolbox", async overlay => {

                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.innerHTML = platform.name
                  info.append(this.convert("text/span", ".values"))

                  const searchField = this.create("field/text", overlay)
                  searchField.label.innerHTML = "Suche nach Alias"
                  searchField.input.placeholder = "Meine Werteinheiten"
                  this.verify("input/value", searchField.input)
                  this.add("outline-hover/node", searchField.input)

                  const units = this.create("info/loading", overlay)

                  const res = await this.get("values/platform/self", platform.name)
                  if (res.status === 200) {
                    const values = JSON.parse(res.response)

                    if (values.length === 0) {
                      this.convert("parent/info", units)
                      searchField.remove()
                      units.innerHTML = `<span style="margin: 21px 34px;">Es wurden keine Werteinheiten gefunden.</span>`
                      throw new Error("platform values is empty")
                    }

                    searchField.input.oninput = (ev) => {
                      const filtered = values.filter(it => it.alias.toLowerCase().includes(ev.target.value.toLowerCase()))
                      const highlighted = filtered.map(it => {
                        const highlightedAlias = it.alias.replace(new RegExp(ev.target.value, 'i'), `<mark>${ev.target.value}</mark>`)
                        return { ...it, alias: highlightedAlias }
                      })
                      this.render("platform-values/closed", highlighted, units)
                    }

                    this.render("platform-values/closed", values, units)

                  }

                })
              })
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".roles"
              button.right.innerHTML = "Rollen definieren"

              button.addEventListener("click", () => {
                this.overlay("toolbox", async overlay => {

                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.innerHTML = `${platform.name}.roles`

                  const create = this.create("button/left-right", overlay)
                  create.left.innerHTML = ".create"
                  create.right.innerHTML = "Neue Rolle definieren"
                  create.addEventListener("click", () => {

                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)
                      const info = this.create("header/info", overlay)
                      info.append(this.convert("text/span", "create.role"))

                      this.update("platform/role", overlay, {platform: platform.name, ok: async () => {

                        this.convert("element/reset", roleList)
                        await this.update("platform/roles", roleList, platform.name)

                      }})

                    })

                  })

                  this.render("text/hr", "Meine Rollen", overlay)

                  const roleList = await this.update("platform/roles", overlay, platform.name)

                })
              })

            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".cassa"
              button.right.innerHTML = "Verwalte die Zahlungsströme auf deiner Plattform"
              button.onclick = () => {
                this.overlay("popup", async overlay => {

                  const res = await this.get("paths/platform/self", platform.name)

                  if (res.status === 200) {
                    const paths = JSON.parse(res.response)

                    const pathsField = this.create("field/select", overlay)
                    pathsField.label.innerHTML = "Zur-Kasse-gehen Weiterleitung nach"
                    pathsField.input.add(paths)
                    this.verify("input/value", pathsField.input)
                    this.get("path/cassa/location-platform", platform.name).then(res => {
                      if (res.status === 200) {
                        pathsField.input.value = res.response
                      }
                    })
                    pathsField.input.oninput = (ev) => {
                      this.overlay("security", async securityOverlay => {
                        const map = {}
                        map.path = ev.target.value
                        map.platform = platform.name
                        const res = await this.register("path/cassa/platform-expert", map)
                        if (res.status === 200) {
                          window.alert("Weiterleitung erfolgreich eingerichtet.")
                          securityOverlay.remove()
                        }
                      })
                    }

                    if (paths.length <= 0) {
                      this.setNotValidStyle(pathsField.input)
                    }

                  }

                })
              }
            }

            {
              const button = this.create("button/left-right", buttons)
              button.left.innerHTML = ".match-maker"
              button.right.innerHTML = "Match Maker definieren"

              button.addEventListener("click", () => {

                this.overlay("toolbox", async overlay => {

                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.innerHTML = `.match-maker`

                  const create = this.create("button/left-right", overlay)
                  create.left.innerHTML = ".create"
                  create.right.innerHTML = "Neuen Match Maker definieren"
                  create.addEventListener("click", () => {

                    this.overlay("toolbox", async overlay => {
                      this.add("button/remove-overlay", overlay)
                      const info = this.create("header/info", overlay)
                      info.append(this.convert("text/span", `.${platform.name}.match-maker`))

                      const funnel = this.create("div/scrollable", overlay)

                      funnel.nameField = this.create("field/name", funnel)
                      funnel.nameField.label.innerHTML = "Gebe deinem Match Maker einen einzigartigen Namen (json/tag)"

                      this.verify("input/value", funnel.nameField.input)
                      funnel.nameField.input.oninput = () => this.verify("input/value", funnel.nameField.input)

                      funnel.submit = this.create("button/action", funnel)
                      funnel.submit.innerHTML = "Match Maker jetzt speichern"

                      funnel.submit.onclick = async () => {

                        const res = await this.verify("input/value", funnel.nameField.input)

                        if (res === true) {

                          const name = funnel.nameField.input.value

                          const res = await this.verify("match-maker-name/open", name)

                          if (res.status === 200) {
                            this.setNotValidStyle(funnel.nameField.input)
                            window.alert("Name existiert bereits.")
                            throw new Error("name exist")
                          }

                          this.overlay("security", async securityOverlay => {

                            const map = {}
                            map.platform = platform.name
                            map.name = name

                            const res = await this.register("name/match-maker/closed", map)

                            if (res.status === 200) {

                              await this.get("match-maker/closed", matchMakerContainer, platform.name)

                              this.remove("overlay", overlay)
                              this.remove("overlay", securityOverlay)

                            }

                          })

                        }

                      }

                    })

                  })

                  this.render("text/hr", "Meine Match Maker", overlay)

                  const matchMakerContainer = this.create("div/scrollable", overlay)
                  await this.get("match-maker/closed", matchMakerContainer, platform.name)

                })

              })

            }

            {
              const button = this.create("button/left-right", buttons)
              button.right.innerHTML = "Namen ändern"
              button.left.innerHTML = ".name"
              button.addEventListener("click", () => {

                this.overlay("toolbox", async overlay => {


                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.innerHTML = platform.name
                  info.append(this.convert("text/span", ".name"))

                  const funnel = this.create("div/scrollable", overlay)

                  const platformNameField = this.create("field/tag", funnel)
                  platformNameField.input.value = platform.name
                  platformNameField.label.innerHTML = "Plattform"
                  platformNameField.input.maxLength = "21"
                  platformNameField.input.placeholder = "meine-plattform"
                  platformNameField.input.addEventListener("input", () => this.verify("input/value", platformNameField.input))
                  this.verify("input/value", platformNameField.input)

                  const button = this.create("button/action", funnel)
                  button.innerHTML = "Namen jetzt ändern"
                  button.addEventListener("click", async () => {

                    await this.verify("input/value", platformNameField.input)
                    const platformName = platformNameField.input.value

                    this.overlay("security", async securityOverlay => {

                      {

                        const res = await this.verify("platform-name/exist-open", platformName)

                        if (res.status === 200) {
                          window.alert("Plattform existiert bereits.")
                          this.setNotValidStyle(platformNameField.input)
                          this.remove("overlay", securityOverlay)
                          throw new Error("platform exist")
                        }

                      }


                      const res = await this.register("name/platform/location-expert", {old: platform.name, new: platformName})

                      if (res.status === 200) {
                        window.alert("Plattform Name erfolgreich gespeichert.")
                        window.location.reload()
                      } else {
                        window.alert("Fehler.. Bitte wiederholen.")
                        this.remove("overlay", securityOverlay)
                      }
                    })


                  })

                })
              })
            }

            {
              const button = this.create("button/left-right", buttons)
              button.right.innerHTML = "Bild ändern"
              button.left.innerHTML = ".image"

              button.addEventListener("click", () => {

                this.overlay("toolbox", async overlay => {

                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.innerHTML = platform.name
                  info.append(this.convert("text/span", ".image"))

                  this.update("image/platform/closed", overlay, platform.name)

                })
              })

            }

            {
              const button = this.create("button/left-right", buttons)
              button.right.innerHTML = "Sichtbarkeit der Plattform"
              button.left.innerHTML = ".visibility"

              button.addEventListener("click", () => {

                this.overlay("toolbox", async overlay => {

                  this.add("button/remove-overlay", overlay)
                  const info = this.create("header/info", overlay)
                  info.innerHTML = platform.name
                  info.append(this.convert("text/span", ".visibility"))

                  const funnel = this.create("div/scrollable", overlay)

                  {
                    const visibilityField = this.create("field/select", funnel)
                    visibilityField.label.innerHTML = "Sichtbarkeit"

                    const get = {}
                    get.url = "/get/platform/closed/"
                    get.type = "visibility"
                    get.platform = platform.name
                    const res = await this.request("closed/json", get)

                    if (res.status === 200) {
                      const visibility = res.response

                      if (visibility === "open") {
                        visibilityField.input.add(["open", "closed"])
                      }
                      if (visibility === "closed") {
                        visibilityField.input.add(["closed", "open"])
                      }
                    }


                    this.verify("input/value", visibilityField.input)

                    const button = this.create("button/action", funnel)
                    button.innerHTML = "Sichtbarkeit jetzt ändern"
                    button.addEventListener("click", async () => {

                      const visibility = visibilityField.input.value

                      this.overlay("security", async securityOverlay => {

                        const register = {}
                        register.url = "/register/platform/closed/"
                        register.type = "visibility"
                        register.visibility = visibility
                        register.platform = platform.name
                        const res = await this.request("closed/json", register)

                        if (res.status === 200) {
                          window.alert("Sichtbarkeit erfolgreich geändert.")
                          this.remove("overlay", overlay)
                          this.remove("overlay", securityOverlay)
                        } else {
                          window.alert("Fehler.. Bitte wiederholen.")
                          this.remove("overlay", securityOverlay)
                        }

                      })

                    })
                  }

                })
              })

            }

            {
              const button = this.create("button/left-right", buttons)
              button.right.innerHTML = "Plattform löschen"
              button.left.innerHTML = ".delete"

              button.addEventListener("click", () => {

                const confirm = window.confirm("Möchtest du deine Plattform wirklich löschen? Alle enthaltenen Dokumente werden ebenfalls gelöscht.")
                if (confirm === true) {

                  this.overlay("security", async securityOverlay => {
                    const del = {}
                    del.url = "/delete/platform/closed/"
                    del.platform = platform.name
                    const res = await this.request("closed/json", del)

                    if (res.status === 200) {
                      alert("Plattform erfolgreich gelöscht..")
                      window.location.reload()
                    } else {
                      alert("Fehler.. Bitte wiederholen.")
                      this.remove("overlay", securityOverlay)
                    }
                  })

                }

              })

            }


          })

        })

      }

    }

    if (event === "platforms/location") {

      parent.innerHTML = ""
      for (let i = 0; i < input.length; i++) {

        const platform = input[i]

        const button = this.render("platform/button", platform, parent)

        button.addEventListener("click", () => {

          this.overlay("toolbox", async overlay => {

            this.add("button/remove-overlay", overlay)

            {
              const content = this.create("info/loading", overlay)

              const ping = {}
              ping.url = "/get/platform-values/location/"
              ping.platform = platform.name
              const res = await this.request("location/json", ping)

              if (res.status === 200) {
                const values = JSON.parse(res.response)
                this.render("platform-values/location", values, content)
              }

            }

          })


        })

      }

    }

    if (event === "source/field-funnel") {
      if (input.authors) parent.authorsField.input.value = input.authors.join(", ")
      if (input.title) parent.titleField.input.value = input.title
      if (input.edition) parent.editionField.input.value = input.edition
      if (input.publisher) parent.publisherField.input.value = input.publisher.join(", ")
      if (input.published) parent.publishedField.input.value = this.convert("millis/yyyy", input.published)
      if (input.isbn) parent.isbnField.input.value = input.isbn.join(", ")
      if (input.weblink) parent.weblinkField.input.value = input.weblink
      if (input.language) parent.languageField.input.value = input.language.join(", ")
      if (input.type) parent.typeField.input.value = input.type
      if (input.keywords) parent.keywordsField.input.value = input.keywords.join(", ")
      if (input.description) parent.descriptionField.input.value = input.description
      if (input.image) parent.imageField.input.value = input.image
    }

    if (event === "field-funnel/div/update-fields") {

      if (input.classList.contains("field-funnel")) {
        parent.innerHTML = ""

        for (let i = 0; i < input.children.length; i++) {
          const field = input.children[i]

          if (field.classList.contains("submit-field-funnel-button")) continue

          if (field.classList.contains("field")) {
            const fieldInput = field.querySelector(".field-input")

            const button = this.create("button/left-right", parent)
            button.left.innerHTML = field.id

            button.right.append(this.convert("input/alias", fieldInput))
            button.addEventListener("click", () => {
              this.overlay("toolbox", overlay => {
                this.add("button/remove-overlay", overlay)
                this.add("button/register-html", overlay)

                const info = this.create("header/info", overlay)
                info.append(this.convert("input/alias", fieldInput))

                const buttons = this.create("div/scrollable", overlay)

                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".id"
                  button.right.innerHTML = "Datenfeld Id aktualisieren"
                  button.onclick = () => {
                    this.overlay("popup", overlay => {
                      this.add("button/register-html", overlay)

                      overlay.info.append(this.convert("input/alias", fieldInput))
                      overlay.info.append(".id")

                      const idField = this.create("field/tag", overlay)
                      idField.label.innerHTML = "Gebe deinem Datenfeld eine Id"
                      idField.input.value = field.id
                      this.verify("input/value", idField.input)
                      idField.input.addEventListener("input", () => {

                        this.verify("input/value", idField.input)

                        const id = idField.input.value

                        if (document.querySelectorAll(`#${id}`).length > 0) {
                          this.setNotValidStyle(idField.input)
                        }

                        if (document.querySelectorAll(`#${id}`).length === 0) {
                          field.setAttribute("id", id)
                          this.render(event, input, parent)
                        }

                      })

                    })
                  }
                }

                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".on-info-click"
                  button.right.innerHTML = "Erweitere dein Datenfeld mit mehr Informationen"
                  button.onclick = () => {
                    this.overlay("popup", overlay => {
                      this.add("button/register-html", overlay)

                      overlay.info.append(this.convert("input/alias", fieldInput))
                      overlay.info.append(".on-info-click")

                      const infoField = this.create("field/textarea", overlay)
                      infoField.label.innerHTML = "Hier kannst du, wenn du möchtest, mehr Informationen zu diesem Datenfeld, als HTML, für deine Nutzer, bereitstellen"
                      infoField.input.style.height = "144px"
                      infoField.input.placeholder = "<div>..</div>"
                      infoField.input.style.fontFamily = "monospace"
                      infoField.input.style.fontSize = "13px"
                      if (field.hasAttribute("on-info-click")) {
                        infoField.input.value = field.getAttribute("on-info-click")
                      }
                      this.verify("input/value", infoField.input)

                      infoField.input.addEventListener("input", () => {
                        field.setAttribute("on-info-click", infoField.input.value)
                        this.create("script/on-info-click-event", document.body)
                      })

                    })
                  }
                }

                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".remove"
                  button.right.innerHTML = "Datenfeld entfernen"
                  button.onclick = () => {
                    try {
                      field.remove()
                      this.render(event, input, parent)
                      this.remove("overlay", overlay)
                      window.alert("Datenfeld erfolgreich entfernt.")
                    } catch (error) {
                      window.alert("Fehler.. Bitte wiederholen.")
                      console.error(error)
                    }
                  }
                }

              })
            })
          }

        }

      }

    }

    if (event === "field-funnel/fields") {

      if (parent === undefined) {
        document.querySelectorAll(".field-funnel-fields").forEach(div => {
          this.render(event, input, div)
        })
      }

      if (parent !== undefined) {
        if (!parent.classList.contains("field-funnel-fields")) {
          parent.classList.add("field-funnel-fields")
        }
      }

      if (parent !== undefined) {
        parent.innerHTML = ""
      }


      if (input.classList.contains("field-funnel")) {

        for (let i = 0; i < input.children.length; i++) {
          const field = input.children[i]

          if (field.classList.contains("submit-field-funnel-button")) continue

          if (field.classList.contains("field")) {
            const fieldInput = field.querySelector(".field-input")


            const button = this.create("button/left-right", parent)
            button.left.innerHTML = field.id

            button.right.append(this.convert("input/alias", fieldInput))
            button.addEventListener("click", () => {
              this.overlay("toolbox", overlay => {
                this.add("button/remove-overlay", overlay)
                this.add("button/register-html", overlay)

                const info = this.create("header/info", overlay)
                info.append(this.convert("input/alias", fieldInput))


                const content = this.create("div/scrollable", overlay)


                field.ok = () => {
                  this.get(event, parent, input)
                  this.remove("overlay", overlay)
                }

                this.get("funnel/field", content, field)






              })
            })
          }

        }





      }

    }

    if (event === "children") {

      if (parent === undefined) {
        if (input.tagName === "BODY") {
          document.querySelectorAll(".body-children").forEach(div => {
            this.render(event, input, div)
          })
        }
      }

      if (input.tagName === "BODY") {
        if (parent !== undefined) {
          if (!parent.classList.contains("body-children")) {
            parent.classList.add("body-children")
          }
        }
      }

      if (parent !== undefined) {
        parent.innerHTML = ""
      }

      childrenLoop: for (let i = 0; i < input.children.length; i++) {
        const child = input.children[i]

        if (child.id === "toolbox") continue
        if (child.id === "toolbox-getter") continue
        if (child.getAttribute("data-id") === "toolbox") continue
        if (child.classList.contains("overlay")) continue

        for (let i = 0; i < child.classList.length; i++) {
          if (child.classList[i].startsWith("overlay")) continue childrenLoop
        }

        const button = this.create("button/left-right", parent)
        const childrenButton = button
        button.left.append(this.convert("element/alias", child))
        button.right.innerHTML = "Element bearbeiten"

        if (child.tagName === "SCRIPT") {
          this.render("left-right/local-script-toggle", child.id, childrenButton)
        }

        button.addEventListener("click", () => {

          this.overlay("toolbox", async overlay => {

            this.add("button/remove-overlay", overlay)

            this.add("button/register-html", overlay)

            const info = this.create("header/info", overlay)

            const elementAlias = this.convert("element/alias", child)
            elementAlias.classList.add("element-alias")

            info.append(elementAlias)

            {
              const buttons = this.create("div/scrollable", overlay)

              if (child.tagName !== "SCRIPT") {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".children"
                button.right.innerHTML = "Element Inhalt"

                button.addEventListener("click", async () => {

                  if (child.children.length > 0) {

                    this.overlay("toolbox", overlay => {

                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(this.convert("text/span", ".children"))

                      const childrenContainer = this.create("div/scrollable", overlay)
                      this.render(event, child, childrenContainer)

                    })

                  } else alert("Das HTML Element ist leer.")

                })

              }

              if (child.tagName === "DIV") {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".creator"
                button.right.innerHTML = "Bearbeite dein Element schnell und einfach"
                button.addEventListener("click", () => {

                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)

                    const save = this.create("button/save", overlay)
                    save.onclick = async () => {
                      await this.remove("element/selected-node", preview)
                      clone.removeAttribute("contenteditable")
                      child.replaceWith(clone.cloneNode(true))
                      this.add("event/register-html")
                    }

                    const info = this.create("header/info", overlay)
                    info.append(this.convert("element/alias", child))
                    info.append(this.convert("text/span", ".clone"))

                    const content = this.create("div", overlay)
                    content.style.height = "100vh"
                    content.style.touchAction = "manipulation"

                    const preview = document.createElement("div")
                    preview.style.height = `${window.innerHeight * 0.4}px`
                    preview.style.overflow = "auto"
                    content.append(preview)

                    const backgroundColor = child.parentElement.style.backgroundColor
                    if (!backgroundColor || backgroundColor === "transparent") {
                      preview.style.backgroundColor = "white"
                    } else {
                      preview.style.backgroundColor = backgroundColor
                    }

                    const clone = child.cloneNode(true)
                    clone.setAttribute("contenteditable", "true")
                    preview.append(clone)

                    let selectedNode = clone


                    preview.addEventListener("keydown", ev => {
                      if (ev.metaKey && ev.key === 'c') {
                        ev.preventDefault()
                        if (selectedNode) {
                          this.convert("text/clipboard", selectedNode.outerHTML).then(() => window.alert("Dein HTML Element wurde erfolgreich in die Zwischenablage gespeichert."))
                        }
                      }
                    })

                    preview.addEventListener("keydown", ev => {
                      if (ev.metaKey && ev.key === 'v') {
                        ev.preventDefault()
                        if (selectedNode) {
                          this.convert("clipboard/text").then(text => {
                            const node = this.convert("text/node", text)
                            selectedNode.append(node)
                          })
                        }
                      }
                    })

                    let rememberSelectedNodes = []
                    preview.addEventListener("keydown", ev => {
                      if (ev.metaKey && ev.key === 'Backspace') {
                        ev.preventDefault()
                        if (selectedNode) {
                          rememberSelectedNodes.push({ node: selectedNode, parent: selectedNode.parentElement, index: Array.from(selectedNode.parentElement.children).indexOf(selectedNode)})
                          selectedNode.remove()
                        }
                      }
                    })

                    preview.addEventListener("keydown", ev => {
                      if (ev.metaKey && ev.key === 'z') {
                        ev.preventDefault()
                        if (selectedNode) {
                          if (rememberSelectedNodes.length > 0) {
                            const { node, parent, index } = rememberSelectedNodes.pop()
                            const children = Array.from(parent.children)
                            if (index >= 0 && index < children.length) {
                              parent.insertBefore(node, children[index])
                            } else {
                              parent.appendChild(node)
                            }
                          }

                        }
                      }
                    })

                    selectedNode.onclick = async (ev) => {
                      ev.preventDefault()
                      ev.stopPropagation()
                      await this.remove("element/selected-node", preview)
                      selectedNode = clone
                      this.add("element/selected-node", selectedNode)
                    }

                    preview.onclick = async (ev) => {
                      ev.preventDefault()
                      ev.stopPropagation()
                      await this.remove("element/selected-node", preview)
                      selectedNode = clone
                    }

                    for (let i = 0; i < clone.children.length; i++) {
                      const cloneChild = clone.children[i]

                      this.add("event/dbltouch", {node: cloneChild, callback: async ev => {
                        ev.preventDefault()
                        ev.stopPropagation()
                        await this.remove("element/selected-node", preview)
                        selectedNode = ev.target.parentElement
                        this.add("element/selected-node", selectedNode)
                      }})

                      cloneChild.ondblclick = async (ev) => {
                        ev.preventDefault()
                        ev.stopPropagation()
                        await this.remove("element/selected-node", preview)
                        selectedNode = ev.target.parentElement
                        this.add("element/selected-node", selectedNode)
                      }

                      cloneChild.onclick = async (ev) => {
                        ev.preventDefault()
                        ev.stopPropagation()

                        if (ev.target.hasAttribute("selected-node")) {
                          await this.remove("element/selected-node", preview)
                          selectedNode = clone
                          this.add("element/selected-node", selectedNode)
                        } else {
                          await this.remove("element/selected-node", preview)
                          selectedNode = ev.target
                          this.add("element/selected-node", selectedNode)
                        }

                      }

                    }

                    const observer = new MutationObserver((mutationsList) => {
                      mutationsList.forEach((mutation) => {
                        if (mutation.type === "childList" && mutation.addedNodes.length > 0) {

                          mutation.addedNodes.forEach(async (node) => {

                            if (node.nodeType === Node.ELEMENT_NODE) {


                              this.add("event/dbltouch", {node: node, callback: async ev => {
                                ev.preventDefault()
                                ev.stopPropagation()
                                await this.remove("element/selected-node", preview)
                                selectedNode = ev.target.parentElement
                                this.add("element/selected-node", selectedNode)
                              }})

                              node.ondblclick = async (ev) => {
                                ev.preventDefault()
                                ev.stopPropagation()
                                await this.remove("element/selected-node", preview)
                                selectedNode = ev.target.parentElement
                                this.add("element/selected-node", selectedNode)
                              }

                              node.onclick = async (ev) => {
                                ev.preventDefault()
                                ev.stopPropagation()

                                if (ev.target.hasAttribute("selected-node")) {
                                  await this.remove("element/selected-node", preview)
                                  selectedNode = clone
                                  this.add("element/selected-node", selectedNode)
                                } else {
                                  await this.remove("element/selected-node", preview)
                                  selectedNode = ev.target
                                  this.add("element/selected-node", selectedNode)
                                }

                              }

                            }
                          })
                        }
                      })
                    })
                    observer.observe(selectedNode, { childList: true, subtree: true })

                    const buttons = this.create("fn/algo", {algo: "creator-buttons", parent: content})()
                    const toggleStyle = this.create("fn/algo", {algo: "toggleStyle"})
                    const toggleStyles = this.create("fn/algo", {algo: "toggleStyles"})
                    const toggleNodeAndChildrenStyles = this.create("fn/algo", {algo: "toggleNodeAndChildrenStyles"})
                    const setStyleWithPrompt = this.create("fn/algo", {algo: "setStyleWithPrompt"})
                    const incrementStyle = this.create("fn/algo", {algo: "incrementStyle"})
                    const decrementStyle = this.create("fn/algo", {algo: "decrementStyle"})
                    const fixedGridPrompt = this.create("fn/algo", {algo: "fixedGridPrompt"})
                    const rotateNode = this.create("fn/algo", {algo: "rotateNode"})
                    const appendUnorderedListItem = this.create("fn/algo", {algo: "appendUnorderedListItem"})
                    const appendOrderedListItem = this.create("fn/algo", {algo: "appendOrderedListItem"})
                    const toggleAttribute = this.create("fn/algo", {algo: "toggleAttribute"})
                    const toggleInnerHtml = this.create("fn/algo", {algo: "toggleInnerHtml"})
                    const toggleNode = this.create("fn/algo", {algo: "toggleNode"})
                    const setChildrenStyleWithPrompt = this.create("fn/algo", {algo: "setChildrenStyleWithPrompt"})
                    const appendAllSvgIcons = this.create("fn/algo", {algo: "appendAllSvgIcons"})
                    const openLayerOverlay = this.create("fn/algo", {algo: "openLayerOverlay"})

                    buttons.createFlexButton.onclick = () => this.handle("onclick", {onclick: "create/div/flex-width-prompt/node", node: selectedNode})
                    buttons.wrapButton.onclick = () => this.handle("onclick", {onclick: "create/div/flex-matrix-prompt/node", node: selectedNode})
                    buttons.createGridButton.onclick = () => this.handle("onclick", {onclick: "create/div/grid-matrix-prompt/node", node: selectedNode})
                    buttons.rowContainerButton.onclick = () => this.handle("onclick", {onclick: "create/div/flex-row/node", node: selectedNode})
                    buttons.columnContainerButton.onclick = () => this.handle("onclick", {onclick: "create/div/flex-column/node", node: selectedNode})
                    buttons.imageTextButton.onclick = () => this.handle("onclick", {onclick: "create/div/image-text/node", node: selectedNode})
                    buttons.keyValueButton.onclick = () => this.handle("onclick", {onclick: "create/div/key-value/node", node: selectedNode})
                    buttons.actionBtnButton.onclick = () => this.handle("onclick", {onclick: "create/div/action-button/node", node: selectedNode})
                    buttons.horizontalHrButton.onclick = () => this.handle("onclick", {onclick: "create/div/hr/node", node: selectedNode})
                    buttons.simpleHeaderButton.onclick = () => this.handle("onclick", {onclick: "create/header/left-image/node", node: selectedNode})
                    buttons.h1Button.onclick = () => this.handle("onclick", {onclick: "create/h1/inner-html-prompt/node", node: selectedNode})
                    buttons.h2Button.onclick = () => this.handle("onclick", {onclick: "create/h2/inner-html-prompt/node", node: selectedNode})
                    buttons.h3Button.onclick = () => this.handle("onclick", {onclick: "create/h3/inner-html-prompt/node", node: selectedNode})
                    buttons.pButton.onclick = () => this.handle("onclick", {onclick: "create/p/inner-html-prompt/node", node: selectedNode})
                    buttons.imageButton.onclick = () => this.handle("onclick", {onclick: "create/img/placeholder/node", node: selectedNode})
                    buttons.tableHeaderButton.onclick = () => this.handle("onclick", {onclick: "create/table/matrix-prompt/node", node: selectedNode})
                    buttons.pdfLinkButton.onclick = async () => await this.handle("onclick", {onclick: "create/a/pdf-image-text-link-prompt/node", node: selectedNode})
                    buttons.aLinkButton.onclick = () => this.handle("onclick", {onclick: "create/a/link-prompt/node", node: selectedNode})
                    buttons.spanButton.onclick = () => this.handle("onclick", {onclick: "create/span/fill-text-content/node", node: selectedNode})
                    buttons.changeSiButton.onclick = () => this.handle("onclick", {onclick: "create/span/si-prompt/node", node: selectedNode})
                    buttons.addSpaceButton.onclick = () => this.handle("onclick", {onclick: "create/div/space-height-prompt/node", node: selectedNode})
                    buttons.arrowRightButton.onclick = () => this.handle("onclick", {onclick: "create/div/arrow-right-color-prompt/node", node: selectedNode})
                    buttons.divScrollableButton.onclick = () => this.handle("onclick", {onclick: "create/div/scrollable-y/node", node: selectedNode})
                    buttons.packDivButton.onclick = () => this.handle("onclick", {onclick: "create/div/pack-outer/node", node: selectedNode})
                    buttons.textInputButton.onclick = () => this.handle("onclick", {onclick: "create/input/text/node", node: selectedNode})
                    buttons.numberInputButton.onclick = () => this.handle("onclick", {onclick: "create/input/tel/node", node: selectedNode})
                    buttons.checkboxInputButton.onclick = () => this.handle("onclick", {onclick: "create/input/checkbox/node", node: selectedNode})
                    buttons.passwordInputButton.onclick = () => this.handle("onclick", {onclick: "create/input/password/node", node: selectedNode})
                    buttons.selectInputButton.onclick = () => this.handle("onclick", {onclick: "create/input/select/node", node: selectedNode})
                    buttons.growWidthButton.onclick = () => toggleStyle({key: "width", value: "100%", node: selectedNode})
                    buttons.maxWidthButton.onclick = () => setStyleWithPrompt({key: "maxWidth", node: selectedNode, message: "Gebe die maximale Breite deines Elements ein: (z.B., 900px)"})
                    buttons.minWidthButton.onclick = () => setStyleWithPrompt({key: "minWidth", node: selectedNode, message: "Gebe die minimale Breite deines Elements ein: (z.B., 300px)"})
                    buttons.exactWidthButton.onclick = () => setStyleWithPrompt({key: "width", node: selectedNode, message: "Gebe die exakte Breite deines Elements ein: (z.B., 350px)"})
                    buttons.increaseWidthButton.onclick = () => incrementStyle({key: "width", node: selectedNode, delta: 1})
                    buttons.decreaseWidthButton.onclick = () => decrementStyle({key: "width", node: selectedNode, delta: 1})
                    buttons.growHeightButton.onclick = () => toggleStyle({key: "height", value: "100%", node: selectedNode})
                    buttons.maxHeightButton.onclick = () => setStyleWithPrompt({key: "maxHeight", node: selectedNode, message: "Gebe die maximale Höhe deines Elements ein: (z.B., 89vh)"})
                    buttons.minHeightButton.onclick = () => setStyleWithPrompt({key: "minHeight", node: selectedNode, message: "Gebe die minimale Höhe deines Elements ein: (z.B., 21px)"})
                    buttons.exactHeightButton.onclick = () => setStyleWithPrompt({key: "height", node: selectedNode, message: "Gebe die exakte Höhe deines Elements ein: (z.B., 21vh)"})
                    buttons.increaseHeightButton.onclick = () => incrementStyle({key: "height", node: selectedNode, delta: 1})
                    buttons.decreaseHeightButton.onclick = () => decrementStyle({key: "height", node: selectedNode, delta: 1})
                    buttons.exactDisplayButton.onclick = () => setStyleWithPrompt({key: "display", node: selectedNode, message: "Gebe den exakten Display Wert ein: (z.B., flex)"})
                    buttons.displayBlockButton.onclick = () => toggleStyle({key: "display", value: "block", node: selectedNode})
                    buttons.displayInlineButton.onclick = () => toggleStyle({key: "display", value: "inline", node: selectedNode})
                    buttons.toggleDisplayGridButton.onclick = () => toggleStyle({key: "display", value: "grid", node: selectedNode})
                    buttons.toggleDisplayFlexButton.onclick = () => toggleStyle({key: "display", value: "flex", node: selectedNode})
                    buttons.toggleDisplayTableButton.onclick = () => toggleStyle({key: "display", value: "table", node: selectedNode})
                    buttons.gridMobileButton.onclick = () => toggleStyles({styles: {display: "grid", gridTemplateColumns: "1fr", gridGap: "21px"}, node: selectedNode})
                    buttons.gridFullDisplayButton.onclick = () => toggleNodeAndChildrenStyles({nodeStyle: {display: "grid", gridTemplateColumns: "1fr", gridGap: "21px"}, childrenStyle: {height: "89vh"}, node: selectedNode})
                    buttons.gridTwoColumnsButton.onclick = () => toggleNodeAndChildrenStyles({nodeStyle: {display: "grid", gridTemplateColumns: "1fr 1fr", gridGap: "21px"}, childrenStyle: {height: "89vh"}, node: selectedNode})
                    buttons.gridThreeColumnsButton.onclick = () => toggleNodeAndChildrenStyles({nodeStyle: {display: "grid", gridTemplateColumns: "1fr 1fr 1fr", gridGap: "21px"}, childrenStyle: {height: "89vh"}, node: selectedNode})
                    buttons.gridFixedButton.onclick = () => fixedGridPrompt({node: selectedNode})
                    buttons.gridListRowsButton.onclick = () => toggleNodeAndChildrenStyles({nodeStyle: {display: "grid", gridTemplateColumns: "89px 1fr", gridTemplateRows: `repeat(auto-fit, 55px)`, gridGap: "21px"}, childrenStyle: {height: "55px"}, node: selectedNode})
                    buttons.gridSpanColumnButton.onclick = () => this.handle("onclick", {onclick: "convert/style/grid-column-prompt/node", node: selectedNode})
                    buttons.gridSpanRowButton.onclick = () => this.handle("onclick", {onclick: "convert/style/grid-row-prompt/node", node: selectedNode})
                    buttons.exactGridGapButton.onclick = () => setStyleWithPrompt({key: "gap", node: selectedNode, message: "Gebe den exakten Abstand zwischen deinen Grid Elementen ein: (z.B., 13px)"})
                    buttons.gridAddColumnButton.onclick = () => this.create("fn/algo", {algo: "addGridColumn"})({node: selectedNode})
                    buttons.gridRemoveColumnButton.onclick = () => this.create("fn/algo", {algo: "removeGridColumn"})({node: selectedNode})
                    buttons.gridAddRowButton.onclick = () => this.create("fn/algo", {algo: "addGridRow"})({node: selectedNode})
                    buttons.gridRemoveRowButton.onclick = () => this.create("fn/algo", {algo: "removeGridRow"})({node: selectedNode})
                    buttons.alignColumnButton.onclick = () => toggleStyles({styles: {display: "flex", flexDirection: "column", flexWrap: null}, node: selectedNode})
                    buttons.alignLeftButton.onclick = () => toggleStyles({styles: {display: "flex", justifyContent: "flex-start"}, node: selectedNode})
                    buttons.alignCenterButton.onclick = () => toggleStyles({styles: {display: "flex", justifyContent: "center"}, node: selectedNode})
                    buttons.alignRightButton.onclick = () => toggleStyles({styles: {display: "flex", justifyContent: "flex-end"}, node: selectedNode})
                    buttons.alignRowButton.onclick = () => toggleStyles({styles: {display: "flex", flexDirection: null, flexWrap: "wrap"}, node: selectedNode})
                    buttons.alignTopButton.onclick = () => toggleStyles({styles: {display: "flex", alignItems: "flex-start"}, node: selectedNode})
                    buttons.alignVerticalButton.onclick = () => toggleStyles({styles: {display: "flex", alignItems: "center"}, node: selectedNode})
                    buttons.alignBottomButton.onclick = () => toggleStyles({styles: {display: "flex", alignItems: "flex-end"}, node: selectedNode})
                    buttons.flexButton.onclick = () => setStyleWithPrompt({key: "flex", node: selectedNode, message: "Gebe die Flex Matrix für dein Element ein: (z.B., 1 1 55px)"})
                    buttons.spaceBetweenButton.onclick = () => toggleStyles({styles: {display: "flex", flexWrap: "wrap", justifyContent: "space-between"}, node: selectedNode})
                    buttons.spaceAroundButton.onclick = () => toggleStyles({styles: {display: "flex", flexWrap: "wrap", justifyContent: "space-around"}, node: selectedNode})
                    buttons.toggleWrapButton.onclick = () => toggleStyles({styles: {display: "flex", flexWrap: "wrap"}, node: selectedNode})
                    const onLayerClick = async layer => {
                      await this.remove("element/selected-node", preview)
                      selectedNode = layer
                      this.add("selected/node", layer)
                    }
                    buttons.layerButton.onclick = () => openLayerOverlay(onLayerClick, selectedNode)
                    buttons.positiveLayerButton.onclick = () => this.create("fn/algo", {algo: "addLayerAbove"})({node: selectedNode})
                    buttons.negativeLayerButton.onclick = () => this.create("fn/algo", {algo: "addLayerBelow"})({node: selectedNode})
                    buttons.exactLayerButton.onclick = async () => this.create("fn/algo", {algo: "addLayerPrompt"})({node: selectedNode})
                    buttons.removeLayerButton.onclick = () => this.create("fn/algo", {algo: "removeAllLayer"})({node: selectedNode})
                    buttons.positionAbsoluteButton.onclick = () => toggleStyle({key: "position", value: "absolute", node: selectedNode})
                    buttons.positionTopButton.onclick = () => setStyleWithPrompt({key: "top", node: selectedNode, message: "Geben den exakten Abstand nach oben ein: (z.B., 300px)"})
                    buttons.positionRightButton.onclick = () => setStyleWithPrompt({key: "right", node: selectedNode, message: "Geben den exakten Abstand nach rechts ein: (z.B., 300px)"})
                    buttons.positionBottomButton.onclick = () => setStyleWithPrompt({key: "bottom", node: selectedNode, message: "Geben den exakten Abstand nach unten ein: (z.B., 300px)"})
                    buttons.positionLeftButton.onclick = () => setStyleWithPrompt({key: "left", node: selectedNode, message: "Geben den exakten Abstand nach links ein: (z.B., 300px)"})
                    buttons.transformTranslateButton.onclick = () => this.create("fn/algo", {algo: "translateWithPrompt"})({node: selectedNode, message: "Gebe den X und Y Wert ein und bewege dein Element in die gewünschte Richtung: (z.B., (21px, -34px))"})
                    buttons.transformTranslateXButton.onclick = () => this.create("fn/algo", {algo: "translateXWithPrompt"})({node: selectedNode, message: "Gebe den X-Wert ein und bewege dein Element in die gewünschte Richtung: (z.B., 34px)"})
                    buttons.transformTranslateYButton.onclick = () => this.create("fn/algo", {algo: "translateYWithPrompt"})({node: selectedNode, message: "Gebe den Y-Wert ein und bewege dein Element in die gewünschte Richtung: (z.B., -34px)"})
                    buttons.zIndexButton.onclick = () => setStyleWithPrompt({key: "zIndex", node: selectedNode, message: "Gebe deinen Z-Index ein: (z.B., -1)"})
                    buttons.scaleButton.onclick = () => this.create("fn/algo", {algo: "scaleWithPrompt"})({node: selectedNode, message: "Gebe die Höhe deiner Skalierung ein: (z.B., 2)"})
                    buttons.rotateRightButton.onclick = () => rotateNode({degree: 90, node: selectedNode})
                    buttons.exactRotateRightButton.onclick = () => this.create("fn/algo", {algo: "rotateNodeRightWithPrompt"})({message: "Gebe den exakten Winkel für deine Rotation, nach rechts, ein: (z.B., 45)", node: selectedNode})
                    buttons.rotateLeftButton.onclick = () => rotateNode({degree: -90, node: selectedNode})
                    buttons.exactRotateLeftButton.onclick = () => this.create("fn/algo", {algo: "rotateNodeLeftWithPrompt"})({message: "Gebe den exakten Winkel für deine Rotation, nach links, ein: (z.B., 45)", node: selectedNode})
                    buttons.whiteSpaceNoWrapButton.onclick = () => toggleStyle({key: "whiteSpace", value: "nowrap", node: selectedNode})
                    buttons.fontFamilyButton.onclick = () => toggleStyle({key: "fontFamily", value: "sans-serif", node: selectedNode})
                    buttons.fontWeightNormalButton.onclick = () => toggleStyle({key: "fontWeight", value: "normal", node: selectedNode})
                    buttons.fontWeightButton.onclick = () => toggleStyle({key: "fontWeight", value: "bold", node: selectedNode})
                    buttons.fontStyleButton.onclick = () => toggleStyle({key: "fontStyle", value: "italic", node: selectedNode})
                    buttons.textDecorationButton.onclick = () => toggleStyle({key: "textDecoration", value: "underline", node: selectedNode})
                    buttons.fontSizeButton.onclick = () => setStyleWithPrompt({key: "fontSize", node: selectedNode, message: "Gebe deine Schriftgröße ein: (z.B., 34px)"})
                    buttons.fontColorButton.onclick = () => setStyleWithPrompt({key: "color", node: selectedNode, message: "Gebe deine Schriftfarbe ein: (z.B., (#888, grey, rgb(88, 88, 88), rgba(0, 0, 0, 0.5)))"})
                    buttons.fontColorButton.onclick = () => setStyleWithPrompt({key: "backgroundColor", node: selectedNode, message: "Gebe deine Hintergrundfarbe ein: (z.B., (#888, grey, rgb(88, 88, 88), rgba(0, 0, 0, 0.5)))"})
                    buttons.unorderedListButton.onclick = () => appendUnorderedListItem({node: selectedNode})
                    buttons.orderedListButton.onclick = () => appendOrderedListItem({node: selectedNode})
                    buttons.lineHeightButton.onclick = () => setStyleWithPrompt({key: "lineHeight", node: selectedNode, message: "Gebe die exakte Linien Höhe ein: (z.B., 1.8)"})
                    buttons.sourcesButton.onclick = () => this.create("fn/algo", {algo: "openSourcesOverlay", node: selectedNode})
                    buttons.overflowYButton.onclick = () => toggleStyle({key: "overflowY", value: "auto", node: selectedNode})
                    buttons.overflowXButton.onclick = () => toggleStyle({key: "overflowX", value: "auto", node: selectedNode})
                    buttons.toggleDisplayNoneButton.onclick = () => toggleStyle({key: "display", value: "none", node: selectedNode})
                    buttons.toggleVisibilityHiddenButton.onclick = () => toggleStyle({key: "visibility", value: "hidden", node: selectedNode})
                    buttons.exactOpacityButton.onclick = () => this.create("fn/algo", {algo: "addOpacityWithPrompt", node: selectedNode})
                    buttons.toggleMarginButton.onclick = () => toggleStyle({key: "margin", value: "21px 34px", node: selectedNode})
                    buttons.toggleMarginTopButton.onclick = () => toggleStyle({key: "marginTop", value: "21px", node: selectedNode})
                    buttons.toggleMarginRightButton.onclick = () => toggleStyle({key: "marginRight", value: "34px", node: selectedNode})
                    buttons.toggleMarginTopButton.onclick = () => toggleStyle({key: "marginBottom", value: "21px", node: selectedNode})
                    buttons.toggleMarginLeftButton.onclick = () => toggleStyle({key: "marginLeft", value: "34px", node: selectedNode})
                    buttons.exactMarginButton.onclick = () => setStyleWithPrompt({key: "margin", node: selectedNode, message: "Gebe den exakten Außenabstand ein: (z.B., 21px 34px 13px 144px)"})
                    buttons.exactMarginTopButton.onclick = () => setStyleWithPrompt({key: "marginTop", node: selectedNode, message: "Gebe den exakten Außenabstand nach oben ein: (z.B., 21px)"})
                    buttons.exactMarginRightButton.onclick = () => setStyleWithPrompt({key: "marginRight", node: selectedNode, message: "Gebe den exakten Außenabstand nach rechts ein: (z.B., 21px)"})
                    buttons.exactMarginBottomButton.onclick = () => setStyleWithPrompt({key: "marginRight", node: selectedNode, message: "Gebe den exakten Außenabstand nach unten ein: (z.B., 21px)"})
                    buttons.exactMarginLeftButton.onclick = () => setStyleWithPrompt({key: "marginLeft", node: selectedNode, message: "Gebe den exakten Außenabstand nach links ein: (z.B., 21px)"})
                    buttons.togglePaddingButton.onclick = () => toggleStyle({key: "padding", value: "21px 34px", node: selectedNode})
                    buttons.togglePaddingTopButton.onclick = () => toggleStyle({key: "paddingTop", value: "21px", node: selectedNode})
                    buttons.togglePaddingRightButton.onclick = () => toggleStyle({key: "paddingRight", value: "34px", node: selectedNode})
                    buttons.togglePaddingBottomButton.onclick = () => toggleStyle({key: "paddingBottom", value: "21px", node: selectedNode})
                    buttons.togglePaddingLeftButton.onclick = () => toggleStyle({key: "paddingLeft", value: "34px", node: selectedNode})
                    buttons.exactPaddingButton.onclick = () => setStyleWithPrompt({key: "padding", node: selectedNode, message: "Gebe den exakten Innenabstand ein: (z.B., 21px 34px 13px 144px)"})
                    buttons.exactPaddingTopButton.onclick = () => setStyleWithPrompt({key: "paddingTop", node: selectedNode, message: "Gebe den exakten Innenabstand nach oben ein: (z.B., 21px)"})
                    buttons.exactPaddingRightButton.onclick = () => setStyleWithPrompt({key: "paddingRight", node: selectedNode, message: "Gebe den exakten Innenabstand nach rechts ein: (z.B., 21px)"})
                    buttons.exactPaddingBottomButton.onclick = () => setStyleWithPrompt({key: "paddingRight", node: selectedNode, message: "Gebe den exakten Innenabstand nach unten ein: (z.B., 21px)"})
                    buttons.exactPaddingLeftButton.onclick = () => setStyleWithPrompt({key: "paddingLeft", node: selectedNode, message: "Gebe den exakten Innenabstand nach links ein: (z.B., 21px)"})
                    buttons.toggleBorderButton.onclick = () => toggleStyle({key: "border", value: "1px solid black", node: selectedNode})
                    buttons.toggleBorderTopButton.onclick = () => toggleStyle({key: "borderTop", value: "1px solid black", node: selectedNode})
                    buttons.toggleBorderRightButton.onclick = () => toggleStyle({key: "borderTop", value: "1px solid black", node: selectedNode})
                    buttons.toggleBorderBottomButton.onclick = () => toggleStyle({key: "borderBottom", value: "1px solid black", node: selectedNode})
                    buttons.toggleBorderLeftButton.onclick = () => toggleStyle({key: "borderLeft", value: "1px solid black", node: selectedNode})
                    buttons.exactBorderButton.onclick = () => setStyleWithPrompt({key: "border", node: selectedNode, message: "Gebe die exakten Grenzlinien ein: (z.B., 3px solid red)"})
                    buttons.exactBorderTopButton.onclick = () => setStyleWithPrompt({key: "borderTop", node: selectedNode, message: "Gebe die exakten Grenzlinien nach oben ein: (z.B., 3px solid red)"})
                    buttons.exactBorderRightButton.onclick = () => setStyleWithPrompt({key: "borderRight", node: selectedNode, message: "Gebe die exakten Grenzlinien nach rechts ein: (z.B., 3px solid red)"})
                    buttons.exactBorderBottomButton.onclick = () => setStyleWithPrompt({key: "borderBottom", node: selectedNode, message: "Gebe die exakten Grenzlinien nach unten ein: (z.B., 3px solid red)"})
                    buttons.exactBorderLeftButton.onclick = () => setStyleWithPrompt({key: "borderLeft", node: selectedNode, message: "Gebe die exakten Grenzlinien nach links ein: (z.B., 3px solid red)"})
                    buttons.toggleBorderRadiusButton.onclick = () => toggleStyle({key: "borderRadius", value: "3px", node: selectedNode})
                    buttons.toggleBorderTopLeftRadiusButton.onclick = () => toggleStyle({key: "borderTopLeftRadius", value: "3px", node: selectedNode})
                    buttons.toggleBorderTopRightRadiusButton.onclick = () => toggleStyle({key: "borderTopRightRadius", value: "3px", node: selectedNode})
                    buttons.toggleBorderBottomRightRadiusButton.onclick = () => toggleStyle({key: "borderBottomRightRadius", value: "3px", node: selectedNode})
                    buttons.toggleBorderBottomLeftRadiusButton.onclick = () => toggleStyle({key: "borderBottomLeftRadius", value: "3px", node: selectedNode})
                    buttons.exactBorderRadiusButton.onclick = () => setStyleWithPrompt({key: "borderRadius", node: selectedNode, message: "Gebe den exakten Radius, für alle Ecken, ein: (z.B. 13px)"})
                    buttons.exactBorderTopLeftRadiusButton.onclick = () => setStyleWithPrompt({key: "borderTopLeftRadius", node: selectedNode, message: "Gebe den exakten Radius, für die Ecke Oben-Links, ein: (z.B., 13px)"})
                    buttons.exactBorderTopRightRadiusButton.onclick = () => setStyleWithPrompt({key: "borderTopRightRadius", node: selectedNode, message: "Gebe den exakten Radius, für die Ecke Oben-Rechts, ein: (z.B., 13px)"})
                    buttons.exactBorderBottomLeftRadiusButton.onclick = () => setStyleWithPrompt({key: "borderBottomRightRadius", node: selectedNode, message: "Gebe den exakten Radius, für die Ecke Unten-Links, ein: (z.B., 13px)"})
                    buttons.exactBorderBottomRightRadiusButton.onclick = () => setStyleWithPrompt({key: "borderBottomLeftRadius", node: selectedNode, message: "Gebe den exakten Radius, für die Ecke Unten-Rechts, ein: (z.B., 13px)"})
                    buttons.toggleBorderNoneButton.onclick = () => toggleStyle({key: "border", value: "none", node: selectedNode})
                    buttons.boxButton.onclick = () => toggleStyles({styles: {margin: "21px 34px", padding: "8px", borderRadius: "3px", boxShadow: "rgba(0, 0, 0, 0.13) 0px 1px 3px"}, node: selectedNode})
                    buttons.exactBoxShadowButton.onclick = () => setStyleWithPrompt({key: "boxShadow", node: selectedNode, message: "Geben den exakten Schatten ein: (z.B., rgba(0, 0, 0, 0.13) 0px 1px 3px)"})
                    buttons.mediaQueriesOverviewButton.onclick = () => this.create("fn/algo", {algo: "openMediaQueriesOverlay", node: selectedNode})
                    buttons.largeDeviceButton.onclick = async () => this.create("fn/algo", {algo: "addLargeStyle", node: selectedNode})
                    buttons.middleDeviceButton.onclick = async () => this.create("fn/algo", {algo: "addMiddleStyle", node: selectedNode})
                    buttons.smallDeviceButton.onclick = async () => this.create("fn/algo", {algo: "addSmallStyle", node: selectedNode})
                    buttons.printerDeviceButton.onclick = async () => this.create("fn/algo", {algo: "addPrinterStyle", node: selectedNode})

                    let rememberCuttedNodes = []
                    buttons.insertAfterButton.onclick = async () => this.create("fn/algo", {algo: "insertAfter", node: selectedNode, cache: rememberCuttedNodes})
                    buttons.insertBeforeButton.onclick = async () => this.create("fn/algo", {algo: "insertBefore", node: selectedNode, cache: rememberCuttedNodes})
                    buttons.insertLeftButton.onclick = async () => this.create("fn/algo", {algo: "insertLeft", node: selectedNode, cache: rememberCuttedNodes})
                    buttons.insertRightButton.onclick = async () => this.create("fn/algo", {algo: "insertRight", node: selectedNode, cache: rememberCuttedNodes})
                    buttons.cutOuterHtmlButton.onclick = () => {
                      if (selectedNode) {
                        rememberCuttedNodes.push({ node: selectedNode, parent: selectedNode.parentElement, index: this.convert("node/index", selectedNode)})
                        selectedNode.remove()
                      }
                    }
                    buttons.copyOuterHtmlButton.onclick = () => this.create("fn/algo", {algo: "addOuterHtmlToClipboard", node: selectedNode})
                    buttons.pasteOuterHtmlButton.onclick = () => this.create("fn/algo", {algo: "appendClipboardToNode", node: selectedNode})
                    buttons.copyStyleButton.onclick = () => this.create("fn/algo", {algo: "addStyleToClipboard", node: selectedNode})
                    buttons.pasteStyleButton.onclick = () => this.create("fn/algo", {algo: "addClipboardToStyle", node: selectedNode})
                    buttons.removeStyleButton.onclick = () => toggleAttribute("style", selectedNode)
                    buttons.removeInnerButton.onclick = () => toggleInnerHtml(selectedNode)
                    buttons.removeInnerWithTextButton.onclick = () => this.create("fn/algo", {algo: "replaceInnerHtmlWithPrompt", node: selectedNode})
                    buttons.removeNodeButton.onclick = () => toggleNode(selectedNode)
                    buttons.idButton.onclick = () => this.create("fn/algo", {algo: "setIdWithPrompt", node: selectedNode})
                    buttons.addClassButton.onclick = () => this.create("fn/algo", {algo: "setClassWithPrompt", node: selectedNode})
                    buttons.setAttributeButton.onclick = () => this.create("fn/algo", {algo: "setAttributeWithPrompt", node: selectedNode})
                    // scripts can be sent to closure
                    buttons.addScriptButton.onclick = () => this.create("fn/algo", {algo: "openScriptsOverlay"})
                    buttons.appendStyleButton.onclick = () => this.create("fn/algo", {algo: "appendStyleWithPrompt", node: selectedNode})
                    buttons.templatesButton.onclick = () => this.create("fn/algo", {algo: "openTemplatesOverlay", node: selectedNode})
                    buttons.fontSizeForEachChildButton.onclick = () => setChildrenStyleWithPrompt("fontSize", selectedNode, "Gebe die Schriftgrüße für alle Kind Elemente: (z.B., 21px)")

                    await appendAllSvgIcons(buttons.svgPickerOptions, icon => {
                      icon.style.width = "34px"
                      selectedNode.append(icon.cloneNode(true))
                    })

                  })

                })

              }

              if (child.classList.contains("field-funnel")) {

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".fields"
                  button.right.innerHTML = "Datenfelder anhängen"
                  button.addEventListener("click", () => {

                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(this.convert("text/span", ".fields"))

                      {
                        const button = this.create("button/left-right", overlay)
                        button.left.innerHTML = ".append"
                        button.right.innerHTML = "Neues Datenfeld erzeugen"
                        button.addEventListener("click", () => {

                          this.overlay("toolbox", overlay => {
                            this.add("button/remove-overlay", overlay)
                            this.add("button/register-html", overlay)

                            const info = this.create("header/info", overlay)
                            info.append(this.convert("element/alias", child))
                            info.append(this.convert("text/span", ".append"))

                            const funnel = this.create("div/scrollable", overlay)

                            const idField = this.create("field/tag", funnel)
                            idField.label.innerHTML = "Gebe deinem Datenfeld eine Id"
                            this.verify("input/value", idField.input)
                            idField.input.addEventListener("input", () => {

                              this.verify("input/value", idField.input)

                              const id = idField.input.value

                              if (document.querySelectorAll(`#${id}`).length > 0) {
                                this.setNotValidStyle(idField.input)
                              }

                            })

                            const labelField = this.create("field/textarea", funnel)
                            labelField.label.innerHTML = "Beschreibe das Datenfeld für dein Netzwerk"
                            labelField.input.setAttribute("required", "true")
                            this.verify("input/value", labelField.input)
                            labelField.input.addEventListener("input", () => this.verify("input/value", labelField.input))

                            const typeField = this.create("field/select", funnel)
                            typeField.label.innerHTML = "Welchen Datentyp soll dein Netzwerk eingeben können"
                            typeField.input.add(["text", "textarea", "email", "tel", "range", "password", "number", "file", "date", "checkbox", "select"])
                            this.verify("input/value", typeField.input)

                            const button = this.create("button/action", funnel)
                            button.innerHTML = "Datenfeld jetzt anhängen"
                            button.addEventListener("click", async () => {

                              await this.verify("field-funnel", funnel)

                              const id = idField.input.value
                              const label = labelField.input.value
                              const type = typeField.input.value

                              if (document.querySelectorAll(`#${id}`).length !== 0) {
                                window.alert("Id existiert bereits.")
                                idField.scrollIntoView({behavior: "smooth"})
                                this.setNotValidStyle(idField.input)
                                throw new Error("id exist")
                              }

                              if (document.getElementById(id) === null) {

                                const field = this.convert("text/field", type)
                                field.id = id
                                field.label.textContent = label

                                child.querySelector(".submit-field-funnel-button").before(field)

                                this.render("field-funnel/div/update-fields", child, fieldsContainer)

                                this.remove("overlay", overlay)

                              }

                            })

                          })

                        })
                      }

                      this.render("text/hr", "Meine Datenfelder", overlay)

                      const fieldsContainer = this.create("div/scrollable", overlay)
                      this.render("field-funnel/div/update-fields", child, fieldsContainer)

                    })

                  })

                }

                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".next-path"
                  button.right.innerHTML = "Nach Abschluss, zur Werteinheit"
                  button.addEventListener("click", () => {
                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(this.convert("text/span", ".next-path"))

                      const content = this.create("div/scrollable", overlay)

                      const pathField = this.create("field/text", content)
                      pathField.input.placeholder = "/mein/pfad/"
                      pathField.input.setAttribute("required", "true")
                      pathField.label.textContent = "https://www.get-your.de"
                      if (child.hasAttribute("next-path")) {
                        pathField.input.value = child.getAttribute("next-path")
                          pathField.label.textContent = `https://www.get-your.de${child.getAttribute("next-path")}`
                      }
                      this.verify("input/value", pathField.input)
                      pathField.input.addEventListener("input", (event) => {

                        if (this.verifyIs("text/empty", event.target.value)) {
                          this.setNotValidStyle(event.target)
                          child.removeAttribute("next-path")
                        }

                        if (!this.verifyIs("text/empty", event.target.value)) {
                          this.setValidStyle(event.target)
                          pathField.label.textContent = `https://www.get-your.de${event.target.value}`
                          child.setAttribute("next-path", event.target.value)
                        }

                      })



                    })
                  })
                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".submit-field-funnel-event"
                  button.right.innerHTML = "Field Funnel Submit Skript anhängen"
                  button.addEventListener("click", () => {
                    document.querySelectorAll(`#submit-field-funnel-event`).forEach(script => script.remove())
                    this.create("script/submit-field-funnel-event", document.body)
                    window.alert("Skript wurde erfolgreich angehängt.")
                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".prefill-field-funnel-event"
                  button.right.innerHTML = "Fülle die Datenfelder mit den eigenen Nutzerdaten"
                  button.addEventListener("click", () => {
                    document.querySelectorAll(`#prefill-field-funnel-event`).forEach(script => script.remove())
                    this.create("script/prefill-field-funnel-event", document.body)
                    window.alert("Skript wurde erfolgreich angehängt.")
                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".on-info-click-event"
                  button.right.innerHTML = "Füge ein Info Klick Event hinzu"
                  button.addEventListener("click", () => {
                    document.querySelectorAll(`#on-info-click-event`).forEach(script => script.remove())
                    this.create("script/on-info-click-event", document.body)
                    window.alert("Skript wurde erfolgreich angehängt.")
                  })

                }

              }

              if (child.tagName === "BODY") {

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".scripts"
                  button.right.innerHTML = "Nutze geprüfte HTML Skripte"
                  button.addEventListener("click", () => {

                    this.overlay("toolbox", async overlay => {

                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("text/span", ".scripts"))

                      await this.add("toolbox-scripts", overlay)


                    })

                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".match-maker"
                  button.right.innerHTML = "Match Maker Skripte anhängen"
                  button.onclick = () => {
                    this.overlay("toolbox", async overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)
                      const info = this.create("header/info", overlay)
                      info.innerHTML = ".match-maker"

                      const content = this.create("info/loading", overlay)

                      const res = await this.get("match-maker/platform/closed")

                      if (res.status === 200) {
                        const matchMaker = JSON.parse(res.response)

                        this.convert("parent/scrollable", content)

                        this.render("match-maker/buttons", matchMaker, content)
                      }

                      if (res.status !== 200) {
                        const res = await this.get("match-maker/platform/writable-closed")

                        if (res.status === 200) {
                          const matchMaker = JSON.parse(res.response)

                          this.convert("parent/scrollable", content)

                          this.render("match-maker/buttons", matchMaker, content)
                        }

                        if (res.status !== 200) {
                          this.convert("parent/info", content)
                          content.innerHTML = "Es wurden keine Match Maker gefunden."
                          throw new Error("match maker not found")
                        }
                      }


                    })
                  }

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".role-apps"
                  button.right.innerHTML = "Rollenapps Freigabe Button anhängen"
                  button.addEventListener("click", () => {

                    this.overlay("toolbox", async overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)


                      this.render("text/title", "Für welche Rolle möchtest du den Button anhängen?", overlay)

                      const content = this.create("info/loading", overlay)

                      const res = await this.get("roles/platform/location-expert")

                      if (res.status === 200) {
                        const roles = JSON.parse(res.response)

                        this.convert("parent/scrollable", content)

                        for (let i = 0; i < roles.length; i++) {
                          const role = roles[i]

                          this.render("role/role-apps-button-onbody", role, content)

                        }
                      }

                      if (res.status !== 200) {
                        const res = await this.get("roles/platform/location-writable")

                        if (res.status === 200) {
                          const roles = JSON.parse(res.response)

                          this.convert("parent/scrollable", content)

                          for (let i = 0; i < roles.length; i++) {
                            const role = roles[i]

                            this.render("role/role-apps-button-onbody", role, content)

                          }

                        }

                        if (res.status !== 200) {
                          this.convert("parent/info", content)
                          content.innerHTML = "Keine Rollen gefunden."
                        }
                      }


                    })
                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".script"
                  button.right.innerHTML = "JavaScript anhängen"
                  button.onclick = () => {

                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const funnel = this.create("div/scrollable", overlay)

                      const nameField = this.create("field/name", funnel)
                      nameField.label.innerHTML = "Identifikationsname (text/tag)"
                      nameField.input.placeholder = "mein-neues-skript"
                      nameField.input.oninput = () => this.verify("input/value", nameField.input)

                      const jsField = this.create("field/js", funnel)
                      jsField.label.innerHTML = "JavaScript Browser Funktionen + Plattform Helper Funktionen"
                      jsField.input.oninput = () => this.verify("input/value", jsField.input)

                      this.verifyIs("field-funnel/valid", funnel)

                      const submit = this.create("button/action", funnel)
                      submit.innerHTML = "Skript jetzt anhängen"
                      submit.onclick = async () => {

                        await this.verify("field-funnel", funnel)

                        const map = {}
                        map.id = nameField.input.value
                        map.js = jsField.input.value

                        const script = this.create("script/empty-helper", map)

                        if (document.querySelectorAll(`#${script.id}`).length === 0) {
                          document.body.append(script)
                          window.alert("Skript wurde erfolgreich anhgehängt.")
                        } else {
                          this.setNotValidStyle(nameField.input)
                          window.alert("Id existiert bereits.")
                        }

                      }

                    })



                  }

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".soundbox"
                  button.right.innerHTML = "Speicher deine Lieblingslieder direkt als Quell-URL"
                  button.onclick = () => {
                    try {

                      this.create("soundbox", document.body)

                      window.alert("Soundbox erfolgreich angehängt.")

                    } catch (error) {
                      window.alert("Fehler.. Bitte wiederholen.\n\nMehr Infos findest du in der Browser Konsole unter den Entwickler Tools. mac(cmd + opt + c)")
                      console.error(error)
                    }
                  }

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".style"
                  button.right.innerHTML = "CSS Import"
                  button.addEventListener("click", () => {

                    this.overlay("toolbox", overlay => {

                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(this.convert("text/span", ".style"))

                      const content = this.create("div/scrollable", overlay)

                      const cssField = this.create("field/textarea", content)
                      cssField.label.textContent = "CSS Eigenschaften"
                      cssField.input.style.height = "55vh"
                      cssField.input.style.fontFamily = "monospace"
                      cssField.input.style.fontSize = "13px"
                      cssField.input.placeholder = "color: blue;\nborder: 1px solid black;\n\n  ..\n\nkey: value;"

                      if (child.hasAttribute("style")) {
                        cssField.input.value = this.convert("styles/text", child)
                      }

                      this.verify("input/value", cssField.input)

                      cssField.input.oninput = async () => {

                        await this.verify("input/value", cssField.input)

                        const css = cssField.input.value

                        if (this.verifyIs("text/empty", css)) {
                          child.removeAttribute("style")
                        } else {
                          child.setAttribute("style", css)
                        }


                      }

                    })
                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".innerHTML"
                  button.right.innerHTML = "Body Inhalt ersetzen"
                  button.addEventListener("click", () => {

                    this.overlay("toolbox", overlay => {

                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", document.body))
                      info.append(this.convert("text/span", ".innerHTML"))

                      const funnel = this.create("div/scrollable", overlay)

                      const htmlField = this.create("field/textarea", funnel)
                      htmlField.label.innerHTML = "Body Inhalt"
                      htmlField.input.style.height = "55vh"
                      htmlField.input.style.fontFamily = "monospace"
                      htmlField.input.style.fontSize = "13px"
                      htmlField.input.placeholder = "<body>..</body>"
                      htmlField.input.value = child.innerHTML
                      this.verify("input/value", htmlField.input)

                      const submit = this.create("button/action", funnel)
                      submit.innerHTML = "Inhalte jetzt ersetzen"
                      submit.onclick = async () => {

                        await this.verify("input/value", htmlField.input)

                        child.innerHTML = htmlField.input.value

                        await this.remove("toolbox", child)

                        await this.add("script/toolbox-getter")

                        this.remove("overlay", overlay)

                      }

                    })


                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".feedback-button"
                  button.right.innerHTML = "Lass dir Feedback für deine Werteinheiten geben"
                  button.onclick = () => {
                    this.add("script/html-feedback", document.body)
                    this.create("button/html-feedback", child)
                    window.alert("Feedback Taste wurde erfolgreich angehängt.")
                  }

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".back-button"
                  button.right.innerHTML = "Hänge eine Zurück Taste an"
                  button.onclick = () => {
                    this.add("script/back-button", document.body)
                    this.create("button/back", child)
                    window.alert("Zurück Taste wurde erfolgreich angehängt.")
                  }

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".contact-location-expert"
                  button.right.innerHTML = "Nutzer dürfen dir Kontaktanfragen per E-Mail senden"
                  button.onclick = () => {
                    const script = this.create("script/contact-location-expert")
                    const exist = document.getElementById(script.id)
                    if (exist === null) {
                      document.body.append(script)
                    } else {
                      exist.remove()
                      document.body.append(script)
                    }
                    window.alert("Skript erfolgreich angehängt.")
                  }

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".creator-button"
                  button.right.innerHTML = "Erlaube Nutzer deine Werteinheit zu bearbeiten"
                  button.onclick = () => {
                    this.add("script/html-creator", document.body)
                    const button = this.create("button/tools", child)
                    button.classList.add("html-creator")
                    window.alert("Creator Anwendung wurde erfolgreich angehängt.")
                  }

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".location-list-funnel-button"
                  button.right.innerHTML = "Definiere Listen, mit der sich deine Nutzer selber markieren können"
                  button.onclick = () => {

                    this.overlay("toolbox", async overlay => {
                      this.add("button/remove-overlay", overlay)

                      const funnel = this.create("div/scrollable", overlay)

                      const pathField = await this.create("field/open-expert-values-path-select", funnel)

                      const submitButton = this.create("button/action", funnel)
                      submitButton.innerHTML = "Button jetzt anhängen"
                      submitButton.onclick = async () => {

                        const fieldFunnel = await this.convert("path/field-funnel", pathField.input.value)

                        const map = {}
                        map.tag = fieldFunnel.id
                        map.path = pathField.input.value

                        const script = this.create("script/open-popup-list-mirror-event", map)

                        await this.render("script/onbody", script)

                        const button = this.create("button/image-box", document.body)
                        button.bottom.innerHTML = this.convert("text/capital-first-letter", map.tag)
                        button.id = `${map.tag}-mirror-button`

                        this.remove("overlay", overlay)

                        window.alert("Location List Funnel Button wurde erfolgreich angehängt.")
                      }

                    })

                  }

                }

                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".dark-light-body"
                  button.right.innerHTML = "Lass deinen Nutzer entscheiden, wie er seinen document.body gestaltet"
                  button.onclick = () => {
                    document.querySelectorAll("#dark-light-body").forEach(node => node.remove())
                    this.create("script/dark-light-body", document.body)
                    window.alert("Dark Light Mode wurde erfolgreich angehängt.")
                  }

                }

                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".open-users"
                  button.right.innerHTML = "Hol dir eine Liste von Nutzern"
                  button.onclick = () => {
                    this.overlay("popup", overlay => {
                      this.add("button/register-html", overlay)

                      const funnel = this.create("div/scrollable", overlay)

                      const idField = this.create("field/tag", funnel)
                      idField.label.innerHTML = "Vordefiniertes Design mit einer Id finden"
                      idField.input.placeholder = "meine-element"
                      this.verify("input/value", idField.input)
                      idField.input.oninput = () => this.verify("input/value", idField.input)

                      const treesField = this.create("field/trees", funnel)
                      treesField.label.innerHTML = "Liste mit Datenstrukturen eingeben"
                      treesField.input.placeholder = `[\n  "getyour.expert.name",\n  "platform.company.name",\n  "email"\n]`
                      treesField.input.style.height = "144px"
                      this.verify("input/value", treesField.input)
                      treesField.input.oninput = () => this.verify("input/value", treesField.input)

                      const submit = this.create("button/action", funnel)
                      submit.innerHTML = "Skript jetzt anhängen"
                      submit.onclick = async () => {
                        await this.verify("field-funnel", funnel)

                        const script = this.create("script/trees-id", {id: idField.input.value, trees: JSON.parse(treesField.input.value)})

                        if (document.querySelectorAll(`#${script.id}`).length === 0) {
                          document.body.append(script)
                          window.alert("Skript wurde erfolgreich angehängt.")
                        } else {
                          window.alert("Id existiert bereits.")
                          this.setNotValidStyle(idField.input)
                        }

                      }

                    })
                  }
                }

              }

              if (child.tagName === "DIV" || child.tagName === "BODY") {

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".access"
                  button.right.innerHTML = "Zugang anhängen"
                  button.addEventListener("click", () => {

                    this.overlay("toolbox", async overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      this.render("text/title", "Für welche Rolle möchtest du einen Zugang anhängen?", overlay)

                      const content = this.create("info/loading", overlay)

                      const res = await this.get("roles/platform/location-expert")

                      if (res.status === 200) {
                        const roles = JSON.parse(res.response)

                        this.convert("parent/scrollable", content)

                        for (let i = 0; i < roles.length; i++) {
                          const role = roles[i]

                          const button = this.create("button/left-right", content)
                          button.left.innerHTML = role.name
                          button.right.innerHTML = `Rolle ${i + 1}`

                          button.onclick = () => {

                            this.create("login", child)
                            this.render("script/role-login", role, document.body)
                            window.alert(`Zugang für ${this.convert("text/capital-first-letter", role.name)} wurde erfolgreich angehängt.`)

                          }
                        }

                      }

                      if (res.status !== 200) {
                        const res = await this.get("roles/platform/location-writable")

                        if (res.status === 200) {

                          const roles = JSON.parse(res.response)

                          this.convert("parent/scrollable", content)

                          for (let i = 0; i < roles.length; i++) {
                            const role = roles[i]

                            const button = this.create("button/left-right", content)
                            button.left.innerHTML = role.name
                            button.right.innerHTML = `Rolle ${i + 1}`

                            button.onclick = () => {

                              this.create("login", child)
                              this.render("script/role-login", role, document.body)
                              window.alert("Zugang wurde erfolgreich angehängt.")

                            }
                          }


                        }

                        if (res.status !== 200) {
                          this.convert("parent/info", content)
                          content.innerHTML = "Es wurden keine Rollen gefunden."
                        }

                      }


                    })
                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".field-funnel"
                  button.right.innerHTML = "Datenfeld Funnel anhängen"
                  button.addEventListener("click", () => {
                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(".field-funnel.append")

                      const content = this.create("div/scrollable", overlay)

                      const idField = this.add("field/id", content)

                      const submitButton = this.create("button/action", content)
                      submitButton.innerHTML = "Datenfeld Funnel jetzt anhängen"
                      submitButton.addEventListener("click", async () => {

                        await this.verify("input/value", idField.input)

                        const id = idField.input.value

                        const ids = document.querySelectorAll(`#${id}`)

                        if (ids.length === 0) {

                          const element = this.create("field-funnel", child)
                          element.id = id

                          document.querySelectorAll(`#submit-field-funnel-event`).forEach(script => script.remove())
                          this.create("script/submit-field-funnel-event", document.body)

                          window.alert(`Field Funnel erfolgreich in ${child.tagName} angehängt.`)

                          this.remove("overlay", overlay)
                        }

                        if (ids.length > 0) {
                          this.setNotValidStyle(idField.input)
                          window.alert("Id existiert bereits.")
                        }

                      })
                    })

                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".click-funnel"
                  button.right.innerHTML = "Klick Funnel anhängen"
                  button.addEventListener("click", () => {
                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(".click-funnel.append")

                      const content = this.create("div/scrollable", overlay)

                      const idField = this.add("field/id", content)

                      const submitButton = this.create("button/action", content)
                      submitButton.innerHTML = "Klick Funnel jetzt anhängen"
                      submitButton.addEventListener("click", async () => {

                        await this.verify("input/value", idField.input)

                        const id = idField.input.value

                        const ids = document.querySelectorAll(`#${id}`)

                        if (ids.length === 0) {
                          const element = this.create("click-funnel", child)
                          element.id = id

                          this.add("script/click-funnel-event", document.body)

                          this.remove("overlay", overlay)
                        }

                        if (ids.length > 0) {
                          this.setNotValidStyle(idField.input)
                          window.alert("Id existiert bereits.")
                        }

                      })

                    })

                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".md-to-div"
                  button.right.innerHTML = "Markdown konvertieren und anhängen"
                  button.onclick = async () => {

                    this.overlay("toolbox", markdownToHtmlOverlay => {
                      this.add("button/remove-overlay", markdownToHtmlOverlay)
                      this.add("button/register-html", markdownToHtmlOverlay)

                      const funnel = this.create("div/scrollable", markdownToHtmlOverlay)

                      const markdownField = this.create("field/textarea", funnel)
                      markdownField.label.innerHTML = "Markdown zu HTML konvertieren (md/html)"
                      markdownField.input.placeholder = " # Hello, Markdown! .. "
                      markdownField.input.style.fontSize = "13px"
                      markdownField.input.style.height = "55vh"
                      markdownField.input.setAttribute("required", "true")
                      markdownField.input.oninput = () => this.verify("input/value", markdownField.input)
                      this.verify("input/value", markdownField.input)

                      const submit = this.create("button/action", funnel)
                      submit.innerHTML = "Markdown jetzt anhängen"
                      submit.onclick = async () => {

                        await this.verify("input/value", markdownField.input)
                        const markdown = markdownField.input.value
                        const markdownContainer = this.convert("markdown/div", markdown)
                        markdownContainer.classList.add("markdown-container")
                        child.append(markdownContainer)

                        window.alert(`Markdown erfolgreich konvertiert und im ${child.tagName} angehängt.`)

                      }


                    })

                  }

                }


                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".image"
                  button.right.innerHTML = "Neues Bild anhängen"
                  button.addEventListener("click", () => {

                    this.overlay("toolbox", async overlay => {

                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(this.convert("text/span", ".image"))

                      const content = this.create("div/scrollable", overlay)

                      const urlField = this.add("field/image-url", content)

                      const button = this.create("button/action", content)
                      button.innerHTML = "Bild jetzt anhängen"
                      button.addEventListener("click", async () => {

                        await this.verify("input/value", urlField.input)

                        const url = urlField.input.value

                        child.append(this.convert("text/img", url))

                      })

                    })
                  })

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".background-image"
                  button.right.innerHTML = "Hintergrund Bild anhängen"
                  button.addEventListener("click", () => {

                    this.overlay("toolbox", async overlay => {

                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(this.convert("text/span", ".image"))

                      const content = this.create("div/scrollable", overlay)

                      const urlField = this.add("field/image-url", content)

                      const button = this.create("button/action", content)
                      button.innerHTML = "Bild jetzt anhängen"
                      button.addEventListener("click", async () => {

                        await this.verify("input/value", urlField.input)
                        const url = urlField.input.value
                        child.style.background = `url("${url}")`

                      })

                    })
                  })

                }


                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".div-scrollable"
                  button.right.innerHTML = "Scrollbares DIV-Element anhängen"
                  button.addEventListener("click", () => {
                    try {
                      this.create("div/scrollable", child)
                      window.alert("Element erfolgreich angehängt.")
                    } catch (error) {
                      window.alert("Fehler.. Bitte wiederholen.")
                    }
                  })

                }


              }

              if (child.classList.contains("click-funnel")) {

                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".questions"
                  button.right.innerHTML = "Klick Funnel bearbeiten"
                  button.addEventListener("click", () => {
                    this.overlay("toolbox", questionsOverlay => {

                      this.add("button/remove-overlay", questionsOverlay)
                      const info = this.create("header/info",questionsOverlay)
                      info.append(this.convert("element/alias", child))
                      {
                        const span = document.createElement("span")
                        span.innerHTML = ".questions"
                        info.append(span)
                      }

                      {
                        const button = this.create("button/left-right", questionsOverlay)
                        button.left.innerHTML = ".append"
                        button.right.innerHTML = "Neue Frage anhängen"
                        button.addEventListener("click", () => {
                          this.overlay("toolbox", appendQuestionOverlay => {
                            this.add("button/remove-overlay", appendQuestionOverlay)
                            this.add("button/register-html", appendQuestionOverlay)

                            const info = this.create("header/info",appendQuestionOverlay)
                            info.append(this.convert("element/alias", child))
                            {
                              const span = document.createElement("span")
                              span.innerHTML = ".append"
                              info.append(span)
                            }

                            const appendQuestionFunnel = this.create("div/scrollable", appendQuestionOverlay)

                            const idField = this.create("field/tag", appendQuestionFunnel)
                            idField.label.innerHTML = "Gebe deiner Frage eine Id"
                            this.verify("input/value", idField.input)
                            idField.input.addEventListener("input", async () => {

                              await this.verify("input/value", idField.input)

                              try {
                                const value = idField.input.value
                                if (document.querySelectorAll(`#${value}`).length === 0) {
                                  this.setValidStyle(idField.input)
                                } else this.setNotValidStyle(idField.input)
                              } catch (error) {
                                this.setNotValidStyle(idField.input)
                              }

                            })

                            const questionField = this.create("field/textarea", appendQuestionFunnel)
                            questionField.label.innerHTML = "Stelle eine Frage an dein Netzwerk"
                            questionField.input.setAttribute("required", "true")
                            this.verify("input/value", questionField.input)
                            questionField.input.addEventListener("input", () => this.verify("input/value", questionField.input))

                            const appendQuestionButton = this.create("button/action", appendQuestionFunnel)
                            appendQuestionButton.innerHTML = "Jetzt anhängen"
                            appendQuestionButton.addEventListener("click", async () => {

                              await this.verify("field-funnel", appendQuestionFunnel)

                              const question = questionField.input.value
                              const id = idField.input.value

                              if (document.getElementById(id) === null) {
                                const clickField = this.create("click-field", child)
                                clickField.id = id
                                clickField.question.textContent = question
                                this.remove("overlay", appendQuestionOverlay)
                                this.render("click-funnel/questions", child, questions)
                              } else {
                                window.alert("Id existiert bereits.")
                                this.setNotValidStyle(idField.input)
                                idField.scrollIntoView({behavior: "smooth"})
                              }


                            })




                          })
                        })
                      }

                      const questions = this.create("div/scrollable", questionsOverlay)
                      this.render("click-funnel/questions", child, questions)


                    })
                  })
                }


                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".next-path"
                  button.right.innerHTML = "Nach Abschluss, zur Werteinheit"
                  button.addEventListener("click", () => {
                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)
                      this.add("button/register-html", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("element/alias", child))
                      info.append(this.convert("text/span", ".next-path"))

                      const content = this.create("div/scrollable", overlay)

                      const pathField = this.create("field/text", content)
                      pathField.input.placeholder = "/mein/pfad/"
                      pathField.input.setAttribute("required", "true")
                      pathField.label.textContent = "https://www.get-your.de"
                      if (child.hasAttribute("next-path")) {
                        pathField.input.value = child.getAttribute("next-path")
                          pathField.label.textContent = `https://www.get-your.de${child.getAttribute("next-path")}`
                      }
                      this.verify("input/value", pathField.input)
                      pathField.input.addEventListener("input", (event) => {

                        if (this.verifyIs("text/empty", event.target.value)) {
                          this.setNotValidStyle(event.target)
                          child.removeAttribute("next-path")
                        }

                        if (!this.verifyIs("text/empty", event.target.value)) {
                          this.setValidStyle(event.target)
                          pathField.label.textContent = `https://www.get-your.de${event.target.value}`
                          child.setAttribute("next-path", event.target.value)
                        }

                      })



                    })
                  })
                }


                {
                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".reset"
                  button.right.innerHTML = "Klick Funnel zurücksetzen"
                  button.addEventListener("click", () => {

                    for (let i = 0; i < child.children.length; i++) {
                      const element = child.children[i]

                      element.style.display = "none"

                      if (element.classList.contains("start-click-funnel-button")) {
                        element.style.display = "flex"
                      }

                    }
                    window.alert("Funnel erfolgreich zurückgesetzt.")

                  })
                }


              }

              if (child.tagName === "TITLE") {

                const button = this.create("button/left-right", buttons)

                button.left.innerHTML = ".textContent"
                button.right.innerHTML = "Textinhalt ersetzen"

                button.addEventListener("click", async () => {

                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)

                    this.add("button/register-html", overlay)

                    const info = this.create("header/info", overlay)
                    info.append(this.convert("element/alias", child))
                    info.append(this.convert("text/span", ".textContent"))

                    const textFieldIdField = this.create("field/text", overlay)
                    textFieldIdField.label.innerHTML = "Dokumententitel"
                    textFieldIdField.input.value = child.textContent
                    this.verify("input/value", textFieldIdField.input)

                    textFieldIdField.input.addEventListener("input", (event) => {

                      child.textContent = event.target.value

                    })

                  })



                })

              }

              if (child.tagName !== "SCRIPT") {

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".dark-light-aware"
                  button.right.innerHTML = "Dark Light Skript für dein Element anhängen"
                  button.onclick = async () => {
                    const script = await this.create("script/dark-light-aware", child)
                    document.body.append(script)
                    window.alert("Dark Light Skript erfolgreich angehängt.")
                  }

                }

                {

                  const button = this.create("button/left-right", buttons)
                  button.left.innerHTML = ".dark-light-toggle"
                  button.right.innerHTML = "Dark Light Modus auf dein Element umschalten"
                  button.onclick = () => {
                    this.convert("node/dark-light-toggle", child)
                    window.alert("Dark Light Modus erfolgreich umgeschaltet.")
                  }

                }

              }

              if (child.tagName === "SCRIPT") {
                {
                  const button = this.create("button/left-right", buttons)
                  this.render("left-right/disable-script-local", {script: child, ok: () => {
                    this.render("left-right/local-script-toggle", child.id, childrenButton)
                    overlay.remove()
                  }}, button)

                  const scripts = JSON.parse(window.localStorage.getItem("scripts")) || []
                  for (let i = 0; i < scripts.length; i++) {
                    const script = scripts[i]
                    if (script.id === child.id) {
                      if (script.disabled) {
                        this.render("left-right/enable-script-local", {script: child, ok: () => {
                          this.render("left-right/local-script-toggle", child.id, childrenButton)
                          overlay.remove()
                        }}, button)
                      }
                    }
                  }
                }
              }

              {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".html"
                button.right.innerHTML = "Neues HTML anhängen"
                button.addEventListener("click", () => {
                  this.overlay("toolbox", overlay => {
                    this.add("button/remove-overlay", overlay)
                    this.add("button/register-html", overlay)

                    const info = this.create("header/info", overlay)
                    info.append(this.convert("element/alias", child))
                    info.append(".html")

                    const funnel = this.create("div/scrollable", overlay)

                    const htmlField = this.add("field/html", funnel)

                    const button = this.create("button/action", funnel)
                    button.innerHTML = "HTML jetzt anhängen"
                    button.addEventListener("click", async () => {

                      await this.verify("input/value", htmlField.input)

                      const text = htmlField.input.value

                      const html = this.convert("text/html", text)
                      child.append(html)

                      window.alert("HTML wurde erfolgreich angehängt.")

                      this.remove("overlay", overlay)

                    })

                  })
                })

              }

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".id"
                button.right.innerHTML = "Element Id ändern"
                button.addEventListener("click", async () => {

                  this.overlay("toolbox", async overlay => {

                    this.add("button/remove-overlay", overlay)

                    this.add("button/register-html", overlay)

                    const info = this.create("header/info", overlay)

                    const elementAlias = this.convert("element/alias", child)
                    elementAlias.classList.add("element-alias")
                    info.append(elementAlias)
                    info.append(this.convert("text/span", ".id"))

                    const idField = this.create("field/text", overlay)
                    idField.label.innerHTML = "Identifikationsname (text/tag)"
                    idField.input.accept = "text/tag"
                    idField.input.placeholder = "meine-id"
                    if (child.hasAttribute("id")) {
                      idField.input.value = child.getAttribute("id")
                    }
                    this.verify("input/value", idField.input)

                    idField.input.oninput = async () => {

                      await this.verify("input/value", idField.input)

                      const value = idField.input.value

                      if (value === "") {
                        child.removeAttribute("id")
                        return
                      }

                      const ids = document.querySelectorAll(`#${value}`)

                      if (ids.length === 0) {
                        child.setAttribute("id", value)
                      } else {
                        this.setNotValidStyle(idField.input)
                      }

                      overlay.querySelectorAll(".element-alias").forEach(element => {
                        element.innerHTML = ""
                        element.append(this.convert("element/alias", child))
                      })

                      this.render(event, input, parent)

                    }

                  })



                })
              }

              {
                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".class"
                button.right.innerHTML = "Element Klassen definieren"
                button.addEventListener("click", () => {

                  this.overlay("toolbox", overlay => {

                    this.add("button/remove-overlay", overlay)
                    this.add("button/register-html", overlay)

                    const info = this.create("header/info", overlay)

                    const elementAlias = this.convert("element/alias", child)
                    elementAlias.classList.add("element-alias")
                    info.append(elementAlias)
                    info.append(this.convert("text/span", ".class"))

                    const classField = this.create("field/textarea", overlay)
                    classField.label.innerHTML = "Klassen Namen"
                    classField.input.placeholder = "mehrere klassen werden mit einem leerzeichen getrennt"
                    classField.input.style.fontFamily = "monospace"
                    classField.input.style.fontSize = "13px"
                    classField.input.style.height = "89px"

                    if (child.hasAttribute("class")) {
                      classField.input.value = child.getAttribute("class")
                    }

                    this.verify("input/value", classField.input)

                    classField.input.oninput = async () => {

                      await this.verify("input/value", classField.input)

                      const value = classField.input.value

                      if (this.verifyIs("text/empty", value)) {
                        child.removeAttribute("class")

                        overlay.querySelectorAll(".element-alias").forEach(element => {
                          element.innerHTML = ""
                          element.append(this.convert("element/alias", child))
                        })

                        this.render(event, input, parent)
                      } else {
                        child.setAttribute("class", value)

                        overlay.querySelectorAll(".element-alias").forEach(element => {
                          element.innerHTML = ""
                          element.append(this.convert("element/alias", child))
                        })

                        this.render(event, input, parent)

                      }
                    }

                  })



                })
              }

              if (child.tagName === "HEAD") {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".style"
                button.right.innerHTML = "Design als Style Tag anhängen"

                button.addEventListener("click", () => {

                  this.overlay("toolbox", overlay => {

                    this.add("button/remove-overlay", overlay)
                    this.add("button/register-html", overlay)

                    const info = this.create("header/info", overlay)
                    info.append(this.convert("element/alias", document.body))
                    info.append(this.convert("text/span", ".style"))

                    const funnel = this.create("div/scrollable", overlay)

                    {
                      const cssField = this.create("field/textarea", funnel)
                      cssField.label.innerHTML = "CSS Import"
                      cssField.input.placeholder = `.class {..}`
                      cssField.input.style.fontFamily = "monospace"
                      cssField.input.style.fontSize = "13px"
                      cssField.input.style.height = "89px"
                      this.verify("input/value", cssField.input)
                      cssField.input.oninput = () => this.verify("input/value", cssField.input)

                      const button = this.create("button/action", funnel)
                      button.innerHTML = "Style jetzt anhängen"
                      button.addEventListener("click", async () => {

                        const css = cssField.validValue()

                        const style = document.createElement("style")
                        style.textContent = css

                        child.append(style)

                        this.remove("overlay", overlay)

                      })
                    }



                  })


                })

              }

              if (
                child.tagName !== "SCRIPT" &&
                child.tagName !== "BODY" &&
                child.tagName !== "HEAD"
              ) {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".style"
                button.right.innerHTML = "CSS Import mit Vorschau bearbeiten"
                button.addEventListener("click", () => {

                  this.overlay("toolbox", overlay => {

                    this.add("button/remove-overlay", overlay)
                    this.add("button/register-html", overlay)

                    const info = this.create("header/info", overlay)
                    info.append(this.convert("element/alias", child))
                    info.append(this.convert("text/span", ".style"))

                    const content = this.create("div/scrollable", overlay)

                    {
                      const preview = document.createElement("div")
                      preview.style.height = `${window.innerHeight * 0.4}px`
                      preview.style.overflow = "auto"
                      const clone = child.cloneNode(true)
                      clone.id = Date.now()
                      clone.name = `${Date.now()}`
                      preview.append(clone)
                      content.append(preview)

                      this.render("text/hr", "Vorschau", content)

                      const cssField = this.create("field/textarea", content)
                      cssField.label.textContent = "CSS Eigenschaften"
                      cssField.input.style.height = "233px"
                      cssField.input.style.fontFamily = "monospace"
                      cssField.input.style.fontSize = "13px"
                      cssField.input.placeholder = "color: blue;\nborder: 1px solid black;\n\n  ..\n\nkey: value;"

                      if (child.hasAttribute("style")) {
                        cssField.input.value = this.convert("styles/text", child)
                      }

                      this.verify("input/value", cssField.input)

                      cssField.input.oninput = async () => {

                        await this.verify("input/value", cssField.input)

                        const css = cssField.input.value

                        clone.setAttribute("style", css)
                        child.setAttribute("style", css)

                      }

                    }


                  })
                })

              }

              if (child.tagName !== "BODY") {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".innerHTML"
                button.right.innerHTML = "Element Inhalt ändern"
                button.addEventListener("click", () => {

                  this.overlay("toolbox", overlay => {

                    this.add("button/remove-overlay", overlay)
                    this.add("button/register-html", overlay)

                    const info = this.create("header/info", overlay)
                    info.append(this.convert("element/alias", document.body))
                    info.append(this.convert("text/span", ".innerHTML"))

                    const funnel = this.create("div/scrollable", overlay)

                    const htmlField = this.create("field/textarea", funnel)
                    htmlField.label.innerHTML = "Element Inhalt"
                    htmlField.input.style.height = "55vh"
                    htmlField.input.style.fontFamily = "monospace"
                    htmlField.input.style.fontSize = "13px"
                    htmlField.input.placeholder = "<div>..</div>"
                    htmlField.input.value = child.innerHTML
                    this.verify("input/value", htmlField.input)

                    htmlField.input.oninput = async () => {

                      await this.verify("input/value", htmlField.input)

                      child.innerHTML = htmlField.input.value

                    }

                  })


                })

              }

              if (child.tagName === "DIV") {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".assign"
                button.right.innerHTML = "Klick Weiterleitung definieren"
                button.addEventListener("click", () => {

                  this.overlay("toolbox", overlay => {

                    this.add("button/remove-overlay", overlay)
                    this.add("button/register-html", overlay)

                    const info = this.create("header/info", overlay)
                    info.append(this.convert("element/alias", document.body))
                    info.append(this.convert("text/span", ".assign"))

                    const pathField = this.create("field/url", overlay)
                    pathField.label.innerHTML = "Definiere einen Pfad für deine Weiterleitung, sobald auf dieses Element geklickt wird"
                    pathField.input.accept = "text/path"
                    pathField.input.placeholder = "/meine/weiterleitung/pfad/"

                    if (child.hasAttribute("onclick")) {

                      if (child.getAttribute("onclick").startsWith("window.location.assign")) {
                        const match = child.getAttribute("onclick").match(/"([^"]*)"/)
                        if (match) {
                          pathField.input.value = match[1]
                        }
                      }

                    }

                    this.verify("input/value", pathField.input)

                    pathField.input.oninput = async () => {

                      await this.verify("input/value", pathField.input)

                      const path = pathField.input.value

                      if (this.verifyIs("text/empty", path)) {
                        child.removeAttribute("onclick")
                      } else {
                        child.setAttribute("onclick", `window.location.assign("${path}")`)
                      }


                    }


                  })


                })

              }

              if (
                child.tagName !== "BODY" &&
                child.tagName !== "HEAD"
              ) {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".copy"
                button.right.innerHTML = "Element kopieren"
                button.addEventListener("click", () => {
                  window.sessionStorage.setItem("copied", child.outerHTML)
                  window.alert("Element erfolgreich kopiert.")
                })

              }

              if (
                child.tagName !== "SCRIPT" &&
                child.tagName !== "HEAD"
              ) {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".paste"
                button.right.innerHTML = "Kopiertes Element anhängen"
                button.addEventListener("click", () => {
                  const elementString = window.sessionStorage.getItem("copied")

                  if (elementString === null) {
                    window.alert("Es wurde kein Element kopiert.")
                    throw new Error("copied element not found")
                  }

                  const element = this.convert("text/html", elementString)

                  if (element.hasAttribute("id")) {
                    const id = element.getAttribute("id")

                    const counter = document.querySelectorAll(`[id*='${id}']`).length

                    let copyId
                    if (!this.verifyIs("number/empty", counter)) {
                      copyId = `${id}-${counter}`
                    }

                    if (copyId !== undefined) {
                      element.setAttribute("id", copyId)
                    }

                  }

                  window.alert(`Element '${this.convert("element/tagName", element)}' wurde erfolgreich in '${this.convert("element/tagName", child)}' kopiert.`)
                  child.append(element)

                })

              }

              if (
                child.tagName !== "BODY" &&
                child.tagName !== "HEAD"
              ) {

                const button = this.create("button/left-right", buttons)
                button.left.innerHTML = ".remove"
                button.right.innerHTML = "Element entfernen"
                button.addEventListener("click", async () => {

                  child.remove()
                  this.remove("overlay", overlay)

                  this.render(event, input, parent)

                })

              }


            }


          })

        })

        // drag and drop
        button.draggable = true

        button.addEventListener("dragstart", (event) => {

          event.dataTransfer.setData("id", child.id)

        })

        button.addEventListener("dragenter", (event) => {
          event.target.style.border = `2px dashed ${this.colors.matte.red}`
        })

        button.addEventListener("dragleave", (event) => {

          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            event.target.style.border = this.colors.dark.border
          } else {
            event.target.style.border = this.colors.light.border
          }

        })

        button.addEventListener("dragover", (event) => {
          event.preventDefault()
        })

        button.addEventListener("drop", (event) => {

          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            event.target.style.border = this.colors.dark.border
          } else {
            event.target.style.border = this.colors.light.border
          }

          const draggedId = event.dataTransfer.getData("id")

          let droppedId = child.id

          if (this.verifyIs("text/empty", draggedId)) {
            alert("Das ausgewählte Element hat keine Id. Wenn du es verschieben möchtest, dann vergebe dem Element eine Id.")
            throw new Error("dragged id is empty")
          }

          if (this.verifyIs("text/empty", droppedId)) {
            alert("Das zu tauschende Element hat keine Id. Wenn du es verschieben möchtest, dann vergebe dem Element eine Id.")
            throw new Error("dropped id is empty")
          }

          let draggedElement = document.getElementById(draggedId)

          let droppedElement = document.getElementById(droppedId)

          droppedElement.before(draggedElement)

          this.render("children", input, parent)

        })
        ///

      }


    }

    if (event === "click-field/answers") {

      if (input.classList.contains("click-field")) {

        const container = input.querySelector(".answers")
        if (container !== null) {
          parent.innerHTML = ""
          for (let i = 0; i < container.children.length; i++) {
            const child = container.children[i]

            if (child.classList.contains("answer-box")) {
              const answer = child.querySelector(".answer")

              const button = this.create("button/left-right", parent)
              button.left.innerHTML = `Option ${i + 1}`
              button.right.textContent = answer.textContent
              button.addEventListener("click", () => {
                this.overlay("toolbox", answersFunnelOverlay => {
                  this.add("button/remove-overlay", answersFunnelOverlay)

                  const info = this.create("header/info", answersFunnelOverlay)
                  info.append(this.convert("element/alias", child))


                  const answerFunnel = this.create("div/scrollable", answersFunnelOverlay)

                  const answerField = this.create("field/textarea", answerFunnel)
                  answerField.input.value = answer.textContent
                  answerField.label.innerHTML = "Antwortmöglichkeit ändern"
                  answerField.input.setAttribute("required", "true")
                  this.verify("input/value", answerField.input)
                  answerField.input.addEventListener("input", async () => {

                    await this.verify("input/value", answerField.input)
                    try {
                      const value = answerField.input.value
                      answer.textContent = value
                    } catch (error) {
                      this.setNotValidStyle(answerField.input)
                    }

                    this.render(event, input, parent)

                  })

                  const selectedConditionButton = this.create("button/left-right", answerFunnel)
                  selectedConditionButton.left.innerHTML = ".onclick"
                  selectedConditionButton.right.innerHTML = "Klick Bedingung definieren"
                  selectedConditionButton.addEventListener("click", () => {

                    this.overlay("toolbox", conditionFunnelOverlay => {
                      this.add("button/remove-overlay", conditionFunnelOverlay)

                      const info = this.create("header/info", conditionFunnelOverlay)
                      info.append(this.convert("element/alias", child))
                      {
                        const span = document.createElement("span")
                        span.innerHTML = `.onclick`
                        info.append(span)
                      }

                      const content = this.create("div/scrollable", conditionFunnelOverlay)

                      const actionField = this.create("field/select", content)
                      actionField.label.innerHTML = "Wähle ein Event"
                      actionField.input.add(["skip", "path"])
                      if (answer.hasAttribute("onclick-condition")) {
                        const condition = JSON.parse(answer.getAttribute("onclick-condition"))
                        actionField.input.select([condition.event])
                      }

                      this.verify("input/value", actionField.input)
                      actionField.input.addEventListener("input", () => {

                        if (actionField.input.value === "skip") {

                          skipNumberField.input.disabled = false
                          skipNumberField.input.setAttribute("required", "true")
                          this.setNotValidStyle(skipNumberField.input)

                          pathField.input.disabled = true
                          pathField.input.required = false
                          pathField.input.value = ""
                          this.setValidStyle(pathField.input)

                        }

                        if (actionField.input.value === "path") {

                          skipNumberField.input.disabled = true
                          skipNumberField.input.required = false
                          skipNumberField.input.value = ""
                          this.setValidStyle(skipNumberField.input)

                          pathField.input.disabled = false
                          pathField.input.setAttribute("required", "true")
                          this.setNotValidStyle(pathField.input)

                        }

                      })

                      const skipNumberField = this.create("field/tel", content)
                      skipNumberField.input.disabled = false
                      skipNumberField.input.required = true
                      skipNumberField.input.pattern = "[1-9]"
                      skipNumberField.label.innerHTML = "Wieviele Fragen möchtest du überspringen"
                      if (answer.hasAttribute("onclick-condition")) {
                        const condition = JSON.parse(answer.getAttribute("onclick-condition"))
                        if (condition.event === "skip") {
                          skipNumberField.input.value = condition.skip
                        }
                      }
                      this.verify("input/value", skipNumberField.input)
                      skipNumberField.input.addEventListener("input", () => this.verify("input/value", skipNumberField.input))

                      const pathField = this.create("field/text", content)
                      pathField.input.disabled = true
                      pathField.input.setAttribute("required", "false")
                      pathField.input.accept = "text/path"
                      pathField.input.placeholder = "/meine-platform/mein-username/meine-werteinheit/"
                      pathField.label.innerHTML = "Gebe eine Pfad ein"
                      if (answer.hasAttribute("onclick-condition")) {
                        const condition = JSON.parse(answer.getAttribute("onclick-condition"))
                        if (condition.event === "path") {
                          pathField.input.value = condition.path
                        }
                      }
                      this.setValidStyle(pathField.input)
                      pathField.input.addEventListener("input", () => this.verify("input/value", pathField.input))

                      const conditionSubmitButton = this.create("button/action", content)
                      conditionSubmitButton.innerHTML = "Klick Bedingung hinzufügen"
                      conditionSubmitButton.addEventListener("click", async () => {

                        await this.verify("field-funnel", content)

                        const condition = {}
                        condition.event = actionField.input.value

                        if (condition.event === "skip") {
                          condition.skip = skipNumberField.input.value
                        }

                        if (condition.event === "path") {
                          condition.path = pathField.input.value
                        }

                        answer.setAttribute("onclick-condition", JSON.stringify(condition))

                        this.remove("overlay", conditionFunnelOverlay)
                      })

                    })



                  })

                })
              })
            }

          }
        }



      }

    }

    if (event === "click-funnel/questions") {

      if (input.classList.contains("click-funnel")) {



        parent.innerHTML = ""
        for (let i = 0; i < input.children.length; i++) {
          const child = input.children[i]

          if (child.classList.contains("start-click-funnel-button")) continue
          if (child.classList.contains("end-click-funnel-button")) continue

          if (child.classList.contains("click-field")) {
            const button = this.create("button/left-right", parent)
            button.left.innerHTML = child.id
            button.right.innerHTML = "Frage bearbeiten"
            button.addEventListener("click", () => {
              this.overlay("toolbox", questionsFunnelOverlay => {
                this.add("button/remove-overlay", questionsFunnelOverlay)

                const info = this.create("header/info", questionsFunnelOverlay)
                info.append(this.convert("element/alias", child))

                const questionsFunnel = this.create("div/scrollable", questionsFunnelOverlay)

                const idField = this.create("field/tag", questionsFunnel)
                idField.input.value = child.id
                idField.label.innerHTML = "Id"
                this.verify("input/value", idField.input)
                idField.input.addEventListener("input", async () => {

                  await this.verify("input/value", idField.input)
                  try {
                    const value = idField.input.value
                    if (document.querySelectorAll(`#${value}`).length === 0) {
                      child.id = value
                    } else this.setNotValidStyle(idField.input)

                    info.innerHTML = ""
                    info.append(this.convert("element/alias", child))

                    this.render(event, input, parent)

                  } catch (error) {
                    this.setNotValidStyle(idField.input)
                  }

                })


                const question = child.querySelector(".question")
                const labelField = this.create("field/textarea", questionsFunnel)
                labelField.input.value = question.textContent
                labelField.label.innerHTML = "Frage"
                labelField.input.setAttribute("required", "true")
                this.verify("input/value", labelField.input)

                labelField.input.addEventListener("input", async () => {

                  await this.verify("input/value", labelField.input)

                  try {
                    const value = labelField.input.value
                    question.textContent = value
                  } catch (error) {
                    this.setNotValidStyle(labelField.input)
                  }

                })

                const button = this.create("button/left-right", questionsFunnel)
                button.left.innerHTML = ".options"
                button.right.innerHTML = "Antworten bearbeiten"
                button.addEventListener("click", () => {
                  this.overlay("toolbox", answersOverlay => {
                    this.add("button/remove-overlay", answersOverlay)
                    this.add("button/register-html", answersOverlay)

                    const info = this.create("header/info", answersOverlay)
                    info.append(this.convert("element/alias", child))

                    {
                      const span = document.createElement("span")
                      span.innerHTML = `.options`
                      info.append(span)
                    }

                    {
                      const button = this.create("button/left-right", answersOverlay)
                      button.left.innerHTML = ".append"
                      button.right.innerHTML = "Neue Antwortmöglichkeit anhängen"
                      button.addEventListener("click", () => {

                        const answerBox = this.create("answer-box")

                        this.overlay("toolbox", appendAnswerOverlay => {
                          this.add("button/remove-overlay", appendAnswerOverlay)

                          const info = this.create("header/info", appendAnswerOverlay)
                          info.append(this.convert("element/alias", child))
                          {
                            const span = document.createElement("span")
                            span.innerHTML = ".append"
                            info.append(span)
                          }

                          const answerFunnel = this.create("div/scrollable", appendAnswerOverlay)

                          const answerField = this.create("field/textarea", answerFunnel)
                          answerField.label.innerHTML = "Antwortmöglichkeit"
                          answerField.input.setAttribute("required", "true")
                          this.verify("input/value", answerField.input)
                          answerField.input.addEventListener("input", () => this.verify("input/value", answerField.input))

                          const selectedConditionButton = this.create("button/left-right", answerFunnel)
                          selectedConditionButton.left.innerHTML = ".onclick"
                          selectedConditionButton.right.innerHTML = "Klick Bedingung definieren"
                          selectedConditionButton.addEventListener("click", () => {

                            this.overlay("toolbox", conditionFunnelOverlay => {
                              this.add("button/remove-overlay", conditionFunnelOverlay)

                              const info = this.create("header/info", conditionFunnelOverlay)
                              info.append(this.convert("element/alias", child))
                              {
                                const span = document.createElement("span")
                                span.innerHTML = `.onclick`
                                info.append(span)
                              }


                              const content = this.create("div/scrollable", conditionFunnelOverlay)

                              const actionField = this.create("field/select", content)
                              actionField.label.innerHTML = "Wähle ein Event"
                              actionField.input.add(["skip", "path"])
                              this.verify("input/value", actionField.input)
                              actionField.input.addEventListener("input", () => {

                                if (actionField.input.value === "skip") {

                                  skipNumberField.input.disabled = false
                                  skipNumberField.input.required = true
                                  this.setNotValidStyle(skipNumberField.input)

                                  pathField.input.disabled = true
                                  pathField.input.required = false
                                  pathField.input.value = ""
                                  this.setValidStyle(pathField.input)

                                }

                                if (actionField.input.value === "path") {

                                  skipNumberField.input.disabled = true
                                  skipNumberField.input.required = false
                                  skipNumberField.input.value = ""
                                  this.setValidStyle(skipNumberField.input)

                                  pathField.input.disabled = false
                                  pathField.input.required = true
                                  this.setNotValidStyle(pathField.input)

                                }

                              })

                              const skipNumberField = this.create("field/tel", content)
                              skipNumberField.input.setAttribute("required", "true")
                              skipNumberField.input.pattern = "[1-9]"
                              skipNumberField.label.innerHTML = "Wieviele Fragen möchtest du überspringen"
                              this.verify("input/value", skipNumberField.input)
                              skipNumberField.input.addEventListener("input", () => this.verify("input/value", skipNumberField.input))

                              const pathField = this.create("field/text", content)
                              pathField.input.disabled = true
                              pathField.input.accept = "text/path"
                              pathField.input.placeholder = "/meine-platform/mein-username/meine-werteinheit/"
                              pathField.label.innerHTML = "Gebe eine Pfad ein"
                              this.setValidStyle(pathField.input)
                              pathField.input.addEventListener("input", () => this.verify("input/value", pathField.input))

                              const conditionSubmitButton = this.create("button/action", content)
                              conditionSubmitButton.innerHTML = "Klick Bedingung hinzufügen"
                              conditionSubmitButton.addEventListener("click", async () => {

                                const condition = {}
                                condition.event = actionField.input.value

                                if (condition.event === "skip") {
                                  await this.verify("input/value", skipNumberField.input)
                                  condition.skip = skipNumberField.input.value
                                  answerBox.answer.setAttribute("onclick-condition", JSON.stringify(condition))
                                }

                                if (condition.event === "path") {
                                  await this.verify("input/value", pathField.input)
                                  condition.path = pathField.input.value
                                  answerBox.answer.setAttribute("onclick-condition", JSON.stringify(condition))
                                }

                                this.remove("overlay", conditionFunnelOverlay)
                              })

                            })



                          })

                          const appendAnswerButton = this.create("button/action", answerFunnel)
                          appendAnswerButton.innerHTML = "Option jetzt anhängen"
                          appendAnswerButton.addEventListener("click", async () => {

                            await this.verify("input/value", answerField.input)
                            const answer = answerField.input.value

                            answerBox.answer.textContent = answer

                            child.querySelector(".answers").append(answerBox)

                            this.render("click-field/answers", document.getElementById(child.id), answers)

                            this.remove("overlay", appendAnswerOverlay)

                          })



                        })
                      })
                    }

                    const answers = this.create("div/scrollable", answersOverlay)
                    this.render("click-field/answers", document.getElementById(child.id), answers)

                  })
                })




              })
            })
          }

        }





      }

    }

    if (event === "question/answers") {

      const output = document.createElement("div")
      for (let i = 0; i < input.length; i++) {
        const element = input[i]

        const button = this.create("button/left-right")
        button.left.innerHTML = `Option: ${i + 1}`

        // const right = document.createElement("div")
        // right.style.width = "34%"
        // right.style.overflowX = "auto"
        // right.innerHTML = element.value



        button.right.innerHTML = element.value
        // button.right.append(right)

        // on click
        // change id and value and image
        // delete
        // change answers if exist
        output.append(button)
      }




      if (parent !== undefined) parent.append(output)
      return output
    }

    if (event === "funnel/field-input") {

      if (parent === undefined) {
        document.querySelectorAll(".funnel-field-input").forEach(div => {
          this.render(event, {type: input.type, field: input.field}, div)
        })
      }

      if (parent !== undefined) {
        if (!parent.classList.contains("funnel-field-input")) {
          parent.classList.add("funnel-field-input")
        }
      }

      if (parent !== undefined) {
        parent.innerHTML = ""
      }


      if (input !== undefined) {

        if (input.type !== "select") {

          const requiredField = this.create("field/checkbox", parent)
          requiredField.label.innerHTML = "Dieses Datenfeld ist notwendig"
          this.verify("input/value", requiredField.input)
          if (input.field !== undefined) {
            if (input.field.classList.contains("field")) {
              const fieldInput = input.field.querySelector(".field-input")
              if (fieldInput.hasAttribute("required")) {
                requiredField.input.checked = true
              }
            }
          }
          requiredField.input.addEventListener("input", (event) => {

            if (input.field !== undefined) {
              if (input.field.classList.contains("field")) {
                const fieldInput = input.field.querySelector(".field-input")

                if (event.target.checked === true) {
                  fieldInput.setAttribute("required", true)
                }

                if (event.target.checked === false) {
                  fieldInput.removeAttribute("required")
                }

              }
            }


          })

        }

        if (input.type === "select") {

          {
            const button = this.create("button/left-right", parent)
            button.left.innerHTML = ".options"
            button.right.innerHTML = "Antwortmöglichkeiten definieren"
            button.addEventListener("click", () => {

              const fieldInput = input.field.querySelector(".field-input")

              this.overlay("toolbox", overlay => {
                this.add("button/remove-overlay", overlay)
                this.add("button/register-html", overlay)

                const info = this.create("header/info", overlay)
                info.append(this.convert("input/alias", input.field))
                info.append(this.convert("text/span", ".options"))

                {
                  const button = this.create("button/left-right", overlay)
                  button.left.innerHTML = ".append"
                  button.right.innerHTML = "Neue Antwortmöglichkeit anhängen"
                  button.addEventListener("click", () => {


                    this.overlay("toolbox", overlay => {
                      this.add("button/remove-overlay", overlay)

                      const info = this.create("header/info", overlay)
                      info.append(this.convert("input/alias", fieldInput))
                      info.append(this.convert("text/span", ".option.append"))

                      fieldInput.ok = () => {
                        this.render("select/options", fieldInput)
                        this.remove("overlay", overlay)
                      }

                      this.get("funnel/select-option", overlay, fieldInput)

                    })
                  })
                }

                this.render("text/hr", "Meine Optionen", overlay)

                const options = this.create("div/scrollable", overlay)
                this.render("select/options", fieldInput, options)

              })
            })
          }

        }

        // add more input dom functions


      }

    }

    if (event === "funnel/questions") {

      const output = document.createElement("div")
      for (let i = 0; i < input.length; i++) {
        const element = input[i]

        const button = this.create("button/left-right")
        button.left.innerHTML = `Frage: ${i + 1}`
        button.right.innerHTML = element.id

        // on click
        // change id and value
        //
        // delete
        // change answers if exist
        output.append(button)


      }

      if (parent !== undefined) parent.append(output)
      return output
    }

    if (event === "object/selector/write-details") {

      const node = document.querySelector(parent)

      for (let i = 0; i < document.querySelectorAll("*").length; i++) {
        const child = document.querySelectorAll("*")[i]

        if (child.hasAttribute("write-details")) {

          child.removeAttribute("style")
          child.innerHTML = ""
          child.style.display = "flex"
          child.style.flexDirection = "column"
          child.style.gap = "8px"
          child.style.maxHeight = "144px"
          child.style.overflow = "auto"

          Object.entries(input).forEach(([key, value]) => {

            const keyValuePair = document.createElement("div")
            keyValuePair.classList.add("key-value-pair")
            keyValuePair.style.display = "flex"
            keyValuePair.style.flexWrap = "wrap"
            keyValuePair.style.borderRadius = "5px"
            child.append(keyValuePair)

            const keyDiv = document.createElement("key")
            keyDiv.classList.add("key")
            keyDiv.innerHTML = this.convert("tag/capital-first-letter", key) + ":"
            keyValuePair.append(keyDiv)

            const valueDiv = document.createElement("div")
            valueDiv.innerHTML = value
            valueDiv.classList.add("value")
            valueDiv.style.fontWeight = "bold"
            valueDiv.style.marginLeft = "5px"
            keyValuePair.append(valueDiv)

          })

        }

      }

    }

    if (event === "object/node/write-details") {

      if (parent.hasAttribute("write-details")) {

        parent.removeAttribute("style")
        parent.innerHTML = ""
        parent.style.display = "flex"
        parent.style.flexDirection = "column"
        parent.style.gap = "8px"
        parent.style.maxHeight = "144px"
        parent.style.overflow = "auto"

        Object.entries(input).forEach(([key, value]) => {

          const keyValuePair = document.createElement("div")
          keyValuePair.classList.add("key-value-pair")
          keyValuePair.style.display = "flex"
          keyValuePair.style.flexWrap = "wrap"
          keyValuePair.style.borderRadius = "5px"
          parent.append(keyValuePair)

          const keyDiv = document.createElement("key")
          keyDiv.classList.add("key")
          keyDiv.innerHTML = this.convert("tag/capital-first-letter", key) + ":"
          keyValuePair.append(keyDiv)

          const valueDiv = document.createElement("div")
          valueDiv.innerHTML = value
          valueDiv.classList.add("value")
          valueDiv.style.fontWeight = "bold"
          valueDiv.style.marginLeft = "5px"
          keyValuePair.append(valueDiv)

        })

      }

    }

    if (event === "object/node/popup-details") {
      if (parent.hasAttribute("popup-details")) {

        parent.style.cursor = "pointer"
        parent.onclick = () => {
          this.overlay("popup", overlay => {
            this.render("text/title", "Detailansicht", overlay)

            const content = this.create("div/scrollable", overlay)
            content.style.display = "grid"
            content.style.gridTemplateColumns = "repeat(auto-fit, minmax(300px, 1fr))"
            content.style.gap = "21px"
            content.style.margin = "21px 34px"

            Object.entries(input).forEach(([key, value]) => {

              const keyValuePair = document.createElement("div")
              keyValuePair.classList.add("key-value-pair")

              keyValuePair.style.backgroundColor = this.colors.gray[0]
              keyValuePair.style.border = this.colors.light.border
              keyValuePair.style.color = this.colors.light.text
              keyValuePair.style.boxShadow = this.colors.light.boxShadow
              if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                keyValuePair.style.backgroundColor = this.colors.matte.black
                keyValuePair.style.border = this.colors.dark.border
                keyValuePair.style.boxShadow = this.colors.dark.boxShadow
                keyValuePair.style.color = this.colors.dark.text
              }
              keyValuePair.style.display = "flex"
              keyValuePair.style.flexDirection = "column"
              keyValuePair.style.padding = "1rem"
              keyValuePair.style.borderRadius = "5px"
              content.append(keyValuePair)

              const keyDiv = document.createElement("key")
              keyDiv.classList.add("key")
              keyDiv.style.fontWeight = "bold"
              keyDiv.style.marginBottom = "0.5rem"
              keyDiv.innerHTML = key
              keyDiv.style.color = this.colors.key
              keyValuePair.append(keyDiv)

              const valueDiv = document.createElement("div")
              valueDiv.innerHTML = value
              valueDiv.classList.add("value")
              valueDiv.style.color = this.colors.value
              keyValuePair.append(valueDiv)

            })

          })
        }

      }

    }

    if (event === "object/selector/class") {

      const node = document.querySelector(parent)

      if (node) {

        Object.entries(input).forEach(([key, value]) => {
          for (let i = 0; i < node.querySelectorAll("*").length; i++) {
            const child = node.querySelectorAll("*")[i]

            if (child.classList.contains(key)) {
              child.innerHTML = value
            }
          }
        })

      }

    }

    if (event === "object/selector/all") {

      const node = document.querySelector(parent)

      if (node) {

        Object.entries(input).forEach(([key, value]) => {
          for (let i = 0; i < node.querySelectorAll("*").length; i++) {
            const child = node.querySelectorAll("*")[i]

            this.render("object/node/write-details", input, child)
            this.render("object/node/popup-details", input, child)

            if (child.classList.contains(key)) {

              if (key === "bild") {
                child.src = value
              } else {
                child.innerHTML = value
              }

            }
          }
        })

      }

    }

    if (event === "object/node/all") {

      Object.entries(input).forEach(([key, value]) => {
        for (let i = 0; i < parent.querySelectorAll("*").length; i++) {
          const child = parent.querySelectorAll("*")[i]

          this.render("object/node/write-details", input, child)
          this.render("object/node/popup-details", input, child)

          if (child.classList.contains(key)) {

            if (key === "image") {
              child.src = value
            } else {
              child.innerHTML = value
            }

          }
        }
      })

    }

    if (event === "values/node/alias-path") {
      this.convert("parent/scrollable", parent)
      for (let i = 0; i < input.length; i++) {
        const value = input[i]

        const button = Helper.create("button/left-right", parent)
        button.right.style.margin = ""
        button.left.innerHTML = `<span style="font-size:13px;">${value.alias}</span><br/><span>${value.path}</span>`
        button.onclick = () => window.open(value.path, "_blank")

        this.render("icon/node/path", "/public/window-chain.svg", button.right).then(icon => {
          icon.style.width = "55px"
          icon.style.margin = "0 13px 0 34px"
          icon.onclick = (ev) => {
            ev.stopPropagation()
            navigator.clipboard.writeText(value.path)
            .then(() => window.alert(`Der Pfad '${value.path}' wurde erfolgreich in deinen Zwischenspeicher kopiert.`))
            .catch(() => window.alert("Fehler.. Bitte wiederholen."))
          }
        })
      }
      return parent
    }

  }

  static remove(event, input) {

    if (event === "element/inner") {
      input.innerHTML = ""
    }

    if (event === "element/style") {
      input.removeAttribute("style")
    }

    if (event === "element/selector") {
      return new Promise(async(resolve, reject) => {
        try {

          const promises = []
          input.element.querySelectorAll(input.selector).forEach(it => {
            const promise = new Promise(innerResolve => {
              it.remove()
              innerResolve()
            })
            promises.push(promise)
          })
          await Promise.all(promises)

          resolve()

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "toolbox") {

      return new Promise(async(resolve, reject) => {
        try {

          await this.remove("element/selector", {element: input, selector: "#toolbox-getter"})
          await this.remove("element/selector", {element: input, selector: "[data-id]"})
          await this.remove("element/selector", {element: input, selector: "#toolbox"})
          await this.remove("element/selector", {element: input, selector: ".overlay"})

          resolve()

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "element/selected-node") {

      return new Promise(async(resolve, reject) => {
        try {

          const promises = []
          input.querySelectorAll("*").forEach(element => {
            const promise = new Promise(innerResolve => {
              element.style.outline = null
              element.removeAttribute("selected-node")
              innerResolve()
            })
            promises.push(promise)
          })
          await Promise.all(promises)

          input.style.outline = null
          input.removeAttribute("selected-node")

          resolve()

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "element") {
      input.remove()
    }

    if (event === "event-listener") {
      Array.from(document.querySelectorAll('*')).forEach(element => element.replaceWith(element.cloneNode(true)));
    }

    if (event === "overlays") {
      document.querySelectorAll(".overlay").forEach(it => it.remove())
    }

    if (event === "overlay") {
      input.remove()
    }

    if (event === "node/sign") {
      input.style.border = ""
      input.parentElement.querySelectorAll("div.sign").forEach(it => it.remove())
    }

  }

  static request(event, input) {

    if (event === "closed/json") {
      return new Promise(async(resolve, reject) => {
        try {

          input.location = window.location.href
          input.referer = document.referrer
          input.localStorageEmail = await this.get("email/local-storage")
          input.localStorageId = await this.get("id/local-storage")

          const xhr = new XMLHttpRequest()
          xhr.open("POST", input.url)
          xhr.setRequestHeader("Accept", "application/json")
          xhr.setRequestHeader("Content-Type", "application/json")
          xhr.overrideMimeType("text/html")
          xhr.withCredentials = true
          xhr.onload = () => resolve(xhr)
          xhr.send(JSON.stringify(input))

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "location/json") {
      return new Promise(async(resolve, reject) => {
        try {

          input.location = window.location.href
          input.referer = document.referrer

          const xhr = new XMLHttpRequest()
          xhr.open("POST", input.url)
          xhr.setRequestHeader("Accept", "application/json")
          xhr.setRequestHeader("Content-Type", "application/json")
          xhr.overrideMimeType("text/html")
          xhr.withCredentials = true
          xhr.onload = () => resolve(xhr)
          xhr.send(JSON.stringify(input))

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "open/json") {
      return new Promise(async(resolve, reject) => {
        try {

          const xhr = new XMLHttpRequest()
          xhr.open("POST", input.url)
          xhr.setRequestHeader("Accept", "application/json")
          xhr.setRequestHeader("Content-Type", "application/json")
          xhr.overrideMimeType("text/html")
          xhr.withCredentials = true
          xhr.onload = () => resolve(xhr)
          xhr.send(JSON.stringify(input))

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "open-closed/json") {
      return new Promise(async(resolve, reject) => {
        try {

          input.location = window.location.href
          input.referer = document.referrer
          input.localStorageEmail = window.localStorage.getItem("email")
          input.localStorageId = window.localStorage.getItem("localStorageId")

          const xhr = new XMLHttpRequest()
          xhr.open("POST", input.url)
          xhr.setRequestHeader("Accept", "application/json")
          xhr.setRequestHeader("Content-Type", "application/json")
          xhr.overrideMimeType("text/html")
          xhr.withCredentials = true
          xhr.onload = () => resolve(xhr)
          xhr.send(JSON.stringify(input))

        } catch (error) {
          reject(error)
        }
      })
    }

  }

  static send(event, input) {
    // event = thing/to/algo

    if (event === "email/location-expert/open-lead") {

      return new Promise(async(resolve, reject) => {
        try {
          const send = {}
          send.url = "/send/email/open/"
          send.type = "lead-location-expert"
          send.template = input.template
          send.subject = input.subject
          const res = await this.request("closed/json", send)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })


    }

    if (event === "email/user/test-template") {

      return new Promise(async(resolve, reject) => {
        try {
          const send = {}
          send.url = "/send/email/closed/"
          send.type = "test-template"
          send.template = input.template
          send.subject = input.subject
          const res = await this.request("closed/json", send)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })


    }

    if (event === "email/user/send-template") {

      return new Promise(async(resolve, reject) => {
        try {
          const send = {}
          send.url = "/send/email/closed/"
          send.type = "send-template"
          send.template = input.template
          send.subject = input.subject
          send.email = input.email
          const res = await this.request("closed/json", send)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })


    }

  }

  static sort(event, input) {
    // event = input/by/algorithm

    if (event === "array/reputation/descending") {
      return input?.sort((a, b) => b.reputation - a.reputation)
    }

  }

  static update(event, parent, input) {
    // event = tag/on/algorithm

    // no parent needed to get data
    if (arguments.length === 2) {
      input = parent
    }

    if (event === "toolbox/html/path") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/update/toolbox/closed/"
          register.type = "path/location-expert"
          register.path = input
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "key-name/user-tree/admin") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/update/user/closed/"
          register.type = "key-name/tree-admin"
          register.id = input.id
          register.tree = input.tree
          register.name = input.name
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "number/user-tree/admin") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/update/user/closed/"
          register.type = "number/tree-admin"
          register.id = input.id
          register.tree = input.tree
          register.number = input.number
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "text/user-tree/admin") {
      return new Promise(async(resolve, reject) => {
        try {
          const register = {}
          register.url = "/update/user/closed/"
          register.type = "text/tree-admin"
          register.id = input.id
          register.tree = input.tree
          register.text = input.text
          const res = await this.request("closed/json", register)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "script/closed") {
      return new Promise(async (resolve, reject) => {

        try {
          const update = {}
          update.url = "/update/script/closed/"
          update.type = "closed"
          update.id = input.id
          update.name = input.name
          update.script = input.script
          const res = await this.request("closed/json", update)

          resolve(res)

        } catch (error) {
          reject(error)
        }

      })
    }

    if (event === "condition/match-maker/closed") {
      return new Promise(async (resolve, reject) => {

        try {
          const update = {}
          update.url = "/update/match-maker/closed/"
          update.type = "condition"
          update.id = input.id
          update.left = input.left
          update.operator = input.operator
          update.right = input.right
          const res = await this.request("closed/json", update)

          resolve(res)

        } catch (error) {
          reject(error)
        }


      })
    }

    if (event === "tag/location/list-email-expert") {
      return new Promise(async(resolve, reject) => {
        try {
          const update = {}
          update.url = "/update/location/closed/"
          update.type = "list-email-expert"
          update.email = input.email
          update.id = input.id
          update.item = input.item
          update.path = input.path
          update.tag = input.tag
          const res = await this.request("closed/json", update)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "tag/location/list-self") {
      return new Promise(async(resolve, reject) => {
        try {
          const update = {}
          update.url = "/update/location/closed/"
          update.type = "list-self"
          update.tag = input.tag
          update.item = input.item
          update.created = input.created
          const res = await this.request("closed/json", update)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "toolbox-getter") {

      return new Promise(async resolve => {

        document.querySelectorAll("#toolbox-getter").forEach(getter => getter.remove())
        document.querySelectorAll("#toolbox").forEach(toolbox => toolbox.remove())
        document.querySelectorAll("[data-id='toolbox']").forEach(toolbox => toolbox.remove())

        if (document.getElementById("#toolbox-getter") === null) {
          await this.add("script/toolbox-getter")
          return resolve()
        }

      })

    }

    if (event === "image/onclick") {

      const funnel = this.create("div/scrollable", parent)

      const urlField = this.create("field/url", funnel)
      urlField.input.required = true
      urlField.input.accept = "text/https"
      urlField.label.innerHTML = "Gebe hier die Quell-Url für dein Bild ein"
      urlField.input.placeholder = "https://www.meine-quelle.de"

      this.verify("input/value", urlField.input)
      urlField.input.addEventListener("input", () => this.verify("input/value", urlField.input))

      const button = this.create("button/action", funnel)
      button.innerHTML = "Bild jetzt ändern"
      button.addEventListener("click", async () => {

        if (this.verify("input/value", urlField.input)) {

          const url = urlField.input.value

          if (input !== undefined) {
            if (input.ok !== undefined) await input.ok(url)
          }
        }

      })

    }

    if (event === "image/platform-value/closed") {

      const funnel = this.create("div/scrollable", parent)

      const urlField = this.create("field/url", funnel)
      urlField.input.required = true
      urlField.input.accept = "text/https"
      urlField.label.innerHTML = "Gebe hier die Quell-Url für dein Bild ein"
      urlField.input.placeholder = "https://www.meine-quelle.de"
      // this.setNotValidStyle(urlField.input)
      // urlField
      this.verify("input/value", urlField.input)
      urlField.input.addEventListener("input", () => this.verify("input/value", urlField.input))

      const button = this.create("button/action", funnel)
      button.innerHTML = "Bild jetzt ändern"
      button.addEventListener("click", () => {

        if (this.verify("input/value", urlField.input)) {

          const url = urlField.input.value

          this.overlay("security", async securityOverlay => {

            // let image
            // if (imageFile !== undefined) {

            //   if (imageFile.type === "image/svg+xml") {

            //     image = await imageField.validSvg(imageFile)

            //   } else {

            //     image = await imageField.validImage(imageFile)

            //   }

            // }


            // quick update
            // on success no message
            // just remove security overlay
            const register = {}
            register.url = "/update/platform-value-image/closed/"
            // register.type = "image"
            register.image = url
            register.path = input.path
            const res = await this.request("closed/json", register)

            if (res.status === 200) {
              window.alert("Bild erfolgreich gespeichert..")
              this.remove("overlay", parent)
              this.remove("overlay", securityOverlay)

            } else {
              window.alert("Fehler.. Bitte wiederholen.")
              this.remove("overlay", securityOverlay)
            }

          })

        }

      })

    }

    if (event === "image/platform/closed") {

      const funnel = this.create("div/scrollable", parent)

      const urlField = this.create("field/url", funnel)
      urlField.input.required = true
      urlField.input.accept = "text/https"
      urlField.label.innerHTML = "Gebe hier die Quell-Url für dein Bild ein"
      urlField.input.placeholder = "https://www.meine-quelle.de"
      // this.setNotValidStyle(urlField.input)
      // urlField
      this.verify("input/value", urlField.input)
      urlField.input.addEventListener("input", () => this.verify("input/value", urlField.input))

      const button = this.create("button/action", funnel)
      button.innerHTML = "Bild jetzt ändern"
      button.addEventListener("click", () => {

        if (this.verify("input/value", urlField.input)) {

          const url = urlField.input.value

          this.overlay("security", async securityOverlay => {

            // let image
            // if (imageFile !== undefined) {

            //   if (imageFile.type === "image/svg+xml") {

            //     image = await imageField.validSvg(imageFile)

            //   } else {

            //     image = await imageField.validImage(imageFile)

            //   }

            // }


            // quick update
            // on success no message
            // just remove security overlay
            const register = {}
            register.url = "/update/platform-image/closed/"
            // register.type = "image"
            register.image = url
            register.platform = input
            const res = await this.request("closed/json", register)

            if (res.status === 200) {
              window.alert("Bild erfolgreich gespeichert..")
              // window.location.reload()
              this.remove("overlay", parent)
              this.remove("overlay", securityOverlay)

            } else {
              window.alert("Fehler.. Bitte wiederholen.")
              this.remove("overlay", securityOverlay)
            }

          })

        }

      })

    }

    if (event === "element/type") {

      const create = document.createElement(input)

      if (parent.hasAttribute("id")) {
        create.setAttribute("id", parent.getAttribute("id"))
      }

      create.setAttribute("type", input)

      if (parent.hasAttribute("class")) {
        create.setAttribute("class", parent.getAttribute("class"))
      }

      if (parent.hasAttribute("style")) {
        create.setAttribute("style", parent.getAttribute("style"))
      }

      parent.before(create)
      parent.remove()
    }

    if (event === "input/type") {

      const create = document.createElement("input")

      if (parent.hasAttribute("id")) {
        create.setAttribute("id", parent.getAttribute("id"))
      }

      create.setAttribute("type", input)

      if (parent.hasAttribute("class")) {
        create.setAttribute("class", parent.getAttribute("class"))
      }

      if (parent.hasAttribute("style")) {
        create.setAttribute("style", parent.getAttribute("style"))
      }

      if (parent.hasAttribute("required")) {
        create.setAttribute("required", parent.getAttribute("required"))
      }

      if (parent.hasAttribute("on-info-click")) {
        create.setAttribute("on-info-click", parent.getAttribute("on-info-click"))
      }

      parent.before(create)
      parent.remove()
    }

    if (event === "field-input/type") {

      if (parent.tagName !== "TEXTAREA") {

        if (input === "textarea") {
          this.convert("element/textarea", parent)
        }

      }

      if (parent.tagName !== "SELECT") {
        if (input === "select") {
          this.convert("element/select", parent)
        }
      }

      this.update("input/type", parent, input)

    }

    if (event === "script/on-field-info-click-event") {

      const text = /*html*/`
      <script id="on-field-info-click-event" type="module">
        import {Helper} from "/js/Helper.js"

        document.querySelectorAll(".field").forEach(field => {
          if (field.hasAttribute("on-info-click")) {
            Helper.convert("field/on-info-click", field)
          }
        })

      </script>
      `

      const script = this.convert("text/script", text)

      const create = document.createElement("script")
      create.id = script.id
      create.type = script.type
      create.innerHTML = script.innerHTML

      if (parent !== undefined) {

        if (parent.querySelector(`#${create.id}`) === null) {
          parent.append(create)
          this.render("children", parent)
        }

      }

      return create

    }

    if (event === "service-condition/closed") {

      return new Promise(async (resolve, reject) => {

        const update = {}
        update.url = "/update/service-condition/closed/"

        if (input !== undefined) {
          update.platform = input.platform
          update.service = input.service
          update.id = input.id
          update.left = input.left
          update.operator = input.operator
          update.right = input.right
          update.action = input.action
        }

        const res = await this.request("closed/json", update)


        if (res.status === 200) {
          return resolve()
        }

      })
    }

    if (event === "source/user/self") {

      return new Promise(async(resolve, reject) => {
        try {
          const update = {}
          update.url = "/update/sources/closed/"
          update.type = "id-self"
          update.id = input.source.created
          update.source = input.source
          const res = await this.request("closed/json", update)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "platform/roles") {

      return new Promise(async (resolve, reject) => {


        const content = this.create("info/loading", parent)


        const get = {}
        get.url = "/get/platform/closed"
        get.type = "roles"
        get.platform = input
        const res = await this.request("closed/json", get)


        if (res.status === 200) {
          const roles = JSON.parse(res.response)

          this.convert("parent/scrollable", content)

          for (let i = 0; i < roles.length; i++) {
            const role = roles[i]

            const button = this.create("button/left-right", content)
            button.left.innerHTML = role.name
            button.right.innerHTML = "Rolle bearbeiten"

            button.addEventListener("click", () => {

              this.overlay("toolbox", async overlay => {

                this.add("button/remove-overlay", overlay)
                const info = this.create("header/info", overlay)
                info.innerHTML = `${input}.roles`

                await this.update("platform/role", overlay, {platform: input, roleId: role.id, ok: () => {
                  this.convert("element/reset", content)
                  this.update(event, content, input)
                  this.remove("overlay", overlay)
                }})

              })

            })


          }

          return resolve(content)

        }

      })
    }

    if (event === "platform/role") {

      return new Promise(async (resolve, reject) => {

        const content = this.create("div/scrollable", parent)

        const {platform, roleId, ok} = input

        const nameField = this.create("field/tag", content)
        nameField.label.textContent = "Rolle"
        nameField.input.placeholder = "meine-neue-rolle"
        this.verify("input/value", nameField.input)
        nameField.input.addEventListener("input", () => this.verify("input/value", nameField.input))

        const pathsField = await this.get("field/platform-value-path-select", content, input)

        const appsField = this.create("field/textarea", content)
        appsField.label.innerHTML = "Schalte Apps für deine Rolle frei (mit einer Javascript String Liste)"
        appsField.input.style.height = "144px"
        appsField.input.placeholder = `["offer", "funnel", ..]`
        appsField.input.accept = `string/array`
        appsField.input.required = true
        appsField.input.value = JSON.stringify([])
        this.verify("input/value", appsField.input)
        appsField.input.addEventListener("input", () => this.verify("input/value", appsField.input))

        const button = this.create("button/action", content)
        button.innerHTML = "Rolle jetzt speichern"
        button.addEventListener("click", async () => {

          await this.verify("field-funnel", content)

          const name = nameField.input.value
          const path = pathsField.input.value
          const apps = JSON.parse(appsField.input.value)

          if (roleId === undefined) {

            const verify = {}
            verify.url = "/verify/platform/closed/"
            verify.type = "role/name"
            verify.name = name
            verify.platform = platform
            const res = await this.request("closed/json", verify)

            if (res.status === 200) {
              window.alert("Diese Rolle existiert bereits.")
              this.setNotValidStyle(nameField.input)
              throw new Error("name exist")
            }

          }

          this.overlay("security", async securityOverlay => {

            const register = {}
            register.url = "/update/platform/closed/"
            register.type = "role"

            register.platform = platform

            if (roleId !== undefined) {
              register.id = roleId
            }

            register.name = name
            register.apps = apps
            register.home = path

            const res = await this.request("closed/json", register)

            if (res.status === 200) {
              window.alert("Rolle erfolgreich gespeichert.")
              if (ok !== undefined) ok()
              this.remove("overlay", parent)
              this.remove("overlay", securityOverlay)
            }

          })

        })

        if (roleId !== undefined) {

          const get = {}
          get.url = "/get/platform/closed/"
          get.type = "role"
          get.id = roleId
          get.platform = platform
          const res = await this.request("closed/json", get)

          if (res.status !== 200) {
            reject()
          }

          if (res.status === 200) {
            const role = JSON.parse(res.response)

            if (role.id !== roleId) throw new Error("somethng wrong here")

            nameField.input.value = role.name
            this.verify("input/value", nameField.input)

            appsField.input.value = JSON.stringify(role.apps)
            this.verify("input/value", appsField.input)

            const deleteButton = this.create("button/action", content)
            deleteButton.style.backgroundColor = this.colors.dark.error
            deleteButton.style.color = this.colors.light.text
            deleteButton.innerHTML = "Rolle entfernen"
            deleteButton.addEventListener("click", () => {

              this.overlay("security", async securityOverlay => {
                const del = {}
                del.url = "/delete/platform/closed/"
                del.type = "role"
                del.id = role.id
                del.platform = platform
                const res = await this.request("closed/json", del)

                if (res.status === 200) {
                  window.alert("Rolle erfolgreich gelöscht.")
                  if (ok !== undefined) ok()
                  this.remove("overlay", securityOverlay)
                }

              })


            })

            resolve()
          }

        }

      })

    }

  }

  static skipSiblings(index, sibling) {

    let count = 0
    let currentSibling = sibling

    while (currentSibling) {
      if (count >= index) break

      const nextSibling = currentSibling.nextSibling

      if (currentSibling.nodeType === Node.ELEMENT_NODE) {
        count++
        currentSibling.style.visibility = 'hidden'
        currentSibling.style.position = 'absolute'
      }

      currentSibling = nextSibling
    }

    if (currentSibling && currentSibling.nodeType === Node.ELEMENT_NODE) {
      currentSibling.style.visibility = 'visible'
      currentSibling.style.position = 'static'
    }

    if (count < index) throw new Error("out of bounds")

  }

  static setNotValidStyle(element) {

    let color
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      color = this.colors.light.error
    } else {
      color = this.colors.light.error
    }



    element.style.border = `2px solid ${color}`
    if (element.type === "checkbox") {


      element.style.outline = `2px solid ${color}`
    }
    element.style.borderRadius = "3px"
    const signs = element.parentNode.querySelectorAll("div[class='sign']")
    if (signs.length === 0) {
      const sign = document.createElement("div")
      sign.classList.add("sign")
      sign.innerHTML = "x"
      sign.style.position = "absolute"
      sign.style.right = "34px"
      sign.style.color = color
      sign.style.fontSize = "34px"
      sign.style.fontFamily = "sans-serif"
      element.parentNode.append(sign)
      return element
    }
    if (signs.length > 0) {
      signs.forEach(sign => sign.remove())
      const sign = document.createElement("div")
      sign.classList.add("sign")
      sign.innerHTML = "x"
      sign.style.position = "absolute"
      sign.style.right = "34px"
      sign.style.color = color
      sign.style.fontSize = "34px"
      sign.style.fontFamily = "sans-serif"
      element.parentNode.append(sign)
      return element
    }
    return element
  }

  static setValidStyle(element) {
    element.style.border = "2px solid #00c853"
    if (element.type === "checkbox") {
      element.style.outline = "2px solid #00c853"
    }
    element.style.borderRadius = "3px"
    const signs = element.parentNode.querySelectorAll("div[class='sign']")
    if (signs.length === 0) {
      const sign = document.createElement("div")
      sign.classList.add("sign")

      sign.innerHTML = "✓"
      sign.style.position = "absolute"
      sign.style.right = "34px"
      sign.style.color = "#00c853"
      sign.style.fontSize = "34px"
      sign.style.fontFamily = "sans-serif"
      element.parentNode.append(sign)
      return element
    }
    if (signs.length > 0) {
      signs.forEach(sign => sign.remove())
      const sign = document.createElement("div")
      sign.classList.add("sign")

      sign.innerHTML = "✓"
      sign.style.position = "absolute"
      sign.style.right = "34px"
      sign.style.color = "#00c853"
      sign.style.fontSize = "34px"
      sign.style.fontFamily = "sans-serif"
      element.parentNode.append(sign)
      return element
    }
    return element
  }

  // promises only
  static verify(event, input, check) {
    // event = input/algo

    if (event === "any/key/exist") {

      if (!this.verifyIs("object", input)) return false
      if (input.hasOwnProperty(check)) return true
      for (const key in input) {
        if (input.hasOwnProperty(key) && typeof input[key] === 'object') {
          if (this.verify(event, input[key], check)) {
            return true
          }
        }
      }
      return false

    }

    if (event === "field-funnel") {
      return new Promise(async(resolve, reject) => {
        try {

          const promises = []
          input.querySelectorAll(".field").forEach(async field => {
            const fieldInput = field.querySelector(".field-input")
            const promise = this.verifyIs("input/valid", fieldInput)

            promises.push(promise)
          })

          const results = await Promise.all(promises)

          if (results.every((element) => element === true)) {
            resolve()
          } else {
            for (let i = 0; i < input.querySelectorAll(".field").length; i++) {
              const field = input.querySelectorAll(".field")[i]
              const fieldInput = field.querySelector(".field-input")
              const res = await this.verifyIs("input/valid", fieldInput)
              if (res === false) {
                field.scrollIntoView({ behavior: "smooth", block: "start" })
                break
              }
            }
          }

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "platform-name/exist-open") {
      return new Promise(async(resolve, reject) => {
        try {

          const verify = {}
          verify.url = "/verify/platform/open/"
          verify.type = "exist-name"
          verify.platform = input
          const res = await this.request("open/json", verify)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "match-maker-conditions/closed") {

      return new Promise(async(resolve, reject) => {
        try {

          const verify = {}
          verify.url = "/verify/match-maker/closed"
          verify.type = "conditions"
          verify.conditions = input
          const res = await this.request("closed/json", verify)

          resolve(res)

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "match-maker-name/open") {
      return new Promise(async(resolve, reject) => {
        try {
          const verify = {}
          verify.url = "/verify/match-maker/open/"
          verify.type = "name"
          verify.name = input
          const res = await this.request("open/json", verify)

          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "input/value") {

      return new Promise(async(resolve, reject) => {
        try {

          const res = await this.verifyIs("input/valid", input)

          if (res === true) resolve()

          if (res === false) throw new Error("input invalid")

        } catch (error) {
          reject(error)
        }
      })

    }

  }

  // return boolean only
  static verifyIs(event, input) {

    if (event === "array") {
      if (typeof input === "object") {
        if (Array.isArray(input)) return true
      }
      return false
    }

    if (event === "array/empty") {
      return typeof array !== "object" ||
      array === undefined ||
      array === null ||
      array.length <= 0 ||
      !Array.isArray(array)
    }

    if (event === "object") {
      if (typeof input === "object") return true
      return false
    }

    if (event === "object/empty") {
      return typeof input !== "object" ||
      input === undefined ||
      input === null ||
      Object.getOwnPropertyNames(input).length <= 0
    }

    if (event === "file/extension") {
      try {

        const fileExtension = input.file.name.split('.').pop()
        if (fileExtension === input.extension) return true
        return false

      } catch (error) {
        return false
      }
    }

    if (event === "file/extensions") {
      return new Promise((resolve, reject) => {
        try {
          const fileExtension = input.file.name.split('.').pop()
          for (let i = 0; i < input.extensions.length; i++) {
            const extension = input.extensions[i]

            if (this.verifyIs("file/extension", {file: input.file, extension})) {
              resolve()
            }

          }
          throw new Error("file extension not allowed")
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "file/type") {
      if (input.file.type === input.type) return true
      return false
    }

    if (event === "file/types") {
      return new Promise((resolve, reject) => {
        try {
          for (let i = 0; i < input.types.length; i++) {
            const type = input.types[i]
            if (this.verifyIs("file/type", {file: input.file, type })) {
              resolve()
            }
          }
          throw new Error("mime type not allowed")
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "file/image") {

      return new Promise(async(resolve, reject) => {
        try {

          const allowedMimeTypes = ["image/jpeg", "image/png", "image/svg+xml"]
          const allowedExtensions = ["jpg", "jpeg", "png", "svg"]

          const types = await this.verifyIs("file/mime-types", {file: input, types: allowedMimeTypes})

          if (types === false) {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            throw new Error("no image")
          }

          const extensions = await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})

          if (extensions === false) {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            throw new Error("no image")
          }

          resolve(true)

        } catch (error) {
          resolve(false)
        }
      })


    }

    if (event === "file/pdf") {

      return new Promise(async(resolve, reject) => {
        try {

          const allowedMimeTypes = ["application/pdf"]
          const allowedExtensions = ["pdf"]

          const types = await this.verifyIs("file/mime-types", {file: input, types: allowedMimeTypes})

          if (types === false) {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            throw new Error("no pdf")
          }

          const extensions = await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})

          if (extensions === false) {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            throw new Error("no pdf")
          }

          resolve(true)

        } catch (error) {
          resolve(false)
        }
      })


    }

    if (event === "file/html") {

      return new Promise(async(resolve, reject) => {
        try {

          const allowedMimeTypes = ["text/html"]
          const allowedExtensions = ["html"]

          const types = await this.verifyIs("file/mime-types", {file: input, types: allowedMimeTypes})

          if (types === false) {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            throw new Error("no html")
          }

          const extensions = await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})

          if (extensions === false) {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            throw new Error("no html")
          }

          resolve(true)

        } catch (error) {
          resolve(false)
        }
      })


    }

    if (event === "file/svg+xml") {

      return new Promise(async(resolve, reject) => {
        try {

          const allowedMimeTypes = ["image/svg+xml"]
          const allowedExtensions = ["svg"]

          const types = await this.verifyIs("file/mime-types", {file: input, types: allowedMimeTypes})

          if (types === false) {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            throw new Error("no svg")
          }

          const extensions = await this.verifyIs("file/extensions", {file: input, extensions: allowedExtensions})

          if (extensions === false) {
            window.alert(`Erlaubte Formate: ${allowedExtensions.join(", ")}`)
            throw new Error("no svg")
          }

          resolve(true)

        } catch (error) {
          resolve(false)
        }
      })


    }

    if (event === "file/mp3") {
      return new Promise(async(resolve, reject) => {
        try {
          const reader = new FileReader()

          const blobSlice = input.slice(0, 4)

          reader.onloadend = () => {
            const arrayBuffer = new Uint8Array(reader.result)

            const bytes = []
            arrayBuffer.forEach(byte => {
              bytes.push(byte.toString(16))
            })
            const fileType = bytes.join('').toUpperCase()

            const mp3Signature = "494433"

            if (fileType.startsWith(mp3Signature)) {
              resolve(true)
            } else {
              resolve(false)
            }

          }

          reader.readAsArrayBuffer(blobSlice)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "number/empty") {
      return input === undefined ||
      input === null ||
      Number.isNaN(input) ||
      typeof input !== "number" ||
      input === ""
    }

    if (event === "script-id/disabled") {
      if (!this.verifyIs("text/empty", input)) {
        const scripts = JSON.parse(window.localStorage.getItem("scripts")) || []
        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i]
          if (script.id === input) {
            if (script.disabled) {
              return true
            }
          }
        }
      }
      return false
    }

    if (event === "tag/empty") {
      return this.verifyIs("text/empty", input) || !/^[a-z](?:-?[a-z]+)*$/.test(input)
    }

    if (event === "text/json") {
      try {
        JSON.parse(input)
        return true
      } catch (error) {
        return false
      }
      return false
    }

    if (event === "text/operator") {
      if (input === "=") return true
      if (input === ">=") return true
      if (input === "<=") return true
      if (input === "!=") return true
      if (input === "<") return true
      if (input === ">") return true
      return false
    }

    if (event === "text/url") {
      try {
        new URL(input)
        return true
      } catch (error) {
        return false
      }
    }

    if (event === "text/email") {
      if (typeof input !== "string") return false
      if (input === undefined) return false
      if (input === null) return false
      if (input === "") return false
      if (input === "null") return false
      if (input.replace(/\s/g, "") === "") return false
      if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input) === false) return false
      if (/^(.+)@(.+)$/.test(input) === true) return true
      return false
    }

    if (event === "text/empty") {
      return typeof input !== "string" ||
        input === "undefined" ||
        input === undefined ||
        input === null ||
        input === "null" ||
        input === "" ||
        input.replace(/\s/g, "") === ""
    }

    if (event === "text/js") {

      try {
        if (this.verifyIs("text/empty", input) === true) throw new Error("text is empty")
        new Function(input)
        return true
      } catch (error) {
        return false
      }

    }

    if (event === "text/tree") {
      if (typeof input !== "string") return false

      if (/^(?!.*[-.]{2,})(?!.*^-)(?!.*\.$)(?!.*\.\.$)[a-z]+([-.][a-z]+)*$/.test(input)) {
        return true
      } else {
        return false
      }

    }

    if (event === "text/tel") {
      if (typeof input !== "string") return false
      if (/^\+[0-9]+$/.test(input) === true) return true
      return false
    }

    if (event === "field-funnel/valid") {
      return new Promise(async(resolve, reject) => {
        try {

          const promises = []
          input.querySelectorAll(".field").forEach(async field => {
            const fieldInput = field.querySelector(".field-input")
            const promise = this.verifyIs("input/valid", fieldInput)

            promises.push(promise)
          })

          const results = await Promise.all(promises)

          if (results.every((element) => element === true)) {
            resolve(true)
          } else {
            resolve(false)
          }

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "user/location-writable") {

      return new Promise(async(resolve, reject) => {

        try {

          const verify = {}
          verify.url = "/verify/user/closed/"
          verify.type = "location-writable"
          const res = await this.request("closed/json", verify)

          resolve(res)


        } catch (error) {
          reject(error)
        }


      })

    }

    if (event === "user/location-expert") {
      return new Promise(async(resolve, reject) => {
        try {
          const verify = {}
          verify.url = "/verify/user/closed/"
          verify.type = "location-expert"
          const res = await this.request("closed/json", verify)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "user/expert") {
      return new Promise(async(resolve, reject) => {
        try {
          const verify = {}
          verify.url = "/verify/user/closed/"
          verify.type = "expert"
          const res = await this.request("closed/json", verify)
          resolve(res)
        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "user/closed") {

      return new Promise(async(resolve, reject) => {

        try {

          const verify = {}
          verify.url = "/verify/user/closed/"
          verify.type = "closed"
          const res = await this.request("closed/json", verify)

          resolve(res)


        } catch (error) {
          reject(error)
        }


      })

    }

    if (event === "user/getyour-admin") {

      return new Promise(async(resolve, reject) => {

        try {

          const verify = {}
          verify.url = "/verify/user/closed/"
          verify.type = "getyour-admin"
          const res = await this.request("closed/json", verify)

          resolve(res)


        } catch (error) {
          reject(error)
        }


      })

    }

    if (event === "text/number") {

      try {
        return !isNaN(Number(input))
      } catch (error) {
        return false
      }

    }

    if (event === "text/int") {

      try {
        const number = Number(input)
        return Number.isInteger(number)
      } catch (error) {
        return false
      }

    }

    if (event === "text/+int") {

      try {
        const number = Number(input)
        return Number.isInteger(number) && number > 0
      } catch (error) {
        return false
      }

    }

    if (event === "text/isbn") {
      return /^\d{9}[\dXx]$/.test(input.replace(/-/g, '')) || /^\d{13}$/.test(input.replace(/-/g, ''))
    }

    if (event === "text/path") {
      if (typeof input !== "string") return false
      if (/^\/[\w\-._~!$&'()*+,;=:@/]+\/$/.test(input) === true) return true
      return false
    }

    if (event === "input/valid") {

      return new Promise((resolve) => {


        // required, no accept
        if (input.hasAttribute("required") && !input.hasAttribute("accept")) {
          if (this.verifyIs("input/required", input)) {
            this.setValidStyle(input)
            return resolve(true)
          } else {
            this.setNotValidStyle(input)
            if (input.parentElement) input.parentElement.scrollIntoView({behavior: "smooth"})
            return resolve(false)
          }
        }

        // accept, no required
        if (input.hasAttribute("accept") && !input.hasAttribute("required")) {

          if (input.value === "") {

            this.setValidStyle(input)
            return resolve(true)

          } else {

            if (this.verifyIs("input/accepted", input)) {

              this.setValidStyle(input)
              return resolve(true)

            } else {
              this.setNotValidStyle(input)
              if (input.parentElement) input.parentElement.scrollIntoView({behavior: "smooth"})
              return resolve(false)
            }

          }

        }

        // no accept, no required
        if (!input.hasAttribute("accept") && !input.hasAttribute("required")) {
          this.setValidStyle(input)
          return resolve(true)
        }

        // accept and required
        if (input.hasAttribute("required") && input.hasAttribute("accept")) {
          if (this.verifyIs("input/required", input)) {
            if (this.verifyIs("input/accepted", input)) {
              this.setValidStyle(input)
              return resolve(true)
            }
          }
          this.setNotValidStyle(input)
          if (input.parentElement) input.parentElement.scrollIntoView({behavior: "smooth"})
          return resolve(false)
        }


      })

    }

    if (event === "input/accepted") {

      if (input.getAttribute("accept") === "application/pdf") {

        return new Promise(async(resolve, reject) => {

          try {

            const promises = []
            for (var i = 0; i < input.files.length; i++) {
              const file = input.files[i]
              const promise = this.verifyIs("file/pdf", file)
              promises.push(promise)
            }

            const results = await Promise.all(promises)

            if (results.every((element) => element === true)) {
              resolve(true)
            } else {
              resolve(false)
            }

          } catch (error) {
            resolve(false)
          }

        })

      }

      if (input.getAttribute("accept") === "text/js") {

        try {
          return this.verifyIs("text/js", input.value)
        } catch (error) {
          return false
        }
      }

      if (input.getAttribute("accept") === "text/trees") {

        if (!input.value.startsWith("[")) return false
        if (!input.value.endsWith("]")) return false
        try {
          const array = JSON.parse(input.value)
          for (let i = 0; i < array.length; i++) {
            const text = array[i]

            if (!this.verifyIs("text/tree", text)) return false

          }
          return true
        } catch (error) {
          return false
        }


      }

      if (input.getAttribute("accept") === "text/tree") {
        input.value = input.value.replace(/ /g, ".")

        if (this.verifyIs("text/tree", input.value) === true) return true

        return false

      }

      if (input.getAttribute("accept") === "text/operator") {
        return this.verifyIs("text/operator", input.value)
      }

      if (input.getAttribute("accept") === "text/email") {
        if (typeof input.value !== "string") return false
        if (/^(.+)@(.+)$/.test(input.value) === true) return true
        return false
      }

      if (input.getAttribute("accept") === "text/url") {
        if (this.verifyIs("text/url", input.value)) return true
        return false
      }

      if (input.getAttribute("accept") === "text/number") {
        if (this.verifyIs("text/number", input.value)) return true
        return false
      }

      if (input.requiredIndex !== undefined) {
        let selected = []
        for (let i = 0; i < input.options.length; i++) {
          const option = input.options[i]
          if (option.selected === true) {
            selected.push(option)
          }
        }
        for (let i = 0; i < selected.length; i++) {
          if (selected[i].value === input.options[input.requiredIndex].value) {
            return true
          }
        }
      }

      if (input.getAttribute("accept") === "text/tel") {
        if (this.verifyIs("text/tel", input.value)) return true
        return false
      }

      if (input.getAttribute("accept") === "text/id") {
        if (typeof input.value !== "string") return false
        input.value = input.value.replace(/ /g, "-")
        if (/^[a-z](?:-?[a-z]+)*$/.test(input.value) === true) {
          if (document.querySelectorAll(`#${input.value}`).length === 0) {
            return true
          } else {
            return false
          }
        }
        return false
      }

      if (input.getAttribute("accept") === "text/path") {
        if (typeof input.value !== "string") return false

        if (input.value.length === 1) {
          if (input.value.startsWith("/")) return true
        }

        if (/^\/[\w\-._~!$&'()*+,;=:@/]+\/$/.test(input.value) === true) return true
        return false
      }

      if (input.getAttribute("accept") === "text/hex") {
        if (typeof input.value !== "string") return false
        if (/^[0-9A-Fa-f]+$/.test(input.value) === true) return true
        return false
      }

      if (input.getAttribute("accept") === "text/tag") {
        if (typeof input.value !== "string") return false
        input.value = input.value.replace(/ /g, "-")
        if (/^[a-z](?:-?[a-z]+)*$/.test(input.value) === true) return true
        return false
      }

      if (input.getAttribute("accept") === "text/https") {

        if (input.value.startsWith("https://")) return true
        return false

      }

      if (input.getAttribute("accept") === "email/array") {

        if (!input.value.startsWith("[")) return false
        if (!input.value.endsWith("]")) return false
        try {
          const array = JSON.parse(input.value)
          for (let i = 0; i < array.length; i++) {
            const email = array[i]

            if (Helper.verifyIs("email/empty", email)) return false

          }
          return true
        } catch (error) {
          return false
        }


      }

      if (input.getAttribute("accept") === "string/array") {

        if (!input.value.startsWith("[")) return false
        if (!input.value.endsWith("]")) return false
        try {
          const array = JSON.parse(input.value)
          for (let i = 0; i < array.length; i++) {
            const string = array[i]

            if (Helper.verifyIs("text/empty", string)) return false

          }
          return true
        } catch (error) {
          return false
        }


      }

      if (input.getAttribute("accept") === "text/script") {
        const script = this.convert("text/dom", input.value)
        if (script === undefined) return false
        if (script.tagName === "SCRIPT") return true
        return false
      }

      if (input.getAttribute("accept") === "text/field-funnel") {
        const funnel = this.convert("text/dom", input.value)
        if (funnel === undefined) return false
        if (funnel.tagName === "DIV") {
          if (funnel.classList.contains("field-funnel")) return true
        }
        return false
      }


      return false
    }

    if (event === "input/required") {


      // input required
      if (
        input.hasAttribute("required") ||
        input.getAttribute("required") === "true" ||
        input.required === true
      ) {

        if (input.getAttribute("type") === "checkbox") {

          if (input.getAttribute("checked") === "true") return true
          if (input.checked === true) return true

          return false
        }

        if (!this.verifyIs("text/empty", input.value)) return true
        return false

      }

      // select required
      if (input.requiredIndex !== undefined) {
        for (let i = 0; i < input.options.length; i++) {
          const option = input.options[i]
          if (option.selected === true) {
            if (option.value !== input.options[input.requiredIndex].value) {
              return true
            }
          }
        }
      }
      return false
    }

    if (event === "id/unique") {
      if (document.querySelectorAll(`#${input}`).length === 0) {
        return true
      } else {
        return false
      }
    }

    if (event === "text/id") {
      if (this.verifyIs("text/tag", input)) {
        if (document.querySelectorAll(`#${input}`).length === 0) {
          return true
        } else {
          return false
        }
      }
    }

    if (event === "class/closest-node") {

      try {

        const result = input.node.closest(`.${input.class}`)

        if (result === null) {
          return false
        } else {
          return true
        }

      } catch (error) {
        return false
      }
    }

    if (event === "class/found") {
      return new Promise(async(resolve, reject) => {
        try {
          let found = false
          input.node.querySelectorAll("*").forEach((item, i) => {
            if (item.classList.contains(input.class)) {
              found = true
            }
          })
          resolve(found)

        } catch (error) {
          reject(error)
        }
      })
    }

    if (event === "class/loaded") {
     return new Promise(async (resolve, reject) => {
        try {
          const observer = new MutationObserver((mutations, observer) => {
            for (let i = 0; i < mutations.length; i++) {
              const mutation = mutations[i]

              if (mutation.type === "childList") {

                if (mutation.target.classList.contains(input)) {
                  resolve(mutation.target)
                }

              }
            }
          })
          observer.observe(document.documentElement, {
            childList: true,
            subtree: true,
          })

        } catch (error) {
          reject(error)
        }
     })
    }

    if (event === "id/loaded") {

      return new Promise(async(resolve, reject) => {
        try {

          const observer = new MutationObserver((mutations, observer) => {
            for (let i = 0; i < mutations.length; i++) {
              const mutation = mutations[i]

              if (mutation.type === "childList") {

                mutation.addedNodes.forEach(node => {

                  if (node.id === input) {
                    resolve(node)
                  }

                })

              }

            }
          })
          observer.observe(document.documentElement, {
            childList: true,
            subtree: true,
          })

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "element/loaded") {

      return new Promise(async(resolve, reject) => {
        try {

          const observer = new MutationObserver((mutations, observer) => {
            for (let i = 0; i < mutations.length; i++) {
              const mutation = mutations[i]

              if (mutation.type === "childList") {

                mutation.addedNodes.forEach(node => {

                  if (node.id === input) {
                    resolve(node)
                  }

                })

              }

            }
          })
          observer.observe(document.documentElement, {
            childList: true,
            subtree: true,
          })

        } catch (error) {
          reject(error)
        }
      })

    }

    if (event === "element/html") {
      const htmlString = input.outerHTML
      const parser = new DOMParser()
      const doc = parser.parseFromString(htmlString, 'text/html')

      const parsedElement = doc.body.firstChild
      if (!parsedElement) {
        return false
      }

      for (let i = 0; i < parsedElement.children.length; i++) {
        const child = parsedElement.children[i]
        if (!this.verifyIs("element/html", child)) {
          return false
        }
      }

      return true
    }

    if (event === "email/empty") {
      return this.verifyIs("text/empty", input) || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input)
    }

    if (event === "text/hex") {
      if (typeof input !== "string") return false
      if (/^[0-9A-Fa-f]+$/.test(input) === true) return true
      return false
    }

    if (event === "text/tag") {
      if (typeof input !== "string") return false
      if (/^[a-z](?:-?[a-z]+)*$/.test(input) === true) return true
      return false
    }

  }

  static async withVerifiedEmail(email, callback) {
    const event = {}

    this.overlay("toolbox", async securityOverlay => {

      securityOverlay.style.backgroundColor = this.colors.light.background
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        securityOverlay.style.backgroundColor = this.colors.dark.background
      }

      document.body.style.overflow = "hidden"

      const content = document.createElement("div")
      content.style.display = "flex"
      content.style.flexDirection = "column"
      content.style.justifyContent = "center"
      content.style.alignItems = "center"
      content.style.height = `${window.innerHeight}px`

      this.render("icon/node/path", "/public/loading.svg", content).then(icon => {
        icon.style.width = "55px"
        const svg = icon.querySelector("svg")
        svg.style.fill = this.colors.light.error
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          svg.style.fill = this.colors.dark.error
        }
      })

      const info = document.createElement("div")
      info.innerHTML = "Das kann einen Moment dauern .."
      info.style.fontSize = "21px"
      info.style.color = this.colors.light.error
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        info.style.color = this.colors.dark.error
      }
      info.style.margin = "13px"
      content.append(info)
      securityOverlay.append(content)

      try {
        const send = {}
        send.url = "/request/send/email/with/pin/"
        send.email = email
        send.location = window.location.href
        send.referer = document.referrer
        const res = await this.request("location/json", send)

        if (res.status === 200) {

          this.convert("element/reset", content)
          content.style.overflowY = "auto"

          const pinField = this.create("field/hex", content)
          pinField.label.textContent = "Meine PIN"
          this.setNotValidStyle(pinField.input)
          pinField.input.addEventListener("input", () => {
            this.verify("input/value", pinField.input)
          })

          const button = this.create("button/action", content)
          button.style.fontSize = "34px"
          button.innerHTML = "PIN bestätigen"
          button.addEventListener("click", async () => {

            this.overlay("security", async securityOverlay => {

              try {

                await this.verify("input/value", pinField.input)

                const pin = pinField.input.value

                const verify = {}
                verify.url = "/request/verify/pin/"
                verify.userPin = pin
                verify.location = window.location.href
                verify.referer = document.referrer
                const res = await this.request("location/json", verify)

                if (res.status === 200) {

                  const id = await this.convert("text/digest", JSON.stringify({email: email, verified: true}))
                  window.localStorage.setItem("localStorageId", id)
                  window.localStorage.setItem("email", email)

                  callback(event)

                }

              } catch (error) {

                EventTarget.prototype.addEventListener = function(type, listener, options) {
                  console.log('Event listeners blocked')
                }
                window.XMLHttpRequest = function() {
                  console.log('XHR blocked')
                }
                alert("Es tut uns sehr leid, dass ein Fehler aufgetreten ist. Wir verstehen, wie frustrierend es sein kann, wenn Dinge nicht so funktionieren, wie sie sollten. Wir möchten Sie gerne beruhigen und Ihnen versichern, dass unser Team hart daran arbeitet, diesen Fehler so schnell wie möglich zu beheben. Wir hoffen, dass Sie uns die Gelegenheit geben werden, das Problem zu lösen. Falls der Fehler noch einmal auftritt, stehen wir Ihnen gerne zur Verfügung. Bitte zögern Sie nicht, uns unter 'datenschutz@get-your.de' zu kontaktieren, damit wir Ihnen helfen können. In der Zwischenzeit möchten wir Sie ermutigen, es einfach noch einmal zu versuchen. Vielen Dank für Ihr Verständnis und Ihre Geduld.")
                window.location.reload()
                throw error

              }

            })

          })

          const infoBox = this.create("info/success", content)
          infoBox.style.fontSize = "21px"
          infoBox.innerHTML = `
            <p>PIN erfolgreich an '${email}' gesendet. <span style="font-size:34px;">✓</span></p>
            <p>Es ist wichtig, dass deine PIN geheim gehalten wird, da sie als persönliches Kennwort dient und den Zugriff auf sensible Informationen oder Ressourcen ermöglicht. Teile deine PIN niemals mit anderen Personen. Das gilt selbst für enge Freunde, Familienmitglieder oder Mitarbeiter. Deine PIN sollte nur dir bekannt sein.</p>
            <p><b><span style="font-size:34px;">Bitte bestätige deine PIN um fortzufahren.</span></b></p>
          `

        }



      } catch (error) {
        EventTarget.prototype.addEventListener = function(type, listener, options) {
          console.log('Event listeners blocked')
        }
        window.XMLHttpRequest = function() {
          console.log('XHR blocked')
        }
        alert(`Es konnte keine E-Mail an '${email}' verschickt werden.`)
        // window.location.reload()
        throw error
      }

    })

  }

}
